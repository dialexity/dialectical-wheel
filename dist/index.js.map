{"version":3,"file":"index.js","sources":["../src/components/DialecticalWheel/DialecticalWheel.tsx","../src/components/ExploreComponent/ExploreComponent.js","../src/components/DialecticalWheel/components/ArrowControls.tsx","../src/components/DialecticalWheel/components/StepControls.tsx","../src/components/DialecticalWheel/config/wheelConfig.ts","../src/utils/SliceGenerator.tsx","../src/services/wisdomService.js","../src/components/DialecticalWheel/hooks/useNodeConnections.ts","../src/components/DialecticalWheel/hooks/useWheelSlices.ts"],"sourcesContent":["import {Runtime, Inspector} from '@observablehq/runtime';\nimport React, {useEffect, useRef, useState} from 'react';\n// @ts-ignore - Import the fixed version from package.json\nimport notebook from '@dialexity/dialectical-wheel';\n\nexport interface DialecticalWheelProps {\n  dialecticalData: any;\n  arrowConnections?: string;\n  width?: string;\n  height?: string;\n  onChartReady?: (chart: any) => void;\n}\n\nexport default function DialecticalWheel({\n  dialecticalData,\n  arrowConnections = '',\n  width = '100%',\n  height = '100%',\n  onChartReady\n}: DialecticalWheelProps) {\n  const chartRef = useRef<HTMLDivElement>(null);\n  const [module, setModule] = useState<any>(null);\n  const [chart, setChart] = useState<any>(null);\n  const [runtime, setRuntime] = useState<any>(null);\n  \n  useEffect(() => {\n    console.log('Loading Observable notebook from local npm package...');\n    \n    const runtime = new Runtime();\n    setRuntime(runtime);\n    \n    const main = runtime.module(notebook, (name: string) => {\n      if (name === 'chart') {\n        return new class extends Inspector {\n          constructor(node: any) {\n            super(node);\n          }\n          fulfilled(value: any) {\n            // The chart value IS the SVG node with methods attached\n            setChart(value);\n            if (onChartReady) onChartReady(value);\n            return super.fulfilled(value);\n          }\n        }(chartRef.current);\n      }\n      // Don't render the Observable controls - we'll use React components instead\n      return undefined;\n    });\n\n    setModule(main);\n    \n    return () => {\n      setModule(null);\n      setChart(null);\n      setRuntime(null);\n      runtime.dispose();\n    };\n  }, []);\n\n  // Separate useEffect for redefining data - this follows the Observable examples pattern\n  useEffect(() => {\n    if (module) {\n      try {\n        module.redefine('dialecticalData', dialecticalData);\n        module.redefine('arrowConnections', arrowConnections);\n      } catch (error) {\n        console.warn('Could not redefine variables in notebook:', error);\n      }\n    }\n  }, [dialecticalData, arrowConnections, module]);\n\n  return (\n    <div className=\"dialectical-wheel-wrapper\">\n      <div \n        ref={chartRef} \n        className=\"chart-container\"\n        style={{\n          width: `${width}`,\n          height: `${height}`,\n          //border: '1px solid #ddd',\n          borderRadius: '8px',\n          background: 'white'\n        }}\n      />\n      \n      {/* Debug info */}\n      <div style={{ \n        marginTop: '10px', \n        padding: '10px', \n        background: '#f8f9fa', \n        borderRadius: '4px',\n        fontSize: '12px',\n        color: '#666'\n      }}>\n        Debug: {Object.keys(dialecticalData).length} entries passed: {Object.keys(dialecticalData).join(', ')}<br/>\n        Using local npm package: @dialexity/dialectical-wheel\n      </div>\n    </div>\n  );\n} ","import React, { useState } from 'react';\n\nconst ExploreComponent = ({ \n  userMessage, \n  wisdomUnits, \n  currentApiCycle, \n  onEdit \n}) => {\n  const [currentUnitIndex, setCurrentUnitIndex] = useState(0);\n\n  const currentUnit = wisdomUnits[currentUnitIndex];\n\n  const handlePrevious = () => {\n    setCurrentUnitIndex(prev => prev > 0 ? prev - 1 : wisdomUnits.length - 1);\n  };\n\n  const handleNext = () => {\n    setCurrentUnitIndex(prev => prev < wisdomUnits.length - 1 ? prev + 1 : 0);\n  };\n\n  const getComponentCards = (unit) => {\n    const cards = [];\n    \n    // THESIS components (green)\n\n    if (unit.t?.statement) {\n        cards.push({\n          id: 't',\n          text: unit.t.statement,\n          label: 'THESIS', \n          color: '#ffffff',\n          textColor: '#155724',\n          type: 'thesis'\n        });\n      }\n\n    if (unit.tPlus?.statement) {\n      cards.push({\n        id: 'tPlus',\n        text: unit.tPlus.statement,\n        label: 'GOAL',\n        color: '#d4edda',\n        textColor: '#155724',\n        type: 'thesis'\n      });\n    }\n    \n    if (unit.tMinus?.statement) {\n      cards.push({\n        id: 'tMinus',\n        text: unit.tMinus.statement,\n        label: 'RISK',\n        color: '#f8d7da', \n        textColor: '#721c24',\n        type: 'thesis'\n      });\n    }\n\n    \n    \n    // ANTITHESIS components (red/orange)\n\n    if (unit.a?.statement) {\n        cards.push({\n          id: 'a',\n          text: unit.a.statement,\n          label: 'ANTITHESIS',\n          color: '#ffffff',\n          textColor: '#0c5460',\n          type: 'antithesis'\n        });\n      }\n\n    if (unit.aPlus?.statement) {\n      cards.push({\n        id: 'aPlus',\n        text: unit.aPlus.statement,\n        label: 'DUTY',\n        color: '#d4edda',\n        textColor: '#0c5460',\n        type: 'antithesis'\n      });\n    }\n    \n    if (unit.aMinus?.statement) {\n      cards.push({\n        id: 'aMinus',\n        text: unit.aMinus.statement,\n        label: 'DANGER',\n        color: '#f8d7da',\n        textColor: '#721c24', \n        type: 'antithesis'\n      });\n    }\n    \n    return cards;\n  };\n\n  if (!currentUnit || wisdomUnits.length === 0) {\n    return (\n      <div style={{ \n        padding: '40px 20px', \n        textAlign: 'center',\n        color: '#6c757d'\n      }}>\n        <div style={{ fontSize: '48px', marginBottom: '20px' }}>ü§î</div>\n        <h3 style={{ margin: '0 0 10px 0', color: '#495057' }}>\n          No wisdom units found\n        </h3>\n        <p style={{ margin: 0, lineHeight: '1.5' }}>\n          Try running a new analysis to explore solutions.\n        </p>\n      </div>\n    );\n  }\n\n  const componentCards = getComponentCards(currentUnit);\n\n  return (\n    <div style={{ \n      maxWidth: '500px', \n      margin: '0 auto',\n      padding: '20px',\n      backgroundColor: 'white',\n      minHeight: 'calc(100vh - 80px)'\n    }}>\n      {/* Header with problem statement and navigation */}\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginBottom: '20px',\n        padding: '15px',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px',\n        border: '1px solid #e9ecef'\n      }}>\n        <h2 style={{\n          margin: 0,\n          fontSize: '18px',\n          fontWeight: '600',\n          color: '#2c3e50',\n          flex: 1\n        }}>\n          {userMessage || 'Exploring Solutions'}\n        </h2>\n        <button\n          onClick={onEdit}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            fontSize: '16px',\n            cursor: 'pointer',\n            padding: '5px',\n            color: '#6c757d'\n          }}\n        >\n          ‚úèÔ∏è\n        </button>\n      </div>\n\n      {/* Unit Navigation */}\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginBottom: '25px',\n        padding: '10px 15px',\n        backgroundColor: 'white',\n        borderRadius: '8px',\n        border: '2px solid #e9ecef'\n      }}>\n        <button\n          onClick={handlePrevious}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            fontSize: '20px',\n            cursor: 'pointer',\n            padding: '8px',\n            color: '#6c757d',\n            borderRadius: '50%'\n          }}\n        >\n          ‚Üê \n        </button>\n        \n        <div style={{ textAlign: 'center' }}>\n          <div style={{\n            fontSize: '14px',\n            fontWeight: '600',\n            color: '#495057',\n            marginBottom: '2px'\n          }}>\n            Perspective {currentUnitIndex + 1} of {wisdomUnits.length}\n          </div>\n          <div style={{\n            fontSize: '12px',\n            color: '#6c757d'\n          }}>\n            Thesis vs Antithesis\n          </div>\n        </div>\n        \n        <button\n          onClick={handleNext}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            fontSize: '20px',\n            cursor: 'pointer',\n            padding: '8px',\n            color: '#6c757d',\n            borderRadius: '50%'\n          }}\n        >\n          ‚Üí\n        </button>\n      </div>\n\n      {/* Wisdom Unit Components */}\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '15px' }}>\n        {/* Thesis Cards */}\n        {componentCards.filter(card => card.type === 'thesis').map((card) => (\n          <div\n            key={card.id}\n            style={{\n              backgroundColor: card.color,\n              borderRadius: '8px',\n              padding: '15px 20px',\n              border: '1px solid rgba(0,0,0,0.1)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between'\n            }}\n          >\n            <div style={{\n              fontSize: '16px',\n              fontWeight: '500',\n              color: card.textColor,\n              flex: 1,\n              lineHeight: '1.4'\n            }}>\n              {card.text}\n            </div>\n            \n            <div style={{\n              fontSize: '12px',\n              fontWeight: '700',\n              color: card.textColor,\n              backgroundColor: 'rgba(255,255,255,0.3)',\n              padding: '4px 8px',\n              borderRadius: '4px',\n              marginLeft: '15px',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '5px'\n            }}>\n              {card.label}\n            </div>\n          </div>\n        ))}\n        \n        {/* Divider */}\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          margin: '10px 0',\n          gap: '15px'\n        }}>\n          <div style={{\n            flex: 1,\n            height: '2px',\n            background: 'linear-gradient(to right, transparent, #e9ecef, transparent)'\n          }}></div>\n          <div style={{\n            fontSize: '14px',\n            fontWeight: '600',\n            color: '#6c757d',\n            backgroundColor: 'white',\n            padding: '8px 16px',\n            borderRadius: '20px',\n            border: '2px solid #e9ecef'\n          }}>\n            VS\n          </div>\n          <div style={{\n            flex: 1,\n            height: '2px',\n            background: 'linear-gradient(to left, transparent, #e9ecef, transparent)'\n          }}></div>\n        </div>\n        \n        {/* Antithesis Cards */}\n        {componentCards.filter(card => card.type === 'antithesis').map((card) => (\n          <div\n            key={card.id}\n            style={{\n              backgroundColor: card.color,\n              borderRadius: '8px',\n              padding: '15px 20px',\n              border: '1px solid rgba(0,0,0,0.1)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between'\n            }}\n          >\n            <div style={{\n              fontSize: '16px',\n              fontWeight: '500',\n              color: card.textColor,\n              flex: 1,\n              lineHeight: '1.4'\n            }}>\n              {card.text}\n            </div>\n            \n            <div style={{\n              fontSize: '12px',\n              fontWeight: '700',\n              color: card.textColor,\n              backgroundColor: 'rgba(255,255,255,0.3)',\n              padding: '4px 8px',\n              borderRadius: '4px',\n              marginLeft: '15px',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '5px'\n            }}>\n              {card.label}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Unit Indicator Dots */}\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '8px',\n        marginTop: '30px',\n        padding: '20px 0'\n      }}>\n        {wisdomUnits.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setCurrentUnitIndex(index)}\n            style={{\n              width: '12px',\n              height: '12px',\n              borderRadius: '50%',\n              border: 'none',\n              backgroundColor: index === currentUnitIndex ? '#17a2b8' : '#e9ecef',\n              cursor: 'pointer',\n              transition: 'background-color 0.2s'\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Optimal Sequence Info */}\n      {currentApiCycle && (\n        <div style={{\n          marginTop: '20px',\n          padding: '15px',\n          backgroundColor: '#f8f9fa',\n          borderRadius: '8px',\n          textAlign: 'center',\n          border: '1px solid #e9ecef'\n        }}>\n          <div style={{\n            fontSize: '14px',\n            color: '#6c757d',\n            marginBottom: '8px'\n          }}>\n            Optimal Sequence: {currentApiCycle.rawSequence?.join(' ‚Üí ')}\n          </div>\n          <div style={{\n            fontSize: '12px',\n            color: '#495057'\n          }}>\n            Confidence: {currentApiCycle ? (currentApiCycle.probability * 100).toFixed(0) + '%' : 'N/A'}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ExploreComponent; ","import React, { useState, useEffect } from 'react';\n\ninterface ArrowControlsProps {\n  chart: any;\n  dialecticalData: any;\n  arrowConnections: string;\n  setArrowConnections: (dot: string) => void;\n}\n\n// Arrow parsing function (from Observable notebook)\nfunction parseArrowConnections(dotScript: string, dialecticalData: any) {\n  const connections = [];\n  const lines = dotScript.split('\\n');\n  \n  for (let line of lines) {\n    // Remove comments and trim\n    line = line.split('//')[0].trim();\n    if (!line) continue;\n    \n    // Parse \"A -> B\" syntax, supporting + and - suffixes\n    const match = line.match(/(\\w+[+-]?)\\s*->\\s*(\\w+[+-]?)/);\n    if (match) {\n      const [, from, to] = match;\n      \n      // Extract unit ID and ring type\n      const parseUnit = (unit: string) => {\n        if (unit.endsWith('+')) {\n          const unitId = unit.slice(0, -1);\n          return dialecticalData[unitId] ? { unitId, ringType: 'inner' } : null;\n        } else if (unit.endsWith('-')) {\n          const unitId = unit.slice(0, -1);\n          return dialecticalData[unitId] ? { unitId, ringType: 'outer' } : null;\n        } else {\n          return dialecticalData[unit] ? { unitId: unit, ringType: 'middle' } : null;\n        }\n      };\n      \n      const fromParsed = parseUnit(from);\n      const toParsed = parseUnit(to);\n      \n      if (fromParsed && toParsed) {\n        connections.push({ \n          from: fromParsed.unitId, \n          to: toParsed.unitId,\n          fromRing: fromParsed.ringType,\n          toRing: toParsed.ringType\n        });\n      }\n    }\n  }\n  \n  return connections;\n}\n\nexport default function ArrowControls({ chart, dialecticalData, arrowConnections, setArrowConnections }: ArrowControlsProps) {\n  const [arrowsVisible, setArrowsVisibleState] = useState(false);\n\n  // Step-by-step arrow state (matching Observable notebook)\n  const [arrowStepMode, setArrowStepMode] = useState(false);\n  const [currentArrowStep, setCurrentArrowStep] = useState(0);\n  const [parsedArrowConnections, setParsedArrowConnections] = useState<any[]>([]);\n  const [currentArrowInfo, setCurrentArrowInfo] = useState(\"\");\n\n  // Parse connections whenever they change\n  useEffect(() => {\n    if (chart && arrowConnections) {\n      const parsed = parseArrowConnections(arrowConnections, dialecticalData);\n      setParsedArrowConnections(parsed);\n      console.log('Parsed arrow connections:', parsed);\n    }\n  }, [arrowConnections, dialecticalData, chart]);\n\n  // Update arrow step UI (matching Observable notebook)\n  const updateArrowStepUI = () => {\n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    const totalArrows = connections.length;\n    \n    if (arrowStepMode) {\n      console.log(`Arrow step ${currentArrowStep} of ${totalArrows}`);\n    } else {\n      console.log(`Showing all ${totalArrows} arrows`);\n    }\n  };\n\n  useEffect(() => {\n    updateArrowStepUI();\n  }, [arrowStepMode, currentArrowStep, parsedArrowConnections]);\n\n  // Helper function to calculate arrow color based on connection\n  const getArrowColor = (conn: any) => {\n    let color = \"#666\"; // Default gray\n    \n    // Check if either endpoint is NOT middle ring (inner/outer ring connections)\n    if (conn.fromRing !== 'middle' || conn.toRing !== 'middle') {\n      if ((conn.fromRing === 'inner' && conn.toRing === 'inner') || \n          (conn.fromRing === 'outer' && conn.toRing === 'outer')) {\n        color = \"#16a34a\"; // Green for same polarity\n      } else if ((conn.fromRing === 'inner' && conn.toRing === 'outer') || \n                 (conn.fromRing === 'outer' && conn.toRing === 'inner')) {\n        color = \"#dc2626\"; // Red for opposite polarity\n      } else {\n        color = \"#8b5cf6\"; // Purple for mixed connections (middle to inner/outer)\n      }\n    } else {\n      // Both are middle ring - check thesis vs antithesis\n      const fromIsThesis = conn.from.startsWith('T');\n      const toIsThesis = conn.to.startsWith('T');\n      if (fromIsThesis === toIsThesis) {\n        color = \"#2563eb\"; // Blue for same type (T->T or A->A)\n      } else {\n        color = \"#dc2626\"; // Red for opposition (T->A or A->T)\n      }\n    }\n    \n    return color;\n  };\n\n  // Draw arrows up to specific step (matching Observable notebook)\n  const drawArrowsUpToStep = (step: number) => {\n    if (!chart || !chart.clearArrows || !chart.drawArrow) return;\n    \n    chart.clearArrows();\n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    const connectionsToShow = connections.slice(0, step);\n    \n    connectionsToShow.forEach((conn: any, index: number) => {\n      const color = getArrowColor(conn);\n      const delay = index * 200;\n      chart.drawArrow(conn.from, conn.to, color, 2, conn.fromRing, conn.toRing, delay);\n    });\n  };\n\n  // Draw next arrow (matching Observable notebook)\n  const drawNextArrow = () => {\n    if (!chart || !chart.drawArrow) return false;\n    \n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    if (currentArrowStep >= connections.length) {\n      return false; // No more arrows to draw\n    }\n    \n    const conn = connections[currentArrowStep];\n    const color = getArrowColor(conn);\n    \n    chart.drawArrow(conn.from, conn.to, color, 2, conn.fromRing, conn.toRing, 0);\n    return true;\n  };\n\n  // Custom function to draw all arrows based on current connections (replaces chart.drawAllArrows)\n  const drawAllCurrentArrows = () => {\n    if (!chart || !chart.clearArrows || !chart.drawArrow) return;\n    \n    chart.clearArrows();\n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    console.log('Drawing all current arrows:', connections);\n    \n    connections.forEach((conn: any, index: number) => {\n      const color = getArrowColor(conn);\n      const delay = index * 300;\n      chart.drawArrow(conn.from, conn.to, color, 2, conn.fromRing, conn.toRing, delay);\n    });\n  };\n\n  // Start arrow step mode (matching Observable notebook)\n  const handleStartArrowStepMode = () => {\n    const parsed = parseArrowConnections(arrowConnections, dialecticalData);\n    setParsedArrowConnections(parsed);\n    setArrowStepMode(true);\n    setCurrentArrowStep(0);\n    \n    if (chart && chart.clearArrows) {\n      chart.clearArrows();\n    }\n    \n    setArrowsVisibleState(false);\n    updateArrowStepUI();\n  };\n\n  // Step forward (matching Observable notebook)\n  const handleStepForward = () => {\n    if (!arrowStepMode) return;\n    \n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    if (currentArrowStep < connections.length) {\n      const success = drawNextArrow();\n      if (success) {\n        setCurrentArrowStep(prev => prev + 1);\n        updateArrowStepUI();\n      }\n    }\n  };\n\n  // Step backward (matching Observable notebook)\n  const handleStepBackward = () => {\n    if (!arrowStepMode) return;\n    \n    if (currentArrowStep > 0) {\n      const newStep = currentArrowStep - 1;\n      setCurrentArrowStep(newStep);\n      drawArrowsUpToStep(newStep);\n      updateArrowStepUI();\n    }\n  };\n\n  // Show all arrows (exit step mode)\n  const handleShowAllArrows = () => {\n    setArrowStepMode(false);\n    setCurrentArrowStep(0);\n    \n    // Use our custom function instead of chart.drawAllArrows\n    drawAllCurrentArrows();\n    \n    setArrowsVisibleState(true);\n    updateArrowStepUI();\n  };\n\n  // Toggle arrows (matching Observable notebook)\n  const handleToggleArrows = () => {\n    if (!chart) return;\n    \n    if (arrowsVisible) {\n      if (chart.clearArrows) {\n        chart.clearArrows();\n      }\n      setArrowsVisibleState(false);\n    } else {\n      if (arrowStepMode) {\n        drawArrowsUpToStep(currentArrowStep);\n      } else {\n        // Use our custom function instead of chart.drawAllArrows\n        drawAllCurrentArrows();\n      }\n      setArrowsVisibleState(true);\n    }\n  };\n\n  // Redraw arrows\n  const handleRedrawArrows = () => {\n    if (!chart || !arrowsVisible) return;\n    \n    if (arrowStepMode) {\n      drawArrowsUpToStep(currentArrowStep);\n    } else {\n      // Use our custom function instead of chart.drawAllArrows\n      drawAllCurrentArrows();\n    }\n  };\n\n  // Update connections (matching Observable notebook)\n  const handleUpdateConnections = () => {\n    console.log('Update button clicked');\n    console.log('Editor value:', arrowConnections);\n    \n    // Parse the new connections\n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    setParsedArrowConnections(connections);\n    console.log('Parsed connections:', connections);\n    \n    if (arrowStepMode) {\n      setCurrentArrowStep(0);\n      updateArrowStepUI();\n      if (arrowsVisible && chart && chart.clearArrows) {\n        chart.clearArrows();\n      }\n    } else {\n      // In normal mode, redraw all arrows using the new connections\n      if (arrowsVisible) {\n        drawAllCurrentArrows();\n      }\n    }\n\n    setArrowConnections(arrowConnections);\n  };\n\n  const getArrowCounterText = () => {\n    if (arrowStepMode) {\n      return `Arrow ${currentArrowStep} of ${parsedArrowConnections.length}`;\n    }\n    return arrowsVisible ? \"All Arrows Visible\" : \"Ready to start\";\n  };\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center', \n      margin: '20px 0',\n      padding: '20px',\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      background: 'white'\n    }}>\n      <div style={{ marginBottom: '10px', fontWeight: 'bold' }}>Arrow Connections</div>\n      \n      {/* Basic Arrow Controls */}\n      <div style={{ \n        display: 'flex', \n        gap: '10px', \n        marginBottom: '15px', \n        alignItems: 'center' \n      }}>\n        <button \n          onClick={handleToggleArrows}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: '#f8f9fa',\n            cursor: 'pointer'\n          }}\n        >\n          {arrowsVisible ? 'Hide Arrows' : 'Show Arrows'}\n        </button>\n        \n        <button \n          onClick={handleRedrawArrows}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: '#f8f9fa',\n            cursor: 'pointer'\n          }}\n        >\n          Redraw Arrows\n        </button>\n      </div>\n      \n      {/* Step-by-Step Arrow Drawing */}\n      <div style={{ \n        border: '1px solid #ddd', \n        borderRadius: '8px', \n        padding: '15px', \n        marginBottom: '15px', \n        background: '#f9f9f9',\n        width: '100%',\n        maxWidth: '500px'\n      }}>\n        <div style={{ fontWeight: 'bold', marginBottom: '10px' }}>Step-by-Step Arrow Drawing</div>\n        \n        <div style={{ \n          display: 'flex', \n          gap: '10px', \n          marginBottom: '10px', \n          alignItems: 'center',\n          flexWrap: 'wrap',\n          justifyContent: 'center'\n        }}>\n          <button \n            onClick={handleStartArrowStepMode}\n            disabled={arrowStepMode}\n            style={{\n              padding: '6px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: arrowStepMode ? '#e9ecef' : '#e7f3ff',\n              cursor: arrowStepMode ? 'not-allowed' : 'pointer'\n            }}\n          >\n            Start Step Mode\n          </button>\n          \n          <button \n            onClick={handleStepBackward}\n            disabled={!arrowStepMode || currentArrowStep <= 0}\n            style={{\n              padding: '6px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: (!arrowStepMode || currentArrowStep <= 0) ? '#e9ecef' : '#f8f9fa',\n              cursor: (!arrowStepMode || currentArrowStep <= 0) ? 'not-allowed' : 'pointer'\n            }}\n          >\n            Previous\n          </button>\n          \n          <span style={{ \n            margin: '0 10px', \n            fontWeight: 'bold', \n            minWidth: '120px',\n            textAlign: 'center'\n          }}>\n            {getArrowCounterText()}\n          </span>\n          \n                      <button \n             onClick={handleStepForward}\n             disabled={!arrowStepMode || currentArrowStep >= parseArrowConnections(arrowConnections, dialecticalData).length}\n            style={{\n              padding: '6px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: (!arrowStepMode || currentArrowStep >= parsedArrowConnections.length) ? '#e9ecef' : '#f8f9fa',\n              cursor: (!arrowStepMode || currentArrowStep >= parsedArrowConnections.length) ? 'not-allowed' : 'pointer'\n            }}\n          >\n            Next Arrow\n          </button>\n          \n          <button \n            onClick={handleShowAllArrows}\n            style={{\n              padding: '6px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: '#f8f9fa',\n              cursor: 'pointer'\n            }}\n          >\n            Show All\n          </button>\n        </div>\n        \n        <div style={{ \n          fontSize: '12px', \n          color: '#666', \n          minHeight: '20px', \n          fontStyle: 'italic',\n          textAlign: 'center'\n        }}>\n          {currentArrowInfo}\n        </div>\n      </div>\n      \n      {/* Connection Editor */}\n      <div style={{ width: '100%', maxWidth: '500px' }}>\n        <div style={{ marginBottom: '10px' }}>\n          <label htmlFor=\"connections-editor\" style={{ fontWeight: 'bold' }}>\n            Edit Connections (DOT syntax):\n          </label>\n        </div>\n        \n        <textarea \n          id=\"connections-editor\"\n          value={arrowConnections}\n          onChange={(e) => setArrowConnections(e.target.value)}\n          style={{\n            width: '100%',\n            height: '150px',\n            fontFamily: 'monospace',\n            fontSize: '12px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            padding: '8px',\n            resize: 'vertical'\n          }}\n        />\n        \n        <div style={{ marginTop: '10px' }}>\n          <button \n            onClick={handleUpdateConnections}\n            style={{\n              padding: '8px 16px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: '#007bff',\n              color: 'white',\n              cursor: 'pointer'\n            }}\n          >\n            Update Arrows\n          </button>\n        </div>\n        \n        <div style={{ \n          marginTop: '15px', \n          fontSize: '12px', \n          color: '#666', \n          maxWidth: '500px'\n        }}>\n          <strong>Syntax:</strong> Use \"A ‚Üí B\" format. Available units: {Object.keys(dialecticalData).join(', ')}<br/>\n          <strong>Ring-specific:</strong> Add + for positives (e.g., T1+) or - for negatives (e.g., T1-)<br/>\n          <strong>Colors:</strong> üî¥Red for oppositions, üîµBlue for same type, üü¢Green for same polarity, üü£Purple for mixed\n        </div>\n      </div>\n    </div>\n  );\n} ","import React, { useEffect, useState } from 'react';\n\ninterface StepControlsProps {\n  chart: any;\n}\n\nexport default function StepControls({ chart }: StepControlsProps) {\n  const [stepMode, setStepModeState] = useState({ isActive: false, currentStep: 0, totalSteps: 0 });\n  const [rotation, setRotationState] = useState(0);\n\n  useEffect(() => {\n    if (chart) {\n      // Update step info initially\n      updateStepInfo();\n    }\n  }, [chart]);\n\n  const updateStepInfo = () => {\n    if (chart && chart.getCurrentStepInfo) {\n      try {\n        const info = chart.getCurrentStepInfo();\n        if (info) {\n          setStepModeState({\n            isActive: true,\n            currentStep: info.current,\n            totalSteps: info.total\n          });\n        } else {\n          setStepModeState({ isActive: false, currentStep: 0, totalSteps: 0 });\n        }\n      } catch (error) {\n        console.error('Error getting step info:', error);\n      }\n    }\n  };\n\n  const handleStartStepMode = () => {\n    if (chart && chart.startStepMode) {\n      try {\n        chart.startStepMode();\n        updateStepInfo();\n      } catch (error) {\n        console.error('Error starting step mode:', error);\n      }\n    }\n  };\n\n  const handleStepForward = () => {\n    if (chart && chart.stepForward) {\n      try {\n        chart.stepForward();\n        updateStepInfo();\n      } catch (error) {\n        console.error('Error stepping forward:', error);\n      }\n    }\n  };\n\n  const handleResetToFull = () => {\n    if (chart && chart.resetToFull) {\n      try {\n        chart.resetToFull();\n        updateStepInfo();\n      } catch (error) {\n        console.error('Error resetting to full:', error);\n      }\n    }\n  };\n\n  const handleRotationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const degrees = parseInt(e.target.value);\n    const radians = (degrees * Math.PI) / 180;\n    setRotationState(degrees);\n    if (chart && chart.rotate) {\n      try {\n        chart.rotate(radians);\n      } catch (error) {\n        console.error('Error rotating:', error);\n      }\n    }\n  };\n\n  const handleRotationReset = () => {\n    setRotationState(0);\n    if (chart && chart.rotate) {\n      try {\n        chart.rotate(0);\n      } catch (error) {\n        console.error('Error resetting rotation:', error);\n      }\n    }\n  };\n\n  const getCounterText = () => {\n    if (stepMode.isActive) {\n      return `Step ${stepMode.currentStep} of ${stepMode.totalSteps}`;\n    }\n    return \"Full View\";\n  };\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center', \n      margin: '20px 0',\n      padding: '20px',\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      background: 'white'\n    }}>\n      <h3 style={{ marginTop: 0 }}>Step Controls</h3>\n      \n      {/* Step controls */}\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        gap: '10px', \n        marginBottom: '15px', \n        alignItems: 'center' \n      }}>\n        <button \n          onClick={handleStartStepMode}\n          disabled={stepMode.isActive}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: stepMode.isActive ? '#e9ecef' : '#007bff',\n            color: stepMode.isActive ? '#6c757d' : 'white',\n            cursor: stepMode.isActive ? 'not-allowed' : 'pointer'\n          }}\n        >\n          Start Step Mode\n        </button>\n        \n        <span style={{ margin: '0 10px', fontWeight: 'bold' }}>\n          {getCounterText()}\n        </span>\n        \n        <button \n          onClick={handleStepForward}\n          disabled={!stepMode.isActive || stepMode.currentStep >= stepMode.totalSteps}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: (!stepMode.isActive || stepMode.currentStep >= stepMode.totalSteps) ? '#e9ecef' : '#28a745',\n            color: (!stepMode.isActive || stepMode.currentStep >= stepMode.totalSteps) ? '#6c757d' : 'white',\n            cursor: (!stepMode.isActive || stepMode.currentStep >= stepMode.totalSteps) ? 'not-allowed' : 'pointer'\n          }}\n        >\n          Next\n        </button>\n        \n        <button \n          onClick={handleResetToFull}\n          disabled={!stepMode.isActive}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: !stepMode.isActive ? '#e9ecef' : '#dc3545',\n            color: !stepMode.isActive ? '#6c757d' : 'white',\n            cursor: !stepMode.isActive ? 'not-allowed' : 'pointer'\n          }}\n        >\n          Show All\n        </button>\n      </div>\n      \n      {/* Rotation controls */}\n      <div style={{ \n        display: 'flex', \n        alignItems: 'center', \n        gap: '10px' \n      }}>\n        <label htmlFor=\"rotation-slider\" style={{ fontWeight: 'bold' }}>\n          Rotation:\n        </label>\n        <input \n          type=\"range\" \n          id=\"rotation-slider\" \n          min=\"0\" \n          max=\"360\" \n          value={rotation} \n          step=\"1\"\n          onChange={handleRotationChange}\n          style={{ width: '200px', cursor: 'pointer' }}\n        />\n        <span style={{ minWidth: '40px', fontFamily: 'monospace' }}>\n          {rotation}¬∞\n        </span>\n        <button \n          onClick={handleRotationReset}\n          style={{\n            padding: '4px 8px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: '#f8f9fa',\n            cursor: 'pointer',\n            fontSize: '12px'\n          }}\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n} ","export const WHEEL_CONFIG = {\n  // Core wheel dimensions\n  DIMENSIONS: {\n    CENTER_X: 200,\n    CENTER_Y: 200,\n    RADIUS: 150,\n    CENTER_CIRCLE_RADIUS: 30,\n    SLICE_INNER_RADIUS_RATIO: 0.3, // Inner radius is 30% of total radius\n    SLICE_OUTER_RADIUS_RATIO: 1.0,  // Outer radius is 100% of total radius\n  },\n\n  // Colors\n  COLORS: {\n    // Slice type colors\n    THESIS: '#4CAF50',        // Green for thesis\n    ANTITHESIS: '#F44336',    // Red for antithesis\n    \n    // Layer colors (from inner to outer)\n    LAYER_COLORS: ['#C6E5B3', '#FFFFFF', '#F9C6CC'], // green, white, pink\n    \n    // UI colors\n    PRIMARY_BLUE: '#007AFF',\n    ACCENT_BLUE: '#0074d9',\n    CENTER_CIRCLE: '#FFC107', // Yellow/gold\n    BOUNDARY_LINES: '#888',   // Gray\n    \n    // Arrow marker colors\n    ARROWS: {\n      DEFAULT: '#0074d9',\n      ORANGE: '#FF6B35',\n      BLUE: '#2196F3',\n      PURPLE: '#9C27B0',\n      GREEN: '#4CAF50',\n    },\n    \n    // Background and UI\n    BACKGROUND: '#f7f7f7',\n    WHITE: '#FFFFFF',\n    BLACK: '#000000',\n  },\n\n  // Typography\n  TYPOGRAPHY: {\n    // Font sizes for different elements\n    CENTER_LABEL: 16,\n    SLICE_LAYERS: [8, 10, 14], // Inner, middle, outer layer font sizes\n    DEFAULT_FONT_FAMILY: \"'Arial Rounded MT Bold', Arial, sans-serif\",\n  },\n\n  // Slice configuration\n  SLICES: {\n    DEFAULT_ANGLE: 120,\n    LAYER_COUNT: 3,\n    // Layer distribution within slice (as ratios)\n    LAYER_RATIOS: [\n      { inner: 0.3, outer: 0.55 }, // Inner layer: 30% to 55%\n      { inner: 0.55, outer: 0.775 }, // Middle layer: 55% to 77.5%\n      { inner: 0.775, outer: 1.0 },  // Outer layer: 77.5% to 100%\n    ],\n  },\n\n  // Stroke and line properties\n  STROKES: {\n    BOUNDARY_WIDTH: 1,\n    HOVER_WIDTH: 2,\n    FOCUS_WIDTH: 3,\n    ARROW_WIDTH: 2,\n    DEBUG_WIDTH: 2,\n  },\n\n  // Animation and interaction\n  ANIMATION: {\n    // Rotation hints configuration\n    ROTATION_HINTS: [\n      { radius: 160, opacity: 0.7, strokeWidth: 2, dashArray: \"8 4\", duration: \"6s\", direction: 1 },\n      { radius: 170, opacity: 0.6, strokeWidth: 1.5, dashArray: \"4 8\", duration: \"8s\", direction: 1 },\n      { radius: 180, opacity: 0.5, strokeWidth: 2, dashArray: \"2 4\", duration: \"12s\", direction: -1 },\n      { radius: 190, opacity: 0.4, strokeWidth: 1, dashArray: \"6 3\", duration: \"10s\", direction: 1 },\n      { radius: 200, opacity: 0.3, strokeWidth: 1.5, dashArray: \"3 6\", duration: \"15s\", direction: -1 },\n      { radius: 210, opacity: 0.2, strokeWidth: 1, dashArray: \"5 2\", duration: \"18s\", direction: 1 }\n    ],\n    \n    // Transition durations\n    TRANSITION_DURATION: '0.3s',\n    OPACITY_TRANSITION: '0.2s',\n  },\n\n  // SVG markers configuration\n  MARKERS: {\n    ROTATION_ARROW: {\n      id: 'rotation-arrow',\n      width: 8,\n      height: 6,\n      refX: 8,\n      refY: 3,\n      color: '#007AFF',\n      opacity: 0.6,\n    },\n    \n    ARROWHEADS: [\n      { id: 'arrowhead', color: '#0074d9' },\n      { id: 'arrowhead-orange', color: '#FF6B35' },\n      { id: 'arrowhead-blue', color: '#2196F3' },\n      { id: 'arrowhead-purple', color: '#9C27B0' },\n      { id: 'arrowhead-green', color: '#4CAF50' },\n    ],\n    \n    ARROWHEAD_DIMENSIONS: {\n      width: 6,\n      height: 4,\n      refX: 6,\n      refY: 2,\n    },\n  },\n\n  // Interaction zones and thresholds\n  INTERACTION: {\n    HOVER_OPACITY: 0.8,\n    SELECTED_OPACITY: 0.9,\n    FOCUS_BRIGHTNESS: 1.2,\n    PAIR_HIGHLIGHT_BRIGHTNESS: 1.1,\n    \n    // Touch and click thresholds\n    TOUCH_THRESHOLD: 10, // pixels\n    DOUBLE_TAP_DELAY: 300, // milliseconds\n  },\n\n  // Layout and responsive design\n  LAYOUT: {\n    SVG_VIEWBOX: \"0 0 400 400\",\n    \n    // Responsive breakpoints (matching CSS)\n    BREAKPOINTS: {\n      MOBILE: 768,\n      SMALL_MOBILE: 480,\n    },\n    \n    // Control overlay positioning\n    CONTROLS_OVERLAY: {\n      top: 60,\n      left: 20,\n      fontSize: 12,\n      padding: 8,\n    },\n  },\n\n  // Default wheel configuration\n  DEFAULTS: {\n    NUM_PAIRS: 4,\n    TITLE: \"Win-Win\",\n    CENTER_LABEL: \"Core\",\n    SHOW_BOUNDARIES: true,\n    ENABLE_ARROWS: false,\n  },\n} as const;\n\n// Export individual sections for convenience\nexport const { DIMENSIONS, COLORS, TYPOGRAPHY, SLICES, STROKES, ANIMATION, MARKERS, INTERACTION, LAYOUT, DEFAULTS } = WHEEL_CONFIG;\n\n// Type definitions for configuration\nexport type WheelConfig = typeof WHEEL_CONFIG;\nexport type WheelDimensions = typeof DIMENSIONS;\nexport type WheelColors = typeof COLORS;\nexport type WheelTypography = typeof TYPOGRAPHY; ","import React from 'react';\nimport { COLORS, DIMENSIONS, SLICES, TYPOGRAPHY, STROKES } from '../components/DialecticalWheel/config/wheelConfig';\n\n// Type definitions\ninterface LayerNode {\n  nodeId: string;\n  sliceId: string;\n  pairIndex?: number;\n  sliceType?: 'thesis' | 'antithesis';\n  layerIndex: number;\n  layerType: 'green' | 'white' | 'pink';\n}\n\ninterface SliceData {\n  labels: [string, string][];\n}\n\ninterface SliceProps {\n  sliceData: SliceData;\n  sliceId: string;\n  angle?: number;\n  cx?: number;\n  cy?: number;\n  radius?: number;\n  sliceAngle?: number;\n  layerColors?: string[] | null;\n  fontSizes?: number[] | null;\n  showBoundaries?: boolean;\n  pairIndex?: number | null;\n  sliceType?: 'thesis' | 'antithesis' | null;\n  originalSliceIndex?: number | null;\n}\n\n// Utility functions\nconst wrapTextForArc = (text: string, arcLength: number, fontSize: number): string[] => {\n  if (!text) return [''];\n  \n  const avgCharWidth = fontSize * 0.6;\n  const maxCharsPerLine = Math.floor(arcLength / avgCharWidth);\n  \n  if (text.length <= maxCharsPerLine) {\n    return [text];\n  }\n  \n  const words = text.split(' ');\n  const lines: string[] = [];\n  let currentLine = '';\n  \n  for (const word of words) {\n    const testLine = currentLine + (currentLine ? ' ' : '') + word;\n    if (testLine.length <= maxCharsPerLine) {\n      currentLine = testLine;\n    } else {\n      if (currentLine) {\n        lines.push(currentLine);\n        currentLine = word;\n      } else {\n        lines.push(word.substring(0, maxCharsPerLine));\n        currentLine = word.substring(maxCharsPerLine);\n      }\n    }\n  }\n  \n  if (currentLine) {\n    lines.push(currentLine);\n  }\n  \n  return lines.slice(0, 3); // Max 3 lines\n};\n\nconst calculateOptimalFontSize = (text: string, arcLength: number, maxFontSize: number, minFontSize: number = 4): number => {\n  if (!text) return maxFontSize;\n  \n  let fontSize = maxFontSize;\n  while (fontSize >= minFontSize) {\n    const avgCharWidth = fontSize * 0.6;\n    const maxCharsPerLine = Math.floor(arcLength / avgCharWidth);\n    \n    const lines = wrapTextForArc(text, arcLength, fontSize);\n    const longestLine = Math.max(...lines.map(line => line.length));\n    \n    if (longestLine <= maxCharsPerLine) {\n      return fontSize;\n    }\n    \n    fontSize -= 0.5;\n  }\n  \n  return minFontSize;\n};\n\nconst toRadians = (deg: number): number => deg * Math.PI / 180;\n\n// React component for slice at a specific angle\nexport const SliceAtAngle: React.FC<SliceProps> = ({\n  sliceData,\n  sliceId,\n  angle = 0,\n  cx = DIMENSIONS.CENTER_X,\n  cy = DIMENSIONS.CENTER_Y,\n  radius = DIMENSIONS.RADIUS,\n  sliceAngle = SLICES.DEFAULT_ANGLE,\n  layerColors = null,\n  fontSizes = null,\n  showBoundaries = true,\n  pairIndex = null,\n  sliceType = null,\n  originalSliceIndex = null\n}) => {\n  const { labels } = sliceData;\n  const nLabels = labels.length;\n  \n  const colors = layerColors || COLORS.LAYER_COLORS;\n  const fonts = fontSizes || TYPOGRAPHY.SLICE_LAYERS;\n  \n  const halfAngle = sliceAngle / 2;\n  \n  // Generate layer elements (rings)\n  const layerElements: JSX.Element[] = [];\n  \n      for (let layer = 0; layer < nLabels; layer++) {\n    const innerRadius = radius * (DIMENSIONS.SLICE_INNER_RADIUS_RATIO + (DIMENSIONS.SLICE_OUTER_RADIUS_RATIO - DIMENSIONS.SLICE_INNER_RADIUS_RATIO) * layer / nLabels);\n    const outerRadius = radius * (DIMENSIONS.SLICE_INNER_RADIUS_RATIO + (DIMENSIONS.SLICE_OUTER_RADIUS_RATIO - DIMENSIONS.SLICE_INNER_RADIUS_RATIO) * (layer + 1) / nLabels);\n    const color = colors[layer % colors.length];\n    \n    const startAngleRad = toRadians(angle - halfAngle);\n    const endAngleRad = toRadians(angle + halfAngle);\n    \n    const innerX1 = cx + innerRadius * Math.cos(startAngleRad);\n    const innerY1 = cy + innerRadius * Math.sin(startAngleRad);\n    const innerX2 = cx + innerRadius * Math.cos(endAngleRad);\n    const innerY2 = cy + innerRadius * Math.sin(endAngleRad);\n    \n    const outerX1 = cx + outerRadius * Math.cos(startAngleRad);\n    const outerY1 = cy + outerRadius * Math.sin(startAngleRad);\n    const outerX2 = cx + outerRadius * Math.cos(endAngleRad);\n    const outerY2 = cy + outerRadius * Math.sin(endAngleRad);\n    \n    const largeArc = sliceAngle > 180 ? 1 : 0;\n    \n    const pathD = `M ${outerX1},${outerY1} \n                   A ${outerRadius},${outerRadius} 0 ${largeArc},1 ${outerX2},${outerY2} \n                   L ${innerX2},${innerY2} \n                   A ${innerRadius},${innerRadius} 0 ${largeArc},0 ${innerX1},${innerY1} Z`;\n    \n    // Generate node attributes for data\n    const layerType = layer === 0 ? 'green' : layer === 1 ? 'white' : 'pink';\n    const nodeId = `${sliceId}-layer-${layer}`;\n    \n    layerElements.push(\n      <path\n        key={`${sliceId}-layer-${layer}`}\n        d={pathD}\n        fill={color}\n        className=\"layer-node\"\n        data-node-id={nodeId}\n        data-slice-id={sliceId}\n        data-pair-index={pairIndex ?? undefined}\n        data-slice-type={sliceType ?? undefined}\n        data-layer-index={layer}\n        data-layer-type={layerType}\n      />\n    );\n  }\n  \n  // Generate text elements\n  const textElements: JSX.Element[] = [];\n  \n  for (let j = 0; j < labels.length; j++) {\n    const [label, color] = labels[j];\n    \n    // Calculate radius for this layer with better clearance from edges\n    const innerRadius = radius * (0.3 + 0.7 * j / nLabels);\n    const outerRadius = radius * (0.3 + 0.7 * (j + 1) / nLabels);\n    \n    // Use weighted average closer to inner edge for outer layers to avoid edge proximity\n    const clearanceFactor = j === (nLabels - 1) ? 0.3 : 0.5; // 30% from inner for outermost, 50% for others\n    const textRadius = innerRadius + (outerRadius - innerRadius) * clearanceFactor;\n    const maxFontSize = fonts[j % fonts.length];\n    \n    // Calculate arc length for this text layer\n    const arcLengthRadians = (sliceAngle * Math.PI) / 180;\n    const arcLength = textRadius * arcLengthRadians;\n    \n    // Calculate optimal font size\n    const optimalFontSize = calculateOptimalFontSize(label, arcLength, maxFontSize);\n    \n    // Wrap text if needed\n    const wrappedLines = wrapTextForArc(label, arcLength, optimalFontSize);\n    \n    // Create arc path for text\n    const startAngleRad = toRadians(angle - halfAngle);\n    const endAngleRad = toRadians(angle + halfAngle);\n    \n    // For multiple lines, adjust radius for each line\n    const lineSpacing = optimalFontSize * 1.2;\n    const totalHeight = (wrappedLines.length - 1) * lineSpacing;\n    const startRadius = textRadius - totalHeight / 2;\n    \n    wrappedLines.forEach((line, lineIndex) => {\n      // Reverse line order: first line gets largest radius (farthest from center)\n      const currentRadius = startRadius + ((wrappedLines.length - 1 - lineIndex) * lineSpacing);\n      \n      // Skip if radius is out of bounds\n      if (currentRadius < radius * 0.3 || currentRadius > radius) {\n        return;\n      }\n      \n      const arcStartX = cx + currentRadius * Math.cos(startAngleRad);\n      const arcStartY = cy + currentRadius * Math.sin(startAngleRad);\n      const arcEndX = cx + currentRadius * Math.cos(endAngleRad);\n      const arcEndY = cy + currentRadius * Math.sin(endAngleRad);\n      \n      const arcId = `${sliceId}-arc-${j}-line-${lineIndex}`;\n      const largeArc = sliceAngle > 180 ? 1 : 0;\n      const arcPath = `M ${arcStartX},${arcStartY} A ${currentRadius},${currentRadius} 0 ${largeArc},1 ${arcEndX},${arcEndY}`;\n      \n      textElements.push(\n        <defs key={`${arcId}-def`}>\n          <path id={arcId} d={arcPath} fill=\"none\" />\n        </defs>\n      );\n      \n      textElements.push(\n        <text key={`${arcId}-text`} fontSize={optimalFontSize} fill={color}>\n          <textPath href={`#${arcId}`} startOffset=\"50%\" textAnchor=\"middle\">\n            {line}\n          </textPath>\n        </text>\n      );\n    });\n  }\n  \n  // Generate boundary lines\n  const boundaryElements: JSX.Element[] = [];\n  \n  if (showBoundaries) {\n    const startAngleRad = toRadians(angle - halfAngle);\n    const endAngleRad = toRadians(angle + halfAngle);\n    \n    const boundaryX1 = cx + radius * Math.cos(startAngleRad);\n    const boundaryY1 = cy + radius * Math.sin(startAngleRad);\n    const boundaryX2 = cx + radius * Math.cos(endAngleRad);\n    const boundaryY2 = cy + radius * Math.sin(endAngleRad);\n    \n    boundaryElements.push(\n      <line\n        key={`${sliceId}-boundary-1`}\n        x1={cx}\n        y1={cy}\n        x2={boundaryX1}\n        y2={boundaryY1}\n        stroke={COLORS.BOUNDARY_LINES}\n        strokeWidth={STROKES.BOUNDARY_WIDTH}\n      />,\n      <line\n        key={`${sliceId}-boundary-2`}\n        x1={cx}\n        y1={cy}\n        x2={boundaryX2}\n        y2={boundaryY2}\n        stroke={COLORS.BOUNDARY_LINES}\n        strokeWidth={STROKES.BOUNDARY_WIDTH}\n      />\n    );\n  }\n  \n  return (\n    <g>\n      {layerElements}\n      {boundaryElements}\n      {textElements}\n    </g>\n  );\n};\n\n// React component for detailed slice (fixed position)\nexport const DetailedSlice: React.FC<{\n  texts: string[];\n  sliceId: string;\n  debugColor?: string;\n}> = ({ texts, sliceId, debugColor = COLORS.BOUNDARY_LINES }) => {\n  const centerX = DIMENSIONS.CENTER_X, centerY = DIMENSIONS.CENTER_Y;\n  const startAngle = -60;\n  const endAngle = 60;\n  \n  const startRad = toRadians(startAngle);\n  const endRad = toRadians(endAngle);\n  \n  const ringRadii = [\n    { inner: 45, outer: 80, fill: COLORS.LAYER_COLORS[0] },   // Inner ring - green\n    { inner: 80, outer: 115, fill: COLORS.LAYER_COLORS[1] },  // Middle ring - white  \n    { inner: 115, outer: 150, fill: COLORS.LAYER_COLORS[2] }  // Outer ring - pink\n  ];\n  \n  const pathElements: JSX.Element[] = [];\n  const textElements: JSX.Element[] = [];\n  \n  // Generate ring paths\n  ringRadii.forEach((ring, index) => {\n    const inner1X = centerX + ring.inner * Math.cos(startRad);\n    const inner1Y = centerY + ring.inner * Math.sin(startRad);\n    const inner2X = centerX + ring.inner * Math.cos(endRad);\n    const inner2Y = centerY + ring.inner * Math.sin(endRad);\n    \n    const outer1X = centerX + ring.outer * Math.cos(startRad);\n    const outer1Y = centerY + ring.outer * Math.sin(startRad);\n    const outer2X = centerX + ring.outer * Math.cos(endRad);\n    const outer2Y = centerY + ring.outer * Math.sin(endRad);\n    \n    const largeArc = 0; // 120¬∞ is less than 180¬∞\n    \n    const pathD = `M ${outer1X},${outer1Y} \n                   A ${ring.outer},${ring.outer} 0 ${largeArc},1 ${outer2X},${outer2Y} \n                   L ${inner2X},${inner2Y} \n                   A ${ring.inner},${ring.inner} 0 ${largeArc},0 ${inner1X},${inner1Y} \n                   L ${outer1X},${outer1Y} Z`;\n    \n    pathElements.push(\n      <path\n        key={`${sliceId}-ring-${index}`}\n        d={pathD}\n        fill={ring.fill}\n        stroke={debugColor}\n        strokeWidth=\"2\"\n      />\n    );\n    \n    // Add text if available\n    if (texts[index]) {\n      const textRadius = (ring.inner + ring.outer) / 2;\n      const arcId = `${sliceId}-arc-${index}`;\n      \n      const textStartX = centerX + textRadius * Math.cos(startRad);\n      const textStartY = centerY + textRadius * Math.sin(startRad);\n      const textEndX = centerX + textRadius * Math.cos(endRad);\n      const textEndY = centerY + textRadius * Math.sin(endRad);\n      \n      const textArcPath = `M ${textStartX},${textStartY} A ${textRadius},${textRadius} 0 ${largeArc},1 ${textEndX},${textEndY}`;\n      \n      const maxFontSize = index === 0 ? 8 : index === 1 ? 10 : 14;\n      const arcLengthRadians = (120 * Math.PI) / 180;\n      const arcLength = textRadius * arcLengthRadians;\n      const optimalFontSize = calculateOptimalFontSize(texts[index], arcLength, maxFontSize);\n      \n      const color = index === 0 ? 'green' : index === 1 ? 'black' : 'red';\n      \n      textElements.push(\n        <defs key={`${arcId}-def`}>\n          <path id={arcId} d={textArcPath} fill=\"none\" />\n        </defs>\n      );\n      \n      textElements.push(\n        <text key={`${arcId}-text`} fontSize={optimalFontSize} fill={color}>\n          <textPath href={`#${arcId}`} startOffset=\"50%\" textAnchor=\"middle\">\n            {texts[index]}\n          </textPath>\n        </text>\n      );\n    }\n  });\n  \n  // Add boundary lines\n  const boundaryElements = [\n    <line\n      key={`${sliceId}-boundary-1`}\n      x1={centerX}\n      y1={centerY}\n      x2={centerX + 150 * Math.cos(startRad)}\n      y2={centerY + 150 * Math.sin(startRad)}\n      stroke={debugColor}\n      strokeWidth=\"3\"\n    />,\n    <line\n      key={`${sliceId}-boundary-2`}\n      x1={centerX}\n      y1={centerY}\n      x2={centerX + 150 * Math.cos(endRad)}\n      y2={centerY + 150 * Math.sin(endRad)}\n      stroke={debugColor}\n      strokeWidth=\"3\"\n    />\n  ];\n  \n  return (\n    <g>\n      {pathElements}\n      {textElements}\n      {boundaryElements}\n    </g>\n  );\n};\n\n// Function to generate pair texts from WisdomUnits (for compatibility with existing code)\nexport const generatePairTextsFromWisdomUnits = (wisdomUnits: any[]) => {\n  const pairTexts: Record<number, any> = {};\n  \n  wisdomUnits.forEach((wu, index) => {\n    // Generate thesis labels\n    const thesisLabels = [];\n    if (wu.tPlus && wu.tPlus.statement) thesisLabels.push([wu.tPlus.statement, 'green']);\n    if (wu.t && wu.t.statement) thesisLabels.push([wu.t.statement, 'black']);\n    if (wu.tMinus && wu.tMinus.statement) thesisLabels.push([wu.tMinus.statement, 'red']);\n    \n    // Generate antithesis labels\n    const antithesisLabels = [];\n    if (wu.aPlus && wu.aPlus.statement) antithesisLabels.push([wu.aPlus.statement, 'green']);\n    if (wu.a && wu.a.statement) antithesisLabels.push([wu.a.statement, 'black']);\n    if (wu.aMinus && wu.aMinus.statement) antithesisLabels.push([wu.aMinus.statement, 'red']);\n    \n    // Only add if we have both sides\n    if (thesisLabels.length > 0 && antithesisLabels.length > 0) {\n      pairTexts[index] = {\n        thesis: thesisLabels,\n        antithesis: antithesisLabels\n      };\n    }\n  });\n  \n  return pairTexts;\n};\n\n// Default pair texts data (moved here to avoid circular dependencies)\nexport const defaultPairTexts = {\n  0: {\n    thesis: [\n      ['Strategic power projection', 'green'],\n      ['Putin initiates war', 'black'], \n      ['Destructive aggression', 'red']\n    ],\n    antithesis: [\n      ['Mutual understanding', 'green'],\n      ['Peace negotiations', 'black'],\n      ['Passive submission', 'red']\n    ]\n  },\n  1: {\n    thesis: [\n      ['Liberation and sovereignty protected', 'green'],\n      ['Ukraine resists invasion', 'black'],\n      ['Endless conflict and destruction', 'red']\n    ],\n    antithesis: [\n      ['Immediate peace achieved', 'green'],\n      ['Ukraine surrenders to invasion', 'black'],\n      ['Freedom and independence lost', 'red']\n    ]\n  },\n  2: {\n    thesis: [\n      ['Ukrainian victory approaches', 'green'],\n      ['Russian offensive weakens', 'black'],\n      ['Military resources drain rapidly', 'red']\n    ],\n    antithesis: [\n      ['Strategic military strength maintained', 'green'],\n      ['Russian military dominance persists', 'black'],\n      ['Total defeat inevitable', 'red']\n    ]\n  },\n  3: {\n    thesis: [\n      ['Freedom restored', 'green'],\n      ['Ukrainian victory approaches', 'black'],\n      ['Vengeance intensifies', 'red']\n    ],\n    antithesis: [\n      ['Stability maintained', 'green'],\n      ['Russian dominance persists', 'black'],\n      ['Oppression deepens', 'red']\n    ]\n  }\n}; ","import React from 'react';\nimport { \n  generatePairTextsFromWisdomUnits \n} from '../utils/SliceGenerator';\n\n// API service for the dialectical wheel API\nexport class WisdomService {\n  \n  // 1. Create a session\n  static async createSession(userMessage, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_message: userMessage\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Session created:', data);\n      return data; // { session_id: \"uuid-string\", user_message: \"...\" }\n    } catch (error) {\n      console.error('Error creating session:', error);\n      throw error;\n    }\n  }\n\n  // 2A. Auto-build a wheel\n  static async autoBuildWheel(sessionId, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}/wheel/auto`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          number_of_thoughts: numberOfThoughts,\n          component_length: componentLength\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Auto-built wheel:', data);\n      return data; // { wheels: [{ wisdom_units: [...] }] }\n    } catch (error) {\n      console.error('Error auto-building wheel:', error);\n      throw error;\n    }\n  }\n\n  // 2B. Manually create a wheel\n  static async createWheel(sessionId, wisdomUnitsData, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}/wheel`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          wisdom_units: wisdomUnitsData\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Created wheel:', data);\n      return data;\n    } catch (error) {\n      console.error('Error creating wheel:', error);\n      throw error;\n    }\n  }\n\n  // 3. Get wisdom units of a specific wheel\n  static async getWisdomUnits(sessionId, wheelId, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}/wheel/${wheelId}/wisdom-units`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Retrieved wisdom units:', data);\n      return data; // { wheel_id: 0, wisdom_units: [...] }\n    } catch (error) {\n      console.error('Error getting wisdom units:', error);\n      throw error;\n    }\n  }\n\n  // 4. Get wheel cycles with sequences\n  static async getWheelCycles(sessionId, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}/wheels/cycles/structured`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Retrieved wheel cycles:', data);\n      return data; // { cycles: [{ sequence: [...], probability: ..., ... }] }\n    } catch (error) {\n      console.error('Error getting wheel cycles:', error);\n      throw error;\n    }\n  }\n\n  // 5. Get session data directly\n  static async getSessionData(sessionId, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Retrieved session data:', data);\n      return data; // Complete session data including wheels and cycles\n    } catch (error) {\n      console.error('Error getting session data:', error);\n      throw error;\n    }\n  }\n\n  // Convert API sequence format to our slice sequence format\n  static convertSequenceToSliceSequence(apiSequence) {\n    // API provides first half of sequence like [\"T1\", \"A2\", \"T3\"] \n    // DialecticalWheel will auto-generate opposites: [\"A1\", \"T2\", \"A3\"]\n    \n    return apiSequence.map(item => {\n      const type = item.startsWith('T') ? 'thesis' : 'antithesis';\n      const pairNumber = parseInt(item.slice(1)) - 1; // Convert T1->0, T2->1, A1->0, etc.\n      \n      return {\n        pair: pairNumber,\n        type: type\n      };\n    });\n  }\n\n  // Get the highest probability cycle sequence\n  static getBestCycleSequence(cyclesData) {\n    if (!cyclesData.cycles || cyclesData.cycles.length === 0) {\n      return null;\n    }\n    \n    // Find cycle with highest probability\n    const bestCycle = cyclesData.cycles.reduce((best, current) => \n      current.probability > best.probability ? current : best\n    );\n    \n    // Extract first half from the complete sequence\n    // If API gives [\"T1\", \"A2\", \"T3\", \"A1\", \"T2\", \"A3\"], take first 3: [\"T1\", \"A2\", \"T3\"]\n    const firstHalf = bestCycle.sequence.slice(0, bestCycle.sequence.length / 2);\n    \n    return {\n      sequence: this.convertSequenceToSliceSequence(firstHalf),\n      probability: bestCycle.probability,\n      causality_direction: bestCycle.causality_direction,\n      reasoning: bestCycle.reasoning,\n      argumentation: bestCycle.argumentation,\n      concepts: bestCycle.concepts,\n      rawSequence: bestCycle.sequence, // Keep full sequence for display\n      firstHalf: firstHalf // Keep first half for debugging\n    };\n  }\n\n  /**\n   * Transform API wisdom units to our internal format\n   * Now properly handles flipped wisdom units based on alias patterns\n   */\n  static transformApiWisdomUnits(apiWisdomUnits) {\n    return apiWisdomUnits.map((unit, index) => {\n      // Detect if this wisdom unit is flipped by checking aliases\n      // Normal: t_minus has T alias, a_minus has A alias\n      // Flipped: t_minus has A alias, a_minus has T alias\n      const isFlipped = unit.t_minus.alias && unit.t_minus.alias.startsWith('A');\n      \n      if (isFlipped) {\n        // Wisdom unit is flipped - thesis and antithesis are swapped\n        return {\n          tPlus: { statement: unit.a_plus.statement },\n          t: { statement: unit.a.statement }, \n          tMinus: { statement: unit.a_minus.statement },\n          aPlus: { statement: unit.t_plus.statement },\n          a: { statement: unit.t.statement },\n          aMinus: { statement: unit.t_minus.statement }\n        };\n      } else {\n        // Normal wisdom unit orientation\n        return {\n          tPlus: { statement: unit.t_plus.statement },\n          t: { statement: unit.t.statement },\n          tMinus: { statement: unit.t_minus.statement },\n          aPlus: { statement: unit.a_plus.statement },\n          a: { statement: unit.a.statement },\n          aMinus: { statement: unit.a_minus.statement }\n        };\n      }\n    });\n  }\n\n  // Complete workflow: Create session + auto-build wheel + get wisdom units\n  static async createSessionAndAutoBuildWheel(userMessage, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n    try {\n      // Step 1: Create session\n      const sessionData = await this.createSession(userMessage, baseUrl);\n      const sessionId = sessionData.session_id;\n\n      // Step 2: Auto-build wheel\n      const wheelData = await this.autoBuildWheel(sessionId, numberOfThoughts, componentLength, baseUrl);\n      \n      console.log('DEBUG: Raw wheel data received:', wheelData);\n      console.log('DEBUG: Number of wheels in response:', wheelData.wheels?.length || 0);\n      \n      // Return all wheels instead of just the first one\n      if (wheelData.wheels && wheelData.wheels.length > 0) {\n        const allWheels = wheelData.wheels.map((wheel, index) => {\n          console.log(`DEBUG: Processing wheel ${index + 1}:`, wheel);\n          const transformedUnits = this.transformApiWisdomUnits(wheel.wisdom_units);\n          console.log(`DEBUG: Transformed wisdom units for wheel ${index + 1}:`, transformedUnits);\n          \n          return {\n            wheelId: index,\n            wisdomUnits: transformedUnits,\n            rawWisdomUnits: wheel.wisdom_units\n          };\n        });\n        \n        console.log('DEBUG: All processed wheels:', allWheels);\n        \n        return {\n          sessionId,\n          wheels: allWheels,\n          selectedWheelIndex: 0, // Default to first wheel\n          rawData: wheelData\n        };\n      } else {\n        throw new Error('No wheels returned from auto-build');\n      }\n    } catch (error) {\n      console.error('Error in complete workflow:', error);\n      throw error;\n    }\n  }\n\n  // Complete workflow with cycles: Create session + auto-build wheel + get wisdom units + get cycles\n  static async createSessionAndAutoBuildWheelWithCycles(userMessage, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n    try {\n      // Step 1: Create session\n      const sessionData = await this.createSession(userMessage, baseUrl);\n      const sessionId = sessionData.session_id;\n\n      // Step 2: Auto-build wheel\n      const wheelData = await this.autoBuildWheel(sessionId, numberOfThoughts, componentLength, baseUrl);\n      \n      // Step 3: Get cycles data\n      const cyclesData = await this.getWheelCycles(sessionId, baseUrl);\n      const bestCycle = this.getBestCycleSequence(cyclesData);\n      \n      // Return all wheels instead of just the first one\n      if (wheelData.wheels && wheelData.wheels.length > 0) {\n        const allWheels = wheelData.wheels.map((wheel, index) => ({\n          wheelId: index,\n          wisdomUnits: this.transformApiWisdomUnits(wheel.wisdom_units),\n          rawWisdomUnits: wheel.wisdom_units\n        }));\n        \n        return {\n          sessionId,\n          wheels: allWheels,\n          selectedWheelIndex: 0, // Default to first wheel\n          sliceSequence: bestCycle?.sequence || null,\n          cycles: cyclesData,\n          bestCycle,\n          rawData: wheelData\n        };\n      } else {\n        throw new Error('No wheels returned from auto-build');\n      }\n    } catch (error) {\n      console.error('Error in complete workflow with cycles:', error);\n      throw error;\n    }\n  }\n\n  // Generate slice sequence from wisdom units order (the order IS the sequence)\n  static generateSequenceFromWisdomUnitsOrder(wisdomUnits) {\n    // The order of wisdom units in the array determines the sequence\n    // If we have [WU_A, WU_B, WU_C], that means sequence [T1, T2, T3]\n    return wisdomUnits.map((_, index) => ({\n      pair: index,\n      type: 'thesis' // First half is always thesis, wheel will auto-generate antithesis\n    }));\n  }\n\n  // Get pair texts for React component compatibility\n  static getPairTextsFromWisdomUnits(wisdomUnits) {\n    return generatePairTextsFromWisdomUnits(wisdomUnits);\n  }\n\n  // Cheaper workflow: Just get existing data from a session (no expensive creation)\n  static async getExistingSessionData(sessionId, baseUrl = '/api') {\n    try {\n      console.log('DEBUG: Getting existing data for session:', sessionId);\n      \n      // Single GET call to retrieve all session data\n      const sessionData = await this.getSessionData(sessionId, baseUrl);\n      \n      // Extract wheels data\n      if (!sessionData.wheels || sessionData.wheels.length === 0) {\n        throw new Error('No wheels found in session data');\n      }\n      \n      const allWheels = sessionData.wheels.map((wheel, index) => ({\n        wheelId: index,\n        wisdomUnits: this.transformApiWisdomUnits(wheel.wisdom_units),\n        rawWisdomUnits: wheel.wisdom_units\n      }));\n      \n      console.log(`DEBUG: Found ${allWheels.length} wheels from session data`);\n      \n      // Always fetch cycles explicitly to ensure we have the full data\n      let cycles = null;\n      let bestCycle = null;\n      \n      try {\n        console.log('DEBUG: Fetching cycles data explicitly for session:', sessionId);\n        cycles = await this.getWheelCycles(sessionId, baseUrl);\n        bestCycle = this.getBestCycleSequence(cycles);\n        console.log('DEBUG: Successfully retrieved cycles:', cycles?.cycles?.length || 0);\n      } catch (error) {\n        console.error('Failed to retrieve cycles data:', error);\n        // Fallback to session data if available\n        if (sessionData.cycles) {\n          console.log('DEBUG: Using cycles from session data as fallback');\n          cycles = sessionData.cycles;\n          bestCycle = this.getBestCycleSequence(sessionData.cycles);\n        }\n      }\n      \n      return {\n        sessionId,\n        wheels: allWheels,\n        selectedWheelIndex: 0,\n        sliceSequence: bestCycle?.sequence || null,\n        cycles,\n        bestCycle,\n        rawData: { wheels: sessionData.wheels }\n      };\n    } catch (error) {\n      console.error('Error getting existing session data:', error);\n      throw error;\n    }\n  }\n}\n\n// React hook for the complete API workflow\nexport function useDialecticalWheel(userMessage, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n  const [sessionId, setSessionId] = React.useState(null);\n  const [wheels, setWheels] = React.useState([]);\n  const [selectedWheelIndex, setSelectedWheelIndex] = React.useState(0);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [rawData, setRawData] = React.useState(null);\n\n  const createAndBuildWheel = React.useCallback(async () => {\n    if (!userMessage) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await WisdomService.createSessionAndAutoBuildWheel(\n        userMessage, \n        numberOfThoughts, \n        componentLength, \n        baseUrl\n      );\n      \n      setSessionId(result.sessionId);\n      setWheels(result.wheels);\n      setSelectedWheelIndex(result.selectedWheelIndex);\n      setRawData(result.rawData);\n      \n      console.log('DEBUG: useDialecticalWheel - wheels set to:', result.wheels);\n      console.log('DEBUG: useDialecticalWheel - wheels length:', result.wheels.length);\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userMessage, numberOfThoughts, componentLength, baseUrl]);\n\n  // Get current wheel data\n  const currentWheel = wheels[selectedWheelIndex] || null;\n  const wisdomUnits = currentWheel?.wisdomUnits || [];\n  const pairTexts = currentWheel ? WisdomService.getPairTextsFromWisdomUnits(currentWheel.wisdomUnits) : {};\n\n  return { \n    sessionId,\n    wheels,\n    selectedWheelIndex,\n    setSelectedWheelIndex,\n    currentWheel,\n    wisdomUnits, \n    pairTexts, \n    loading, \n    error, \n    rawData,\n    refetch: createAndBuildWheel \n  };\n}\n\n// React hook for the complete API workflow with cycles\nexport function useDialecticalWheelWithCycles(userMessage, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n  const [sessionId, setSessionId] = React.useState(null);\n  const [wheels, setWheels] = React.useState([]);\n  const [selectedWheelIndex, setSelectedWheelIndex] = React.useState(0);\n  const [sliceSequence, setSliceSequence] = React.useState(null);\n  const [cycles, setCycles] = React.useState(null);\n  const [bestCycle, setBestCycle] = React.useState(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [rawData, setRawData] = React.useState(null);\n\n  const createAndBuildWheelWithCycles = React.useCallback(async () => {\n    if (!userMessage) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await WisdomService.createSessionAndAutoBuildWheelWithCycles(\n        userMessage, \n        numberOfThoughts, \n        componentLength, \n        baseUrl\n      );\n      \n      setSessionId(result.sessionId);\n      setWheels(result.wheels);\n      setSelectedWheelIndex(result.selectedWheelIndex);\n      setSliceSequence(result.sliceSequence);\n      setCycles(result.cycles);\n      setBestCycle(result.bestCycle);\n      setRawData(result.rawData);\n      \n      console.log('DEBUG: useDialecticalWheelWithCycles - wheels set to:', result.wheels);\n      console.log('DEBUG: useDialecticalWheelWithCycles - wheels length:', result.wheels.length);\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userMessage, numberOfThoughts, componentLength, baseUrl]);\n\n  const getExistingData = React.useCallback(async (existingSessionId) => {\n    if (!existingSessionId) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await WisdomService.getExistingSessionData(existingSessionId, baseUrl);\n      \n      setSessionId(result.sessionId);\n      setWheels(result.wheels);\n      setSelectedWheelIndex(result.selectedWheelIndex);\n      setSliceSequence(result.sliceSequence);\n      setCycles(result.cycles);\n      setBestCycle(result.bestCycle);\n      setRawData(result.rawData);\n      \n      console.log('DEBUG: Retrieved existing data - wheels:', result.wheels.length);\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [baseUrl]);\n\n  const clearSession = React.useCallback(() => {\n    setSessionId(null);\n    setWheels([]);\n    setSelectedWheelIndex(0);\n    setSliceSequence(null);\n    setCycles(null);\n    setBestCycle(null);\n    setRawData(null);\n    setError(null);\n  }, []);\n\n  // Get current wheel data\n  const currentWheel = wheels[selectedWheelIndex] || null;\n  const wisdomUnits = currentWheel?.wisdomUnits || [];\n  const pairTexts = currentWheel ? WisdomService.getPairTextsFromWisdomUnits(currentWheel.wisdomUnits) : {};\n\n  return { \n    sessionId,\n    wheels,\n    selectedWheelIndex,\n    setSelectedWheelIndex,\n    currentWheel,\n    wisdomUnits, \n    pairTexts,\n    sliceSequence,\n    cycles,\n    bestCycle,\n    loading, \n    error, \n    rawData,\n    createNew: createAndBuildWheelWithCycles,\n    getExisting: getExistingData,\n    clearSession\n  };\n}\n\n// React hook for manual wheel creation\nexport function useManualWheel(sessionId, wisdomUnitsData, baseUrl = '/api') {\n  const [wheelData, setWheelData] = React.useState(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  const createWheel = React.useCallback(async () => {\n    if (!sessionId || !wisdomUnitsData) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await WisdomService.createWheel(sessionId, wisdomUnitsData, baseUrl);\n      setWheelData(result);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [sessionId, wisdomUnitsData, baseUrl]);\n\n  return { \n    wheelData, \n    loading, \n    error, \n    createWheel \n  };\n} ","import { useState, useEffect, useCallback } from 'react';\nimport { DynamicSlice } from './useWheelSlices';\n\ninterface DemoConnection {\n  fromId: string;\n  toId: string;\n  color: string;\n  strokeWidth: number;\n  label: string;\n}\n\n// New types for slice layer mapping\ntype SliceLayerCode = string; // e.g., \"T1\", \"T1+\", \"T1-\", \"A1\", \"A1+\", \"A1-\"\ntype LayerType = 'green' | 'white' | 'pink';\ntype SliceType = 'thesis' | 'antithesis';\n\ninterface SliceLayerMapping {\n  pairIndex: number;\n  sliceType: SliceType;\n  layerType: LayerType;\n  layerIndex: number;\n}\n\n// NEW: DOT Script types\ninterface DotEdgeAttributes {\n  color?: string;\n  weight?: number;\n  strokeWidth?: number;\n  label?: string;\n  style?: 'solid' | 'dashed' | 'dotted';\n}\n\ninterface DotEdge {\n  from: SliceLayerCode;\n  to: SliceLayerCode;\n  attributes: DotEdgeAttributes;\n}\n\ninterface DotScriptParseResult {\n  edges: DotEdge[];\n  errors: string[];\n}\n\nexport const useNodeConnections = (\n  dynamicSlices: DynamicSlice[],\n  title: string,\n  recordRef: React.RefObject<SVGGElement>\n) => {\n  const [showArrows, setShowArrows] = useState<boolean>(true);\n  const [demoConnections, setDemoConnections] = useState<DemoConnection[]>([]);\n\n  // Helper functions for layer node management and arrow connections\n  const getAllLayerNodes = useCallback(() => {\n    return document.querySelectorAll('.layer-node');\n  }, []);\n\n  const getLayerNodeById = useCallback((nodeId: string): Element | null => {\n    return document.querySelector(`[data-node-id=\"${nodeId}\"]`);\n  }, []);\n\n  const getLayerNodesForPair = useCallback((pairIndex: number): NodeListOf<Element> => {\n    return document.querySelectorAll(`[data-pair-index=\"${pairIndex}\"].layer-node`);\n  }, []);\n\n  const getLayerNodesByType = useCallback((layerType: string): NodeListOf<Element> => {\n    return document.querySelectorAll(`[data-layer-type=\"${layerType}\"].layer-node`);\n  }, []);\n\n  const getLayerNodeInfo = useCallback((nodeElement: HTMLElement | null) => {\n    if (!nodeElement || !nodeElement.dataset) return null;\n    \n    return {\n      nodeId: nodeElement.dataset.nodeId!,\n      sliceId: nodeElement.dataset.sliceId!,\n      pairIndex: parseInt(nodeElement.dataset.pairIndex!),\n      sliceType: nodeElement.dataset.sliceType!, // thesis or antithesis\n      layerIndex: parseInt(nodeElement.dataset.layerIndex!),\n      layerType: nodeElement.dataset.layerType! // green, white, or pink\n    };\n  }, []);\n\n  const getNodeCenter = useCallback((nodeElement: HTMLElement | null) => {\n    if (!nodeElement) return null;\n    \n    // Get the node's data attributes to calculate position geometrically\n    const nodeId = nodeElement.dataset.nodeId;\n    const sliceId = nodeElement.dataset.sliceId;\n    const layerIndex = parseInt(nodeElement.dataset.layerIndex || '0');\n    \n    // Validate required data attributes\n    if (!nodeId || !sliceId || isNaN(layerIndex)) {\n      console.warn('Missing or invalid data attributes on node:', nodeElement);\n      return null;\n    }\n    \n    // Find the corresponding slice to get its angle\n    const slice = dynamicSlices.find(s => s.id === sliceId);\n    if (!slice) {\n      console.warn('Could not find slice for node:', nodeId);\n      return null;\n    }\n    \n    // Validate layer index\n    if (isNaN(layerIndex) || layerIndex < 0 || layerIndex > 2) {\n      console.warn('Invalid layer index:', layerIndex);\n      return null;\n    }\n    \n    // Calculate the center based on the slice geometry\n    const cx = 200, cy = 200, radius = 150;\n    const layerRadii = [\n      radius * (0.3 + 0.7 * 0.5 / 3), // Green layer center\n      radius * (0.3 + 0.7 * 1.5 / 3), // White layer center  \n      radius * (0.3 + 0.7 * 2.5 / 3)  // Pink layer center\n    ];\n    \n    const layerRadius = layerRadii[layerIndex];\n    const angleRad = slice.angle * Math.PI / 180;\n    \n    return {\n      x: cx + layerRadius * Math.cos(angleRad),\n      y: cy + layerRadius * Math.sin(angleRad)\n    };\n  }, [dynamicSlices]);\n\n  // Function to connect two nodes\n  const connectNodes = useCallback((fromId: string, toId: string, color = '#0074d9', strokeWidth = 2) => {\n    const fromNode = getLayerNodeById(fromId) as HTMLElement | null;\n    const toNode = getLayerNodeById(toId) as HTMLElement | null;\n    \n    if (!fromNode || !toNode) {\n      console.warn(`Cannot connect nodes: ${fromId} or ${toId} not found`);\n      return null;\n    }\n    \n    const fromCenter = getNodeCenter(fromNode);\n    const toCenter = getNodeCenter(toNode);\n    \n    // Check if centers were calculated successfully\n    if (!fromCenter || !toCenter) {\n      console.warn(`Cannot calculate centers for nodes: ${fromId} -> ${toId}`);\n      return null;\n    }\n    \n    // Calculate control point for a curved arrow\n    const midX = (fromCenter.x + toCenter.x) / 2;\n    const midY = (fromCenter.y + toCenter.y) / 2;\n    \n    // Calculate the center of the wheel and distance from it\n    const wheelCenterX = 200;\n    const wheelCenterY = 200;\n    const distanceFromCenter = Math.sqrt(\n      Math.pow(midX - wheelCenterX, 2) + Math.pow(midY - wheelCenterY, 2)\n    );\n    \n    // Create control point that curves away from the center\n    const curveFactor = 0.3; // Adjust this to control curve intensity\n    const curveDirection = distanceFromCenter < 100 ? 1 : -1; // Curve outward if close to center, inward if far\n    \n    // Calculate perpendicular vector for the curve\n    const dx = toCenter.x - fromCenter.x;\n    const dy = toCenter.y - fromCenter.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    \n    if (length === 0) return null; // Same point\n    \n    // Perpendicular vector (rotated 90 degrees)\n    const perpX = -dy / length;\n    const perpY = dx / length;\n    \n    // Control point offset from midpoint\n    const curveOffset = length * curveFactor * curveDirection;\n    const controlX = midX + perpX * curveOffset;\n    const controlY = midY + perpY * curveOffset;\n    \n    // Create curved arrow path using quadratic Bezier curve\n    const arrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    const pathD = `M ${fromCenter.x},${fromCenter.y} Q ${controlX},${controlY} ${toCenter.x},${toCenter.y}`;\n    \n    arrow.setAttribute('d', pathD);\n    arrow.setAttribute('stroke', color);\n    arrow.setAttribute('stroke-width', strokeWidth.toString());\n    arrow.setAttribute('fill', 'none');\n    arrow.setAttribute('stroke-dasharray', '4 3'); // Dotted line pattern\n    arrow.setAttribute('stroke-linecap', 'round'); // Rounded line caps for better dotted appearance\n    \n    // Select appropriate arrow marker based on color\n    let markerUrl = 'url(#arrowhead)'; // default blue\n    if (color === '#FF6B35') markerUrl = 'url(#arrowhead-orange)';\n    else if (color === '#2196F3') markerUrl = 'url(#arrowhead-blue)';\n    else if (color === '#9C27B0') markerUrl = 'url(#arrowhead-purple)';\n    else if (color === '#4CAF50') markerUrl = 'url(#arrowhead-green)';\n    \n    arrow.setAttribute('marker-end', markerUrl);\n    arrow.classList.add('node-connection');\n    \n    // Add to SVG\n    recordRef.current?.appendChild(arrow);\n    \n    return arrow;\n  }, [getLayerNodeById, getNodeCenter, recordRef]);\n\n  // Function to toggle arrow visibility\n  const toggleArrows = useCallback(() => {\n    setShowArrows(!showArrows);\n    \n    // If hiding arrows, remove all existing connections immediately\n    if (showArrows) {\n      const existingConnections = document.querySelectorAll('.demo-connection, .node-connection');\n      existingConnections.forEach(conn => conn.remove());\n    }\n  }, [showArrows]);\n\n  // Demo function to create sample arrow connections\n  const createDemoConnections = useCallback(() => {\n    // Give the DOM a moment to render the nodes\n    setTimeout(() => {\n      if (!title.includes(\"Node System Demo\")) return; // Only for demo wheel\n      \n      // Clear any existing demo connections\n      const existingConnections = document.querySelectorAll('.demo-connection');\n      existingConnections.forEach(conn => conn.remove());\n      \n      // Don't create arrows if they should be hidden\n      if (!showArrows) return;\n      \n      console.log('Creating demo arrow connections...');\n      console.log('Current dynamicSlices:', dynamicSlices);\n      \n      // Get all available nodes first\n      const allNodes = getAllLayerNodes();\n      console.log('Available nodes:', Array.from(allNodes).map(n => ({\n        id: n.getAttribute('data-node-id'),\n        sliceId: n.getAttribute('data-slice-id'),\n        layerType: n.getAttribute('data-layer-type'),\n        layerIndex: n.getAttribute('data-layer-index')\n      })));\n      \n      if (allNodes.length === 0) {\n        console.warn('No layer nodes found for demo connections');\n        return;\n      }\n      \n      // If we have stored demo connections, recreate them\n      if (demoConnections.length > 0) {\n        console.log('Recreating stored demo connections:', demoConnections);\n        demoConnections.forEach(conn => {\n          const arrow = connectNodes(conn.fromId, conn.toId, conn.color, conn.strokeWidth);\n          if (arrow) {\n            arrow.classList.add('demo-connection');\n            arrow.setAttribute('data-demo-label', conn.label);\n            console.log(`Recreated connection: ${conn.label}`);\n          } else {\n            console.warn(`Failed to recreate connection: ${conn.label}`);\n          }\n        });\n        return;\n      }\n      \n      // Create initial demo connections and store them\n      const newDemoConnections: DemoConnection[] = [];\n      const nodeArray = Array.from(allNodes);\n      \n      // Example 1: Connect first green layer to first pink layer if they exist\n      const greenNodes = nodeArray.filter(n => n.getAttribute('data-layer-type') === 'green');\n      const pinkNodes = nodeArray.filter(n => n.getAttribute('data-layer-type') === 'pink');\n      \n      console.log('Green nodes found:', greenNodes.length);\n      console.log('Pink nodes found:', pinkNodes.length);\n      \n      if (greenNodes.length > 0 && pinkNodes.length > 0) {\n        const fromId = greenNodes[0].getAttribute('data-node-id')!;\n        const toId = pinkNodes[0].getAttribute('data-node-id')!;\n        console.log('Attempting to connect:', fromId, 'to', toId);\n        const connection1 = connectNodes(fromId, toId, '#FF6B35', 3);\n        if (connection1) {\n          connection1.classList.add('demo-connection');\n          connection1.setAttribute('data-demo-label', 'Green ‚Üí Pink Layer');\n          newDemoConnections.push({ fromId, toId, color: '#FF6B35', strokeWidth: 3, label: 'Green ‚Üí Pink Layer' });\n          console.log('Successfully created connection 1');\n        } else {\n          console.warn('Failed to create connection 1');\n        }\n      }\n      \n      // Example 2: Connect white layers if multiple exist\n      const whiteNodes = nodeArray.filter(n => n.getAttribute('data-layer-type') === 'white');\n      console.log('White nodes found:', whiteNodes.length);\n      \n      if (whiteNodes.length >= 2) {\n        const fromId = whiteNodes[0].getAttribute('data-node-id')!;\n        const toId = whiteNodes[1].getAttribute('data-node-id')!;\n        console.log('Attempting to connect white nodes:', fromId, 'to', toId);\n        const connection2 = connectNodes(fromId, toId, '#2196F3', 2);\n        if (connection2) {\n          connection2.classList.add('demo-connection');\n          connection2.setAttribute('data-demo-label', 'White ‚Üí White Cross-Connection');\n          newDemoConnections.push({ fromId, toId, color: '#2196F3', strokeWidth: 2, label: 'White ‚Üí White Cross-Connection' });\n          console.log('Successfully created connection 2');\n        } else {\n          console.warn('Failed to create connection 2');\n        }\n      }\n      \n      // Example 3: Connect thesis to antithesis if both exist\n      const thesisNodes = nodeArray.filter(n => n.getAttribute('data-slice-type') === 'thesis');\n      const antithesisNodes = nodeArray.filter(n => n.getAttribute('data-slice-type') === 'antithesis');\n      \n      console.log('Thesis nodes found:', thesisNodes.length);\n      console.log('Antithesis nodes found:', antithesisNodes.length);\n      \n      if (thesisNodes.length > 0 && antithesisNodes.length > 0) {\n        // Connect pink layer of thesis to green layer of antithesis\n        const thesisPink = thesisNodes.find(n => n.getAttribute('data-layer-type') === 'pink');\n        const antithesisGreen = antithesisNodes.find(n => n.getAttribute('data-layer-type') === 'green');\n        \n        if (thesisPink && antithesisGreen) {\n          const fromId = thesisPink.getAttribute('data-node-id')!;\n          const toId = antithesisGreen.getAttribute('data-node-id')!;\n          console.log('Attempting to connect thesis pink to antithesis green:', fromId, 'to', toId);\n          const connection3 = connectNodes(fromId, toId, '#9C27B0', 2);\n          if (connection3) {\n            connection3.classList.add('demo-connection');\n            connection3.setAttribute('data-demo-label', 'Thesis Pink ‚Üí Antithesis Green');\n            newDemoConnections.push({ fromId, toId, color: '#9C27B0', strokeWidth: 2, label: 'Thesis Pink ‚Üí Antithesis Green' });\n            console.log('Successfully created connection 3');\n          } else {\n            console.warn('Failed to create connection 3');\n          }\n        }\n      }\n      \n      // Store the demo connections for recreation later\n      setDemoConnections(newDemoConnections);\n      \n      console.log('Demo connections creation completed');\n      \n      // Log some example node information\n      if (nodeArray.length > 0) {\n        const sampleNode = nodeArray[0] as HTMLElement;\n        console.log('Sample node info:', getLayerNodeInfo(sampleNode));\n        console.log('Sample node center:', getNodeCenter(sampleNode));\n      }\n      \n    }, 2000); // Wait even longer for rendering\n  }, [\n    title, \n    showArrows, \n    dynamicSlices, \n    demoConnections, \n    getAllLayerNodes, \n    connectNodes, \n    getLayerNodeInfo, \n    getNodeCenter\n  ]);\n\n  // Create demo connections when component mounts or when slices change\n  useEffect(() => {\n    createDemoConnections();\n  }, [createDemoConnections]);\n\n  // NEW: Slice layer mapping functions\n  const parseSliceLayerCode = useCallback((code: SliceLayerCode): SliceLayerMapping | null => {\n    // Examples: \"T1\" -> Thesis pair 1, green layer\n    //          \"T1+\" -> Thesis pair 1, pink layer  \n    //          \"T1-\" -> Thesis pair 1, white layer\n    //          \"A2\" -> Antithesis pair 2, green layer\n    //          \"A2+\" -> Antithesis pair 2, pink layer\n    //          \"A2-\" -> Antithesis pair 2, white layer\n    \n    const match = code.match(/^([TA])(\\d+)([+\\-]?)$/);\n    if (!match) {\n      console.warn(`Invalid slice layer code: ${code}`);\n      return null;\n    }\n    \n    const [, typeChar, pairNum, modifier] = match;\n    const sliceType: SliceType = typeChar === 'T' ? 'thesis' : 'antithesis';\n    const pairIndex = parseInt(pairNum) - 1; // Convert 1-based to 0-based indexing\n    \n    // Determine layer type and index based on modifier\n    let layerType: LayerType;\n    let layerIndex: number;\n    \n    if (modifier === '+') {\n      layerType = 'green';\n      layerIndex = 0;\n    } else if (modifier === '-') {\n      layerType = 'pink';\n      layerIndex = 2;\n    } else {\n      layerType = 'white';\n      layerIndex = 1;\n    }\n    \n    return {\n      pairIndex,\n      sliceType,\n      layerType,\n      layerIndex\n    };\n  }, []);\n\n  const getNodeIdFromSliceLayerCode = useCallback((code: SliceLayerCode): string | null => {\n    const mapping = parseSliceLayerCode(code);\n    if (!mapping) return null;\n    \n    // Find the slice that matches the pair and type\n    const slice = dynamicSlices.find(s => \n      s.pair === mapping.pairIndex && s.type === mapping.sliceType\n    );\n    \n    if (!slice) {\n      console.warn(`No slice found for pair ${mapping.pairIndex} type ${mapping.sliceType}`);\n      return null;\n    }\n    \n    // Construct the node ID based on the slice ID and layer index\n    // Format: slice-{originalIndex}-layer-{layerIndex} or {sliceId}-layer-{layerIndex}\n    const baseId = slice.originalIndex !== undefined ? `slice-${slice.originalIndex}` : slice.id;\n    return `${baseId}-layer-${mapping.layerIndex}`;\n  }, [dynamicSlices, parseSliceLayerCode]);\n\n  const connectNodesBySliceLayerCode = useCallback((\n    fromCode: SliceLayerCode, \n    toCode: SliceLayerCode, \n    color = '#0074d9', \n    strokeWidth = 2\n  ) => {\n    const fromNodeId = getNodeIdFromSliceLayerCode(fromCode);\n    const toNodeId = getNodeIdFromSliceLayerCode(toCode);\n    \n    if (!fromNodeId || !toNodeId) {\n      console.warn(`Cannot create connection ${fromCode} -> ${toCode}: node IDs not found`);\n      console.warn(`From: ${fromCode} -> ${fromNodeId}, To: ${toCode} -> ${toNodeId}`);\n      return null;\n    }\n    \n    console.log(`Creating connection: ${fromCode} (${fromNodeId}) -> ${toCode} (${toNodeId})`);\n    return connectNodes(fromNodeId, toNodeId, color, strokeWidth);\n  }, [getNodeIdFromSliceLayerCode, connectNodes]);\n\n  const getAvailableSliceLayerCodes = useCallback((): SliceLayerCode[] => {\n    const codes: SliceLayerCode[] = [];\n    \n    // Group slices by pair to ensure we have complete pairs\n    const pairGroups: { [pairIndex: number]: { thesis?: DynamicSlice, antithesis?: DynamicSlice } } = {};\n    \n    dynamicSlices.forEach(slice => {\n      if (!pairGroups[slice.pair]) {\n        pairGroups[slice.pair] = {};\n      }\n      pairGroups[slice.pair][slice.type] = slice;\n    });\n    \n    // Generate codes for each complete pair\n    Object.entries(pairGroups).forEach(([pairIndexStr, pair]) => {\n      const pairIndex = parseInt(pairIndexStr);\n      const pairNumber = pairIndex + 1; // Convert to 1-based for codes\n      \n      if (pair.thesis) {\n        codes.push(`T${pairNumber}`);   // White layer\n        codes.push(`T${pairNumber}+`);  // Green layer\n        codes.push(`T${pairNumber}-`);  // Pink layer\n      }\n      \n      if (pair.antithesis) {\n        codes.push(`A${pairNumber}`);   // White layer\n        codes.push(`A${pairNumber}+`);  // Green layer\n        codes.push(`A${pairNumber}-`);  // Pink layer\n      }\n    });\n    \n    return codes.sort();\n  }, [dynamicSlices]);\n\n  // NEW: DOT Script parsing and execution\n  const parseDotScript = useCallback((dotScript: string): DotScriptParseResult => {\n    const edges: DotEdge[] = [];\n    const errors: string[] = [];\n    \n    // Remove comments and clean up the script\n    const cleanScript = dotScript\n      .split('\\n')\n      .map(line => line.replace(/\\/\\/.*$/, '').trim()) // Remove // comments\n      .filter(line => line.length > 0) // Remove empty lines\n      .join('\\n');\n    \n    // Regex to match edge definitions: nodeA -> nodeB [attributes]\n    const edgeRegex = /([A-Z]\\d+[+\\-]?)\\s*->\\s*([A-Z]\\d+[+\\-]?)(?:\\s*\\[(.*?)\\])?/g;\n    \n    let match;\n    while ((match = edgeRegex.exec(cleanScript)) !== null) {\n      const [, fromNode, toNode, attributesStr] = match;\n      \n      // Validate node codes\n      const fromMapping = parseSliceLayerCode(fromNode);\n      const toMapping = parseSliceLayerCode(toNode);\n      \n      if (!fromMapping) {\n        errors.push(`Invalid from node: ${fromNode}`);\n        continue;\n      }\n      \n      if (!toMapping) {\n        errors.push(`Invalid to node: ${toNode}`);\n        continue;\n      }\n      \n      // Parse attributes\n      const attributes: DotEdgeAttributes = {};\n      if (attributesStr) {\n        // Parse attribute string: color=red, weight=3, label=\"my label\"\n        const attrRegex = /(\\w+)\\s*=\\s*([^,]+)/g;\n        let attrMatch;\n        while ((attrMatch = attrRegex.exec(attributesStr)) !== null) {\n          const [, key, value] = attrMatch;\n          const cleanValue = value.replace(/[\"']/g, '').trim();\n          \n          switch (key.toLowerCase()) {\n            case 'color':\n              attributes.color = cleanValue;\n              break;\n            case 'weight':\n            case 'strokewidth':\n              attributes.strokeWidth = parseInt(cleanValue) || 2;\n              break;\n            case 'label':\n              attributes.label = cleanValue;\n              break;\n            case 'style':\n              if (['solid', 'dashed', 'dotted'].includes(cleanValue)) {\n                attributes.style = cleanValue as 'solid' | 'dashed' | 'dotted';\n              }\n              break;\n            default:\n              console.warn(`Unknown attribute: ${key}`);\n          }\n        }\n      }\n      \n      edges.push({\n        from: fromNode,\n        to: toNode,\n        attributes\n      });\n    }\n    \n    return { edges, errors };\n  }, [parseSliceLayerCode]);\n  \n  const executeDotScript = useCallback((dotScript: string, clearExisting = true): { \n    success: boolean; \n    created: number; \n    errors: string[];\n  } => {\n    console.log('=== Executing DOT Script ===');\n    console.log('Script:', dotScript);\n    \n    // Parse the script\n    const parseResult = parseDotScript(dotScript);\n    \n    if (parseResult.errors.length > 0) {\n      console.error('Parse errors:', parseResult.errors);\n      return { success: false, created: 0, errors: parseResult.errors };\n    }\n    \n    // Clear existing script-generated connections if requested\n    if (clearExisting) {\n      const existingConnections = document.querySelectorAll('.dot-script-connection');\n      existingConnections.forEach(conn => conn.remove());\n    }\n    \n    const availableCodes = getAvailableSliceLayerCodes();\n    let createdCount = 0;\n    const executionErrors: string[] = [];\n    \n    // Execute each edge\n    parseResult.edges.forEach((edge, index) => {\n      // Check if nodes are available\n      if (!availableCodes.includes(edge.from)) {\n        executionErrors.push(`Node not available: ${edge.from}`);\n        return;\n      }\n      \n      if (!availableCodes.includes(edge.to)) {\n        executionErrors.push(`Node not available: ${edge.to}`);\n        return;\n      }\n      \n      // Set default color based on edge index if not specified\n      const color = edge.attributes.color || [\n        '#FF6B35', '#2196F3', '#9C27B0', '#4CAF50', '#FF9800', '#E91E63'\n      ][index % 6];\n      \n      const strokeWidth = edge.attributes.strokeWidth || 2;\n      \n      // Create the connection\n      const arrow = connectNodesBySliceLayerCode(edge.from, edge.to, color, strokeWidth);\n      \n      if (arrow) {\n        arrow.classList.add('dot-script-connection');\n        \n        // Apply style attributes\n        if (edge.attributes.style === 'dashed') {\n          arrow.setAttribute('stroke-dasharray', '8 4');\n        } else if (edge.attributes.style === 'dotted') {\n          arrow.setAttribute('stroke-dasharray', '2 3');\n        } else {\n          arrow.setAttribute('stroke-dasharray', '4 3'); // default dotted\n        }\n        \n        if (edge.attributes.label) {\n          arrow.setAttribute('data-dot-label', edge.attributes.label);\n        }\n        \n        createdCount++;\n        console.log(`‚úÖ Created edge: ${edge.from} -> ${edge.to}`, edge.attributes);\n      } else {\n        executionErrors.push(`Failed to create edge: ${edge.from} -> ${edge.to}`);\n      }\n    });\n    \n    console.log(`=== DOT Script Complete: ${createdCount} edges created ===`);\n    \n    return {\n      success: executionErrors.length === 0,\n      created: createdCount,\n      errors: executionErrors\n    };\n  }, [parseDotScript, getAvailableSliceLayerCodes, connectNodesBySliceLayerCode]);\n\n  // Demo function to show slice layer mapping in action\n  const createSliceLayerMappingDemo = useCallback(() => {\n    // Give the DOM a moment to render the nodes\n    setTimeout(() => {\n      console.log('=== Slice Layer Mapping Demo ===');\n      \n      const availableCodes = getAvailableSliceLayerCodes();\n      console.log('Available slice layer codes:', availableCodes);\n      \n      // Example connections using the new mapping system\n      const exampleConnections = [\n        { from: 'T1', to: 'A1+', color: '#FF6B35', label: 'T1 Green ‚Üí A1 Pink' },\n        { from: 'T1-', to: 'T2', color: '#2196F3', label: 'T1 White ‚Üí T2 Green' },\n        { from: 'A1', to: 'T2+', color: '#9C27B0', label: 'A1 Green ‚Üí T2 Pink' }\n      ];\n      \n      // Clear existing demo connections\n      const existingConnections = document.querySelectorAll('.slice-layer-demo-connection');\n      existingConnections.forEach(conn => conn.remove());\n      \n      // Create example connections\n      exampleConnections.forEach(conn => {\n        if (availableCodes.includes(conn.from) && availableCodes.includes(conn.to)) {\n          const arrow = connectNodesBySliceLayerCode(conn.from, conn.to, conn.color, 2);\n          if (arrow) {\n            arrow.classList.add('slice-layer-demo-connection');\n            arrow.setAttribute('data-demo-label', conn.label);\n            console.log(`‚úÖ Created: ${conn.label}`);\n          } else {\n            console.warn(`‚ùå Failed to create: ${conn.label}`);\n          }\n        } else {\n          console.warn(`‚ùå Skipped ${conn.label}: codes not available`);\n        }\n      });\n      \n      console.log('=== Demo Complete ===');\n    }, 1000);\n  }, [getAvailableSliceLayerCodes, connectNodesBySliceLayerCode]);\n  \n  // Demo function to show DOT script in action\n  const createDotScriptDemo = useCallback(() => {\n    setTimeout(() => {\n      const sampleDotScript = `\n        // Dialectical flow example\n        T1 -> A1+ [color=#FF6B35, label=\"thesis to antithesis\"]\n        T1- -> T2 [color=#2196F3, weight=3]\n        A1 -> T2+ [color=#9C27B0, style=dashed]\n        \n        // Cross connections\n        T2 -> A2- [color=#4CAF50]\n        A2 -> T1+ [color=#FF9800, style=dotted]\n      `;\n      \n      executeDotScript(sampleDotScript);\n    }, 1500);\n  }, [executeDotScript]);\n\n  // Expose helper functions for external use (if needed)\n  const nodeAPI = {\n    getAllLayerNodes,\n    getLayerNodeById,\n    getLayerNodesForPair,\n    getLayerNodesByType,\n    getLayerNodeInfo,\n    getNodeCenter,\n    connectNodes\n  };\n\n  return {\n    // State\n    showArrows,\n    demoConnections,\n    \n    // Functions\n    toggleArrows,\n    createDemoConnections,\n    \n    // Node API\n    nodeAPI,\n    \n    // NEW: Slice layer mapping API\n    sliceLayerAPI: {\n      parseSliceLayerCode,\n      getNodeIdFromSliceLayerCode,\n      connectNodesBySliceLayerCode,\n      getAvailableSliceLayerCodes,\n      createSliceLayerMappingDemo\n    },\n    \n    // NEW: DOT Script API\n    dotScriptAPI: {\n      parseDotScript,\n      executeDotScript,\n      createDotScriptDemo\n    }\n  };\n};\n\nexport type { \n  DemoConnection, \n  SliceLayerCode, \n  SliceLayerMapping, \n  LayerType, \n  SliceType,\n  DotEdgeAttributes,\n  DotEdge,\n  DotScriptParseResult\n}; ","import { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { defaultPairTexts } from '../../../utils/SliceGenerator';\nimport { SequenceWithLabels } from './useWheelSequence';\n\n// Type definitions\ninterface DynamicSlice {\n  id: string;\n  angle: number;\n  width: number;\n  label: string;\n  pair: number;\n  type: 'thesis' | 'antithesis';\n  focused?: boolean;\n  detailed?: boolean;\n  originalIndex?: number;\n  svgContent?: string;\n}\n\ninterface DetailedSlices {\n  [key: number]: {\n    thesis: string;\n    antithesis: string;\n  };\n}\n\ninterface PairTexts {\n  [key: number]: {\n    thesis: string[][];\n    antithesis: string[][];\n  };\n}\n\ninterface SliceClickData {\n  textX: number;\n  textY: number;\n  fontSize: number;\n  label: string;\n  pairIndex: number;\n  sliceType: 'thesis' | 'antithesis';\n  layers: Array<{\n    pathD: string;\n    fill: string;\n  }>;\n}\n\nexport const useWheelSlices = (\n  sequenceWithLabels: SequenceWithLabels[],\n  normalSliceAngle: number,\n  focusedSliceAngle: number,\n  unfocusedSliceAngle: number,\n  rotation: number,\n  setRotation: (rotation: number) => void,\n  pairTexts: PairTexts | null = null,\n  detailedSlices: DetailedSlices = {}\n) => {\n  const [focusedPair, setFocusedPair] = useState<number | null>(null);\n  const [dynamicSlices, setDynamicSlices] = useState<DynamicSlice[]>([]);\n\n  // Create slice layers (the expensive part) - memoized separately\n  const createSliceLayers = useCallback((sliceWidth: number) => {\n    const cx = 200, cy = 200, radius = 150;\n    const halfAngle = sliceWidth / 2;\n    \n    const toRadians = (deg: number): number => deg * Math.PI / 180;\n    \n    // Create layered rings like detailed slices\n    const layerColors = [\"#C6E5B3\", \"#FFFFFF\", \"#F9C6CC\"]; // green, white, pink\n    const layers = [];\n    \n    // Create three concentric ring layers at angle 0 (will be rotated later)\n    for (let layer = 0; layer < 3; layer++) {\n      const innerRadius = radius * (0.3 + 0.7 * layer / 3);\n      const outerRadius = radius * (0.3 + 0.7 * (layer + 1) / 3);\n      \n      const startAngleRad = toRadians(-halfAngle);\n      const endAngleRad = toRadians(halfAngle);\n      \n      const innerX1 = cx + innerRadius * Math.cos(startAngleRad);\n      const innerY1 = cy + innerRadius * Math.sin(startAngleRad);\n      const innerX2 = cx + innerRadius * Math.cos(endAngleRad);\n      const innerY2 = cy + innerRadius * Math.sin(endAngleRad);\n      \n      const outerX1 = cx + outerRadius * Math.cos(startAngleRad);\n      const outerY1 = cy + outerRadius * Math.sin(startAngleRad);\n      const outerX2 = cx + outerRadius * Math.cos(endAngleRad);\n      const outerY2 = cy + outerRadius * Math.sin(endAngleRad);\n      \n      const largeArc = sliceWidth > 180 ? 1 : 0;\n      \n      const pathD = `M ${outerX1},${outerY1} \n                     A ${outerRadius},${outerRadius} 0 ${largeArc},1 ${outerX2},${outerY2} \n                     L ${innerX2},${innerY2} \n                     A ${innerRadius},${innerRadius} 0 ${largeArc},0 ${innerX1},${innerY1} Z`;\n      \n      layers.push({\n        pathD,\n        fill: layerColors[layer]\n      });\n    }\n    \n    return layers;\n  }, []);\n\n  // Create clickable slice function (matches the JavaScript createClickableSlice)\n  const createClickableSlice = useCallback((\n    centerAngle: number, \n    sliceWidth: number, \n    label: string, \n    pairIndex: number, \n    sliceType: 'thesis' | 'antithesis'\n  ): SliceClickData => {\n    console.log(`üî• EXPENSIVE: createClickableSlice called for ${label} (angle: ${centerAngle}¬∞)`);\n    const cx = 200, cy = 200, radius = 150;\n    \n    // Get cached layers or create new ones\n    const layers = createSliceLayers(sliceWidth);\n    \n    // Calculate text position (center of the layered slice)\n    const textRadius = (radius * 0.3 + radius) / 2;\n    const textAngle = centerAngle * Math.PI / 180;\n    const textX = cx + textRadius * Math.cos(textAngle);\n    const textY = cy + textRadius * Math.sin(textAngle);\n    \n    // Dynamic font sizing\n    const fontSize = sliceWidth >= normalSliceAngle ? Math.min(20, sliceWidth / 3) : Math.min(14, sliceWidth / 2);\n    \n    return {\n      layers,\n      textX,\n      textY,\n      fontSize,\n      label,\n      pairIndex,\n      sliceType\n    };\n  }, [normalSliceAngle, createSliceLayers]);\n\n  // Persistent cache for slice layers (the expensive computation)\n  const sliceLayersCacheRef = useRef(new Map<number, any>());\n\n  // Memoize slice layers\n  const memoizedCreateSliceLayers = useCallback((sliceWidth: number) => {\n    const cache = sliceLayersCacheRef.current;\n    \n    if (cache.has(sliceWidth)) {\n      return cache.get(sliceWidth);\n    }\n    \n    console.log(`üî• EXPENSIVE: Computing slice layers for width ${sliceWidth}¬∞`);\n    const layers = createSliceLayers(sliceWidth);\n    cache.set(sliceWidth, layers);\n    return layers;\n  }, [createSliceLayers]);\n\n  // Memoize slice data with intelligent caching\n  const memoizedSliceData = useMemo(() => {\n    console.log(`üöÄ MEMOIZATION: Processing ${dynamicSlices.length} slices`);\n    const sliceDataMap = new Map();\n    let layerCacheHits = 0;\n    let layerCacheMisses = 0;\n    \n    dynamicSlices.forEach(slice => {\n      if (!slice.detailed) {\n        // Get cached layers or create new ones\n        const layersWereCached = sliceLayersCacheRef.current.has(slice.width);\n        const layers = memoizedCreateSliceLayers(slice.width);\n        \n        if (layersWereCached) {\n          layerCacheHits++;\n        } else {\n          layerCacheMisses++;\n        }\n        \n        // Calculate position-dependent properties\n        const cx = 200, cy = 200, radius = 150;\n        const textRadius = (radius * 0.3 + radius) / 2;\n        const textAngle = slice.angle * Math.PI / 180;\n        const textX = cx + textRadius * Math.cos(textAngle);\n        const textY = cy + textRadius * Math.sin(textAngle);\n        \n        // Dynamic font sizing\n        const fontSize = slice.width >= normalSliceAngle ? Math.min(20, slice.width / 3) : Math.min(14, slice.width / 2);\n        \n        sliceDataMap.set(slice.id, {\n          layers,\n          textX,\n          textY,\n          fontSize,\n          label: slice.label,\n          pairIndex: slice.pair,\n          sliceType: slice.type\n        });\n      }\n    });\n    \n    console.log(`‚úÖ MEMOIZATION: Layer cache hits: ${layerCacheHits}, misses: ${layerCacheMisses}, total layer cache: ${sliceLayersCacheRef.current.size}`);\n    return sliceDataMap;\n  }, [dynamicSlices, memoizedCreateSliceLayers, normalSliceAngle]);\n\n  // Create equal slices function (matches the JavaScript createEqualSlices)\n  const createEqualSlices = useCallback((): void => {\n    const slices: DynamicSlice[] = [];\n    sequenceWithLabels.forEach((slice, index) => {\n      const angle = index * normalSliceAngle;\n      slices.push({\n        id: `slice-${index}`,\n        angle,\n        width: normalSliceAngle,\n        label: slice.label,\n        pair: slice.pair,\n        type: slice.type\n      });\n    });\n    setDynamicSlices(slices);\n  }, [sequenceWithLabels, normalSliceAngle]);\n\n  // Focus on pair function (simplified version of the JavaScript focusOnPair)\n  const focusOnPair = useCallback((\n    pairIndex: number, \n    clickedSliceType: 'thesis' | 'antithesis' | null = null, \n    targetVisualAngle: number | null = null\n  ): void => {\n    setFocusedPair(pairIndex);\n    \n    // Find the thesis index - needed throughout the function\n    const focusedThesisIndex = sequenceWithLabels.findIndex(s => s.pair === pairIndex && s.type === 'thesis');\n    \n    // Calculate rotation to position the clicked slice at the same visual angle\n    if (clickedSliceType && targetVisualAngle !== null) {\n      // Determine where the clicked slice will be positioned in the focused layout  \n      let focusedPosition;\n      if (clickedSliceType === 'thesis') {\n        focusedPosition = 0; // Thesis goes to 0¬∞ in focused layout\n      } else {\n        focusedPosition = 180; // Antithesis goes to 180¬∞ in focused layout\n      }\n      \n      // We want: focusedPosition + newRotation = targetVisualAngle\n      // Therefore: newRotation = targetVisualAngle - focusedPosition\n      const newRotation = (targetVisualAngle - focusedPosition + 360) % 360;\n      console.log(`Setting rotation to ${newRotation}¬∞ to keep ${clickedSliceType} at visual angle ${targetVisualAngle}¬∞`);\n      setRotation(newRotation);\n    } else {\n      // Fallback to old behavior\n      const originalThesisAngle = focusedThesisIndex * normalSliceAngle;\n      setRotation(rotation + originalThesisAngle);\n    }\n    \n    // Calculate gap positions for unfocused slices\n    const halfFocused = focusedSliceAngle / 2;\n    const gap1Start = halfFocused;\n    const gap1End = 180 - halfFocused;\n    const gap1Size = gap1End - gap1Start;\n    \n    const gap2Start = 180 + halfFocused;\n    const gap2End = 360 - halfFocused;\n    const gap2Size = gap2End - gap2Start;\n    \n    const numUnfocused = 2 * sequenceWithLabels.length / 2 - 2;\n    const slicesPerGap = Math.floor(numUnfocused / 2);\n    const extraSlices = numUnfocused % 2;\n    \n    const positions = [];\n    \n    // Distribute slices in gap 1\n    for (let i = 0; i < slicesPerGap + extraSlices; i++) {\n      const position = gap1Start + (gap1Size / (slicesPerGap + extraSlices)) * (i + 0.5);\n      positions.push(position);\n    }\n    \n    // Distribute slices in gap 2\n    for (let i = 0; i < slicesPerGap; i++) {\n      const position = gap2Start + (gap2Size / slicesPerGap) * (i + 0.5);\n      positions.push(position);\n    }\n    \n    // Create new slice configuration\n    const newSlices: DynamicSlice[] = [];\n    \n    // Find the antithesis index (needed for unfocused slices logic)\n    const focusedAntithesisIndex = sequenceWithLabels.findIndex(s => s.pair === pairIndex && s.type === 'antithesis');\n    \n    // Always generate detailed slices when focusing (using defaultPairTexts)\n    const usePairTexts = pairTexts || defaultPairTexts;\n    \n    // Only use provided detailed slices if they exist for this specific pair\n    const hasProvidedDetailedSlices = detailedSlices[pairIndex] && \n                                     detailedSlices[pairIndex].thesis && \n                                     detailedSlices[pairIndex].antithesis;\n    \n    if (hasProvidedDetailedSlices) {\n      // Use provided detailed slices (SVG strings from prop)\n      console.log('Using provided detailed slices for pair', pairIndex);\n      // Add logic here if needed for provided detailed slices\n    } else if (usePairTexts[pairIndex as keyof typeof usePairTexts]) {\n      // Generate detailed slices using defaultPairTexts and React components\n      console.log('Generating detailed slices for pair', pairIndex, 'using defaultPairTexts');\n      \n      // Find the original slice IDs to preserve identity\n      const originalThesisSlice = sequenceWithLabels[focusedThesisIndex];\n      const originalAntithesisSlice = sequenceWithLabels[focusedAntithesisIndex];\n      const originalThesisSliceId = `slice-${focusedThesisIndex}`;\n      const originalAntithesisSliceId = `slice-${focusedAntithesisIndex}`;\n      \n      // Use detailed slices at 0¬∞ and 180¬∞ to match original HTML pattern\n      newSlices.push({\n        id: originalThesisSliceId, // Preserve original ID\n        angle: 0,\n        width: focusedSliceAngle,\n        label: originalThesisSlice.label,\n        pair: pairIndex,\n        type: 'thesis' as const,\n        focused: true,\n        detailed: true,\n        originalIndex: focusedThesisIndex, // Track original position\n        // No more svgContent - we'll use React component directly\n      });\n      \n      newSlices.push({\n        id: originalAntithesisSliceId, // Preserve original ID\n        angle: 180,\n        width: focusedSliceAngle,\n        label: originalAntithesisSlice.label,\n        pair: pairIndex,\n        type: 'antithesis' as const,\n        focused: true,\n        detailed: true,\n        originalIndex: focusedAntithesisIndex, // Track original position\n        // No more svgContent - we'll use React component directly\n      });\n      \n      console.log('Created detailed slices for pair', pairIndex, ':', newSlices.filter(s => s.detailed));\n    } else {\n      // Fallback to simple focused slices if no text data available\n      console.log('No text data available for pair', pairIndex, ', using simple slices');\n      sequenceWithLabels.forEach((slice, index) => {\n        if (slice.pair === pairIndex) {\n          const originalSliceId = `slice-${index}`;\n          if (slice.type === 'thesis') {\n            newSlices.push({\n              id: originalSliceId, // Preserve original ID\n              angle: 0,\n              width: focusedSliceAngle,\n              label: slice.label,\n              pair: slice.pair,\n              type: slice.type as 'thesis',\n              focused: true,\n              originalIndex: index\n            });\n          } else {\n            newSlices.push({\n              id: originalSliceId, // Preserve original ID\n              angle: 180,\n              width: focusedSliceAngle,\n              label: slice.label,\n              pair: slice.pair,\n              type: slice.type as 'antithesis',\n              focused: true,\n              originalIndex: index\n            });\n          }\n        }\n      });\n    }\n    \n    // Add unfocused slices maintaining sequence order (like HTML version)\n    let currentGapIndex = 0;\n    \n    // Walk around the circle starting from the focused thesis\n    for (let offset = 1; offset < sequenceWithLabels.length && currentGapIndex < positions.length; offset++) {\n      const checkIndex = (focusedThesisIndex + offset) % sequenceWithLabels.length;\n      \n      // Skip the focused antithesis\n      if (checkIndex === focusedAntithesisIndex) continue;\n      \n      // Place this unfocused slice maintaining original sequence order\n      const slice = sequenceWithLabels[checkIndex];\n      const position = positions[currentGapIndex];\n      const originalSliceId = `slice-${checkIndex}`; // Preserve original ID\n      \n      newSlices.push({\n        id: originalSliceId, // Use original slice ID\n        angle: position,\n        width: unfocusedSliceAngle,\n        label: slice.label,\n        pair: slice.pair,\n        type: slice.type as 'thesis' | 'antithesis',\n        focused: false,\n        originalIndex: checkIndex // Track original position\n      });\n      \n      currentGapIndex++;\n    }\n    \n    console.log('Final dynamic slices:', newSlices);\n    setDynamicSlices(newSlices);\n  }, [\n    sequenceWithLabels, \n    focusedSliceAngle, \n    unfocusedSliceAngle, \n    normalSliceAngle, \n    rotation, \n    setRotation, \n    pairTexts, \n    detailedSlices\n  ]);\n\n  // Handle slice click (matches the JavaScript click handlers)\n  const handleSliceClick = useCallback((pairIndex: number): void => {\n    console.log(`Clicked pair ${pairIndex}`);\n    if (focusedPair === pairIndex) {\n      // Unfocus: find the clicked focused slice and preserve its visual position\n      const clickedFocusedSlice = dynamicSlices.find(s => s.pair === pairIndex);\n      if (clickedFocusedSlice) {\n        // Current visual angle where the focused slice appears\n        const currentVisualAngle = (clickedFocusedSlice.angle + rotation) % 360;\n        console.log(`Unfocusing slice at visual angle: ${currentVisualAngle}¬∞`);\n        \n        // Reset to equal slices first\n        setFocusedPair(null);\n        createEqualSlices();\n        \n        // Calculate where this slice will be in the equal layout\n        const sliceInEqualLayout = sequenceWithLabels.find(s => s.pair === pairIndex && s.type === clickedFocusedSlice.type);\n        if (sliceInEqualLayout) {\n          const sliceIndexInEqual = sequenceWithLabels.indexOf(sliceInEqualLayout);\n          const equalLayoutAngle = sliceIndexInEqual * normalSliceAngle;\n          \n          // Calculate rotation to put the equal slice at the same visual angle\n          // We want: equalLayoutAngle + newRotation = currentVisualAngle\n          const newRotation = (currentVisualAngle - equalLayoutAngle + 360) % 360;\n          console.log(`Setting rotation to ${newRotation}¬∞ to keep slice at visual angle ${currentVisualAngle}¬∞`);\n          setRotation(newRotation);\n        }\n      } else {\n        // Fallback to simple unfocus\n        setFocusedPair(null);\n        createEqualSlices();\n      }\n    } else {\n      // Find any slice from this pair to get its current visual position\n      const pairSlice = dynamicSlices.find(s => s.pair === pairIndex);\n      if (pairSlice) {\n        // Current visual angle where the slice appears (this is what we want to preserve)\n        const clickedVisualAngle = (pairSlice.angle + rotation) % 360;\n        console.log(`Slice clicked at visual angle: ${clickedVisualAngle}¬∞`);\n        \n        // Focus on clicked pair, positioning it at the same visual angle\n        focusOnPair(pairIndex, pairSlice.type, clickedVisualAngle);\n      } else {\n        // Fallback to old behavior if slice not found\n        focusOnPair(pairIndex);\n      }\n    }\n  }, [focusedPair, dynamicSlices, rotation, createEqualSlices, sequenceWithLabels, normalSliceAngle, setRotation, focusOnPair]);\n\n  // Touch handlers for slice clicks\n  const handleSliceTouchStart = useCallback((e: React.TouchEvent<SVGElement>, pairIndex: number): void => {\n    e.stopPropagation();\n    const touch = e.touches[0];\n    const touchStartTime = Date.now();\n    const touchStartPos = { x: touch.clientX, y: touch.clientY };\n    \n    // Store touch data on the target element for tracking\n    (e.target as any)._touchData = { startTime: touchStartTime, startPos: touchStartPos, pairIndex };\n  }, []);\n\n  const handleSliceTouchEnd = useCallback((e: React.TouchEvent<SVGElement>, pairIndex: number): void => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (!(e.target as any)._touchData) return;\n    \n    const touchDuration = Date.now() - (e.target as any)._touchData.startTime;\n    const touch = e.changedTouches[0];\n    const touchEndPos = { x: touch.clientX, y: touch.clientY };\n    \n    const distance = Math.sqrt(\n      Math.pow(touchEndPos.x - (e.target as any)._touchData.startPos.x, 2) + \n      Math.pow(touchEndPos.y - (e.target as any)._touchData.startPos.y, 2)\n    );\n\n    // If it's a quick tap with minimal movement, treat as click\n    if (touchDuration < 300 && distance < 20) {\n      console.log(`Touch clicked ${(e.target as any)._touchData.pairIndex}`);\n      handleSliceClick((e.target as any)._touchData.pairIndex);\n    }\n    \n    delete (e.target as any)._touchData;\n  }, [handleSliceClick]);\n\n  // Initialize with equal slices\n  useEffect(() => {\n    createEqualSlices();\n  }, [createEqualSlices]);\n\n  // Reset focused pair when wheel data changes (different wheel selected)\n  useEffect(() => {\n    setFocusedPair(null);\n  }, [sequenceWithLabels, pairTexts]);\n\n  const reset = useCallback(() => {\n    setFocusedPair(null);\n    createEqualSlices();\n  }, [createEqualSlices]);\n\n  return {\n    // State\n    focusedPair,\n    dynamicSlices,\n    memoizedSliceData,\n    \n    // Functions\n    handleSliceClick,\n    handleSliceTouchStart,\n    handleSliceTouchEnd,\n    createEqualSlices,\n    focusOnPair,\n    reset\n  };\n};\n\nexport type { DynamicSlice, DetailedSlices, PairTexts, SliceClickData }; "],"names":["DialecticalWheel","_ref","dialecticalData","_ref$arrowConnections","arrowConnections","_ref$width","width","_ref$height","height","onChartReady","chartRef","useRef","_useState","useState","_useState2","_slicedToArray","module","setModule","_useState3","_useState4","chart","setChart","_useState5","_useState6","runtime","setRuntime","useEffect","console","log","Runtime","main","notebook","name","_Inspector","_class","node","_classCallCheck","_callSuper","_inherits","_createClass","key","value","fulfilled","_superPropGet","Inspector","current","undefined","dispose","redefine","error","warn","_jsxs","className","_jsx","ref","style","concat","borderRadius","background","marginTop","padding","fontSize","color","children","Object","keys","length","join","ExploreComponent","_currentApiCycle$rawS","userMessage","wisdomUnits","currentApiCycle","onEdit","currentUnitIndex","setCurrentUnitIndex","currentUnit","handlePrevious","prev","handleNext","getComponentCards","unit","_unit$t","_unit$tPlus","_unit$tMinus","_unit$a","_unit$aPlus","_unit$aMinus","cards","t","statement","push","id","text","label","textColor","type","tPlus","tMinus","a","aPlus","aMinus","React","createElement","textAlign","marginBottom","margin","lineHeight","componentCards","maxWidth","backgroundColor","minHeight","display","alignItems","justifyContent","border","fontWeight","flex","onClick","cursor","flexDirection","gap","filter","card","map","marginLeft","_","index","transition","rawSequence","probability","toFixed","parseArrowConnections","dotScript","connections","lines","split","_iterator","_createForOfIteratorHelper","_step","s","n","done","line","trim","match","_match","from","to","parseUnit","endsWith","unitId","slice","ringType","fromParsed","toParsed","fromRing","toRing","err","e","f","ArrowControls","setArrowConnections","arrowsVisible","setArrowsVisibleState","arrowStepMode","setArrowStepMode","currentArrowStep","setCurrentArrowStep","_useState7","_useState8","parsedArrowConnections","setParsedArrowConnections","_useState9","_useState0","currentArrowInfo","setCurrentArrowInfo","parsed","updateArrowStepUI","totalArrows","getArrowColor","conn","fromIsThesis","startsWith","toIsThesis","drawArrowsUpToStep","step","clearArrows","drawArrow","connectionsToShow","forEach","delay","drawNextArrow","drawAllCurrentArrows","handleStartArrowStepMode","handleStepForward","success","handleStepBackward","newStep","handleShowAllArrows","handleToggleArrows","handleRedrawArrows","handleUpdateConnections","getArrowCounterText","flexWrap","disabled","minWidth","fontStyle","htmlFor","onChange","target","fontFamily","resize","StepControls","isActive","currentStep","totalSteps","stepMode","setStepModeState","rotation","setRotationState","updateStepInfo","getCurrentStepInfo","info","total","handleStartStepMode","startStepMode","stepForward","handleResetToFull","resetToFull","handleRotationChange","degrees","parseInt","radians","Math","PI","rotate","handleRotationReset","getCounterText","min","max","WHEEL_CONFIG","DIMENSIONS","CENTER_X","CENTER_Y","RADIUS","CENTER_CIRCLE_RADIUS","SLICE_INNER_RADIUS_RATIO","SLICE_OUTER_RADIUS_RATIO","COLORS","LAYER_COLORS","BOUNDARY_LINES","TYPOGRAPHY","SLICE_LAYERS","SLICES","DEFAULT_ANGLE","STROKES","BOUNDARY_WIDTH","wrapTextForArc","arcLength","avgCharWidth","maxCharsPerLine","floor","words","currentLine","word","testLine","substring","calculateOptimalFontSize","maxFontSize","minFontSize","arguments","longestLine","apply","_toConsumableArray","toRadians","deg","SliceAtAngle","sliceData","sliceId","_ref$angle","angle","_ref$cx","cx","_ref$cy","cy","_ref$radius","radius","_ref$sliceAngle","sliceAngle","_ref$layerColors","layerColors","_ref$fontSizes","fontSizes","_ref$showBoundaries","showBoundaries","_ref$pairIndex","pairIndex","_ref$sliceType","sliceType","originalSliceIndex","labels","nLabels","colors","fonts","halfAngle","layerElements","layer","innerRadius","outerRadius","startAngleRad","endAngleRad","innerX1","cos","innerY1","sin","innerX2","innerY2","outerX1","outerY1","outerX2","outerY2","largeArc","pathD","layerType","nodeId","d","fill","textElements","_loop","j","_labels$j","clearanceFactor","textRadius","arcLengthRadians","optimalFontSize","wrappedLines","lineSpacing","totalHeight","startRadius","lineIndex","currentRadius","arcStartX","arcStartY","arcEndX","arcEndY","arcId","arcPath","href","startOffset","textAnchor","boundaryElements","boundaryX1","boundaryY1","boundaryX2","boundaryY2","x1","y1","x2","y2","stroke","strokeWidth","generatePairTextsFromWisdomUnits","pairTexts","wu","thesisLabels","antithesisLabels","thesis","antithesis","defaultPairTexts","WisdomService","_createSession","_asyncToGenerator","_regenerator","m","_callee","baseUrl","response","data","_args","_t","w","_context","p","fetch","method","headers","body","JSON","stringify","user_message","v","ok","Error","status","json","createSession","_x","_autoBuildWheel","_callee2","sessionId","numberOfThoughts","componentLength","_args2","_t2","_context2","number_of_thoughts","component_length","autoBuildWheel","_x2","_createWheel","_callee3","wisdomUnitsData","_args3","_t3","_context3","wisdom_units","createWheel","_x3","_x4","_getWisdomUnits","_callee4","wheelId","_args4","_t4","_context4","getWisdomUnits","_x5","_x6","_getWheelCycles","_callee5","_args5","_t5","_context5","getWheelCycles","_x7","_getSessionData","_callee6","_args6","_t6","_context6","getSessionData","_x8","convertSequenceToSliceSequence","apiSequence","item","pairNumber","pair","getBestCycleSequence","cyclesData","cycles","bestCycle","reduce","best","firstHalf","sequence","causality_direction","reasoning","argumentation","concepts","transformApiWisdomUnits","apiWisdomUnits","isFlipped","t_minus","alias","a_plus","a_minus","t_plus","_createSessionAndAutoBuildWheel","_callee7","_this","_wheelData$wheels","sessionData","wheelData","allWheels","_args7","_t7","_context7","session_id","wheels","wheel","transformedUnits","rawWisdomUnits","selectedWheelIndex","rawData","createSessionAndAutoBuildWheel","_x9","_createSessionAndAutoBuildWheelWithCycles","_callee8","_this2","_args8","_t8","_context8","sliceSequence","createSessionAndAutoBuildWheelWithCycles","_x0","generateSequenceFromWisdomUnitsOrder","getPairTextsFromWisdomUnits","_getExistingSessionData","_callee9","_this3","_bestCycle","_cycles","_args9","_t9","_t0","_context9","getExistingSessionData","_x1","useDialecticalWheel","_React$useState","_React$useState2","setSessionId","_React$useState3","_React$useState4","setWheels","_React$useState5","_React$useState6","setSelectedWheelIndex","_React$useState7","_React$useState8","loading","setLoading","_React$useState9","_React$useState0","setError","_React$useState1","_React$useState10","setRawData","createAndBuildWheel","useCallback","_callee0","result","_t1","_context0","message","currentWheel","refetch","useDialecticalWheelWithCycles","_React$useState11","_React$useState12","_React$useState13","_React$useState14","_React$useState15","_React$useState16","_React$useState17","_React$useState18","setSliceSequence","_React$useState19","_React$useState20","setCycles","_React$useState21","_React$useState22","setBestCycle","_React$useState23","_React$useState24","_React$useState25","_React$useState26","_React$useState27","_React$useState28","createAndBuildWheelWithCycles","_callee1","_t10","_context1","getExistingData","_ref3","_callee10","existingSessionId","_t11","_context10","_x10","clearSession","createNew","getExisting","useManualWheel","_React$useState29","_React$useState30","setWheelData","_React$useState31","_React$useState32","_React$useState33","_React$useState34","_callee11","_t12","_context11","useNodeConnections","dynamicSlices","title","recordRef","showArrows","setShowArrows","demoConnections","setDemoConnections","getAllLayerNodes","document","querySelectorAll","getLayerNodeById","querySelector","getLayerNodesForPair","getLayerNodesByType","getLayerNodeInfo","nodeElement","dataset","layerIndex","getNodeCenter","isNaN","find","layerRadii","layerRadius","angleRad","x","y","connectNodes","fromId","toId","_recordRef$current","fromNode","toNode","fromCenter","toCenter","midX","midY","wheelCenterX","wheelCenterY","distanceFromCenter","sqrt","pow","curveFactor","curveDirection","dx","dy","perpX","perpY","curveOffset","controlX","controlY","arrow","createElementNS","setAttribute","toString","markerUrl","classList","add","appendChild","toggleArrows","existingConnections","remove","createDemoConnections","setTimeout","includes","allNodes","Array","getAttribute","newDemoConnections","nodeArray","greenNodes","pinkNodes","connection1","whiteNodes","connection2","thesisNodes","antithesisNodes","thesisPink","antithesisGreen","connection3","sampleNode","parseSliceLayerCode","code","typeChar","pairNum","modifier","getNodeIdFromSliceLayerCode","mapping","baseId","originalIndex","connectNodesBySliceLayerCode","fromCode","toCode","fromNodeId","toNodeId","getAvailableSliceLayerCodes","codes","pairGroups","entries","_ref2","pairIndexStr","sort","parseDotScript","edges","errors","cleanScript","replace","edgeRegex","exec","_match2","_match3","attributesStr","fromMapping","toMapping","attributes","attrRegex","attrMatch","_attrMatch","_attrMatch2","cleanValue","toLowerCase","executeDotScript","clearExisting","parseResult","created","availableCodes","createdCount","executionErrors","edge","createSliceLayerMappingDemo","exampleConnections","createDotScriptDemo","sampleDotScript","nodeAPI","sliceLayerAPI","dotScriptAPI","useWheelSlices","sequenceWithLabels","normalSliceAngle","focusedSliceAngle","unfocusedSliceAngle","setRotation","detailedSlices","focusedPair","setFocusedPair","setDynamicSlices","createSliceLayers","sliceWidth","layers","centerAngle","textAngle","textX","textY","sliceLayersCacheRef","Map","memoizedCreateSliceLayers","cache","has","get","set","memoizedSliceData","useMemo","sliceDataMap","layerCacheHits","layerCacheMisses","detailed","layersWereCached","size","createEqualSlices","slices","focusOnPair","clickedSliceType","targetVisualAngle","focusedThesisIndex","findIndex","focusedPosition","newRotation","originalThesisAngle","halfFocused","gap1Start","gap1End","gap1Size","gap2Start","gap2End","gap2Size","numUnfocused","slicesPerGap","extraSlices","positions","i","position","newSlices","focusedAntithesisIndex","usePairTexts","hasProvidedDetailedSlices","originalThesisSlice","originalAntithesisSlice","originalThesisSliceId","originalAntithesisSliceId","focused","originalSliceId","currentGapIndex","offset","checkIndex","handleSliceClick","clickedFocusedSlice","currentVisualAngle","sliceInEqualLayout","sliceIndexInEqual","indexOf","equalLayoutAngle","pairSlice","clickedVisualAngle","handleSliceTouchStart","stopPropagation","touch","touches","touchStartTime","Date","now","touchStartPos","clientX","clientY","_touchData","startTime","startPos","handleSliceTouchEnd","preventDefault","touchDuration","changedTouches","touchEndPos","distance","reset"],"mappings":"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"}