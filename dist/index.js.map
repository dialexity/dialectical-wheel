{"version":3,"file":"index.js","sources":["../src/store/hooks.ts","../src/store/dialecticalSlice.ts","../src/components/DialecticalWheel/components/StepControls.tsx","../src/components/DialecticalWheel/components/ArrowControls.tsx","../src/components/DialecticalWheel/DialecticalWheel.tsx","../src/components/ExploreComponent/ExploreComponent.js","../src/components/DataEditor.tsx","../src/components/DialecticalWheel/config/wheelConfig.ts","../src/utils/SliceGenerator.tsx","../src/services/wisdomService.js","../src/store/store.ts","../src/components/DialecticalWheel/hooks/useNodeConnections.ts","../src/components/DialecticalWheel/hooks/useWheelSlices.ts"],"sourcesContent":["import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector; ","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface DialecticalEntry {\n  statement: string;\n  positive: string;\n  negative: string;\n}\n\nexport interface DialecticalData {\n  [key: string]: DialecticalEntry;\n}\n\ninterface DialecticalState {\n  data: DialecticalData;\n  stepMode: {\n    isActive: boolean;\n    currentStep: number;\n    totalSteps: number;\n  };\n  arrows: {\n    visible: boolean;\n    connections: string;\n  };\n  rotation: number;\n  history: DialecticalData[];\n  historyIndex: number;\n}\n\nconst initialData: DialecticalData = {\n  T1: {\n    statement: \"AI will eliminate human jobs\",\n    positive: \"AI frees humans from repetitive tasks\",\n    negative: \"AI replaces human workers entirely\"\n  },\n  T2: {\n    statement: \"Automation reduces labor costs\",\n    positive: \"Lower costs benefit consumers\",\n    negative: \"Cost savings don't reach workers\"\n  },\n  T3: {\n    statement: \"AI improves workplace efficiency\",\n    positive: \"Faster decision-making processes\",\n    negative: \"Dehumanizes work environment\"\n  },\n  T4: {\n    statement: \"Remote work transforms society\",\n    positive: \"Greater work-life balance and flexibility\",\n    negative: \"Social isolation and reduced collaboration\"\n  },\n  A1: {\n    statement: \"Human creativity remains irreplaceable\",\n    positive: \"AI enhances human creative potential\",\n    negative: \"Over-reliance on AI reduces creativity\"\n  },\n  A2: {\n    statement: \"Education adapts to AI integration\",\n    positive: \"Skills training becomes more relevant\",\n    negative: \"Educational systems lag behind technology\"\n  },\n  A3: {\n    statement: \"AI democratizes access to information\",\n    positive: \"Levels playing field for learning\",\n    negative: \"Information overload reduces comprehension\"\n  },\n  A4: {\n    statement: \"Physical presence builds stronger teams\",\n    positive: \"Face-to-face interaction fosters trust\",\n    negative: \"Rigid office culture stifles innovation\"\n  }\n};\n\nconst initialState: DialecticalState = {\n  data: initialData,\n  stepMode: {\n    isActive: false,\n    currentStep: 0,\n    totalSteps: 0\n  },\n  arrows: {\n    visible: true,\n    connections: `# Basic dialectical connections\nT1 -> A1\nT2 -> A2  \nT3 -> A3\nT4 -> A4\n\n# Opposition arrows (thesis to antithesis)\nT1 -> T2\nA1 -> A2\n\n# Ring-specific connections (examples)\nT1+ -> A1-\nT2- -> A2+`\n  },\n  rotation: 0,\n  history: [initialData],\n  historyIndex: 0\n};\n\nconst dialecticalSlice = createSlice({\n  name: 'dialectical',\n  initialState,\n  reducers: {\n    // Data management\n    updateEntry: (state, action: PayloadAction<{ id: string; entry: DialecticalEntry }>) => {\n      const { id, entry } = action.payload;\n      state.data[id] = entry;\n      \n      // Add to history\n      state.history = state.history.slice(0, state.historyIndex + 1);\n      state.history.push({ ...state.data });\n      state.historyIndex = state.history.length - 1;\n    },\n    \n    addEntry: (state, action: PayloadAction<{ id: string; entry: DialecticalEntry }>) => {\n      const { id, entry } = action.payload;\n      state.data[id] = entry;\n      \n      // Add to history\n      state.history = state.history.slice(0, state.historyIndex + 1);\n      state.history.push({ ...state.data });\n      state.historyIndex = state.history.length - 1;\n    },\n    \n    removeEntry: (state, action: PayloadAction<string>) => {\n      const id = action.payload;\n      delete state.data[id];\n      \n      // Add to history\n      state.history = state.history.slice(0, state.historyIndex + 1);\n      state.history.push({ ...state.data });\n      state.historyIndex = state.history.length - 1;\n    },\n    \n    // History management\n    undo: (state) => {\n      if (state.historyIndex > 0) {\n        state.historyIndex--;\n        state.data = { ...state.history[state.historyIndex] };\n      }\n    },\n    \n    redo: (state) => {\n      if (state.historyIndex < state.history.length - 1) {\n        state.historyIndex++;\n        state.data = { ...state.history[state.historyIndex] };\n      }\n    },\n    \n    // Step mode management\n    setStepMode: (state, action: PayloadAction<{ isActive: boolean; currentStep?: number; totalSteps?: number }>) => {\n      const { isActive, currentStep, totalSteps } = action.payload;\n      state.stepMode.isActive = isActive;\n      if (currentStep !== undefined) state.stepMode.currentStep = currentStep;\n      if (totalSteps !== undefined) state.stepMode.totalSteps = totalSteps;\n    },\n    \n    stepForward: (state) => {\n      if (state.stepMode.currentStep < state.stepMode.totalSteps) {\n        state.stepMode.currentStep++;\n      }\n    },\n    \n    stepBackward: (state) => {\n      if (state.stepMode.currentStep > 0) {\n        state.stepMode.currentStep--;\n      }\n    },\n    \n    // Arrow management\n    setArrowsVisible: (state, action: PayloadAction<boolean>) => {\n      state.arrows.visible = action.payload;\n    },\n    \n    updateArrowConnections: (state, action: PayloadAction<string>) => {\n      state.arrows.connections = action.payload;\n    },\n    \n    // Rotation management\n    setRotation: (state, action: PayloadAction<number>) => {\n      state.rotation = action.payload;\n    },\n    \n    // Bulk data replacement\n    setDialecticalData: (state, action: PayloadAction<DialecticalData>) => {\n      state.data = action.payload;\n      \n      // Add to history\n      state.history = state.history.slice(0, state.historyIndex + 1);\n      state.history.push({ ...state.data });\n      state.historyIndex = state.history.length - 1;\n    },\n    \n    // Reorder entries\n    reorderEntries: (state, action: PayloadAction<string[]>) => {\n      const newOrder = action.payload;\n      const newData: DialecticalData = {};\n      \n      // Rebuild data object in the new order\n      newOrder.forEach(key => {\n        if (state.data[key]) {\n          newData[key] = state.data[key];\n        }\n      });\n      \n      // Add any entries that weren't in the new order (shouldn't happen, but safety)\n      Object.keys(state.data).forEach(key => {\n        if (!newData[key]) {\n          newData[key] = state.data[key];\n        }\n      });\n      \n      state.data = newData;\n      \n      // Add to history\n      state.history = state.history.slice(0, state.historyIndex + 1);\n      state.history.push({ ...state.data });\n      state.historyIndex = state.history.length - 1;\n    }\n  }\n});\n\nexport const {\n  updateEntry,\n  addEntry,\n  removeEntry,\n  undo,\n  redo,\n  setStepMode,\n  stepForward,\n  stepBackward,\n  setArrowsVisible,\n  updateArrowConnections,\n  setRotation,\n  setDialecticalData,\n  reorderEntries\n} = dialecticalSlice.actions;\n\nexport default dialecticalSlice.reducer; ","import React, { useEffect } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks';\nimport { setStepMode, setRotation } from '../../../store/dialecticalSlice';\n\ninterface StepControlsProps {\n  chart: any;\n}\n\nexport default function StepControls({ chart }: StepControlsProps) {\n  const dispatch = useAppDispatch();\n  const stepMode = useAppSelector(state => state.dialectical.stepMode);\n  const rotation = useAppSelector(state => state.dialectical.rotation);\n\n  useEffect(() => {\n    if (chart) {\n      // Update step info initially\n      updateStepInfo();\n    }\n  }, [chart]);\n\n  const updateStepInfo = () => {\n    if (chart && chart.getCurrentStepInfo) {\n      try {\n        const info = chart.getCurrentStepInfo();\n        if (info) {\n          dispatch(setStepMode({\n            isActive: true,\n            currentStep: info.current,\n            totalSteps: info.total\n          }));\n        } else {\n          dispatch(setStepMode({ isActive: false }));\n        }\n      } catch (error) {\n        console.error('Error getting step info:', error);\n      }\n    }\n  };\n\n  const handleStartStepMode = () => {\n    if (chart && chart.startStepMode) {\n      try {\n        chart.startStepMode();\n        updateStepInfo();\n      } catch (error) {\n        console.error('Error starting step mode:', error);\n      }\n    }\n  };\n\n  const handleStepForward = () => {\n    if (chart && chart.stepForward) {\n      try {\n        chart.stepForward();\n        updateStepInfo();\n      } catch (error) {\n        console.error('Error stepping forward:', error);\n      }\n    }\n  };\n\n  const handleResetToFull = () => {\n    if (chart && chart.resetToFull) {\n      try {\n        chart.resetToFull();\n        updateStepInfo();\n      } catch (error) {\n        console.error('Error resetting to full:', error);\n      }\n    }\n  };\n\n  const handleRotationChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const degrees = parseInt(e.target.value);\n    const radians = (degrees * Math.PI) / 180;\n    dispatch(setRotation(degrees));\n    if (chart && chart.rotate) {\n      try {\n        chart.rotate(radians);\n      } catch (error) {\n        console.error('Error rotating:', error);\n      }\n    }\n  };\n\n  const handleRotationReset = () => {\n    dispatch(setRotation(0));\n    if (chart && chart.rotate) {\n      try {\n        chart.rotate(0);\n      } catch (error) {\n        console.error('Error resetting rotation:', error);\n      }\n    }\n  };\n\n  const getCounterText = () => {\n    if (stepMode.isActive) {\n      return `Step ${stepMode.currentStep} of ${stepMode.totalSteps}`;\n    }\n    return \"Full View\";\n  };\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center', \n      margin: '20px 0',\n      padding: '20px',\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      background: 'white'\n    }}>\n      <h3 style={{ marginTop: 0 }}>Step Controls</h3>\n      \n      {/* Step controls */}\n      <div style={{ \n        display: 'flex', \n        justifyContent: 'center', \n        gap: '10px', \n        marginBottom: '15px', \n        alignItems: 'center' \n      }}>\n        <button \n          onClick={handleStartStepMode}\n          disabled={stepMode.isActive}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: stepMode.isActive ? '#e9ecef' : '#007bff',\n            color: stepMode.isActive ? '#6c757d' : 'white',\n            cursor: stepMode.isActive ? 'not-allowed' : 'pointer'\n          }}\n        >\n          Start Step Mode\n        </button>\n        \n        <span style={{ margin: '0 10px', fontWeight: 'bold' }}>\n          {getCounterText()}\n        </span>\n        \n        <button \n          onClick={handleStepForward}\n          disabled={!stepMode.isActive || stepMode.currentStep >= stepMode.totalSteps}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: (!stepMode.isActive || stepMode.currentStep >= stepMode.totalSteps) ? '#e9ecef' : '#28a745',\n            color: (!stepMode.isActive || stepMode.currentStep >= stepMode.totalSteps) ? '#6c757d' : 'white',\n            cursor: (!stepMode.isActive || stepMode.currentStep >= stepMode.totalSteps) ? 'not-allowed' : 'pointer'\n          }}\n        >\n          Next\n        </button>\n        \n        <button \n          onClick={handleResetToFull}\n          disabled={!stepMode.isActive}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: !stepMode.isActive ? '#e9ecef' : '#dc3545',\n            color: !stepMode.isActive ? '#6c757d' : 'white',\n            cursor: !stepMode.isActive ? 'not-allowed' : 'pointer'\n          }}\n        >\n          Show All\n        </button>\n      </div>\n      \n      {/* Rotation controls */}\n      <div style={{ \n        display: 'flex', \n        alignItems: 'center', \n        gap: '10px' \n      }}>\n        <label htmlFor=\"rotation-slider\" style={{ fontWeight: 'bold' }}>\n          Rotation:\n        </label>\n        <input \n          type=\"range\" \n          id=\"rotation-slider\" \n          min=\"0\" \n          max=\"360\" \n          value={rotation} \n          step=\"1\"\n          onChange={handleRotationChange}\n          style={{ width: '200px', cursor: 'pointer' }}\n        />\n        <span style={{ minWidth: '40px', fontFamily: 'monospace' }}>\n          {rotation}°\n        </span>\n        <button \n          onClick={handleRotationReset}\n          style={{\n            padding: '4px 8px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: '#f8f9fa',\n            cursor: 'pointer',\n            fontSize: '12px'\n          }}\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n} ","import React, { useState, useEffect } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../../store/hooks';\nimport { setArrowsVisible, updateArrowConnections } from '../../../store/dialecticalSlice';\n\ninterface ArrowControlsProps {\n  chart: any;\n}\n\n// Arrow parsing function (from Observable notebook)\nfunction parseArrowConnections(dotScript: string, dialecticalData: any) {\n  const connections = [];\n  const lines = dotScript.split('\\n');\n  \n  for (let line of lines) {\n    // Remove comments and trim\n    line = line.split('//')[0].trim();\n    if (!line) continue;\n    \n    // Parse \"A -> B\" syntax, supporting + and - suffixes\n    const match = line.match(/(\\w+[+-]?)\\s*->\\s*(\\w+[+-]?)/);\n    if (match) {\n      const [, from, to] = match;\n      \n      // Extract unit ID and ring type\n      const parseUnit = (unit: string) => {\n        if (unit.endsWith('+')) {\n          const unitId = unit.slice(0, -1);\n          return dialecticalData[unitId] ? { unitId, ringType: 'inner' } : null;\n        } else if (unit.endsWith('-')) {\n          const unitId = unit.slice(0, -1);\n          return dialecticalData[unitId] ? { unitId, ringType: 'outer' } : null;\n        } else {\n          return dialecticalData[unit] ? { unitId: unit, ringType: 'middle' } : null;\n        }\n      };\n      \n      const fromParsed = parseUnit(from);\n      const toParsed = parseUnit(to);\n      \n      if (fromParsed && toParsed) {\n        connections.push({ \n          from: fromParsed.unitId, \n          to: toParsed.unitId,\n          fromRing: fromParsed.ringType,\n          toRing: toParsed.ringType\n        });\n      }\n    }\n  }\n  \n  return connections;\n}\n\nexport default function ArrowControls({ chart }: ArrowControlsProps) {\n  const dispatch = useAppDispatch();\n  const dialecticalData = useAppSelector(state => state.dialectical.data);\n  const arrowsVisible = useAppSelector(state => state.dialectical.arrows.visible);\n  const arrowConnections = useAppSelector(state => state.dialectical.arrows.connections);\n  \n  // Step-by-step arrow state (matching Observable notebook)\n  const [arrowStepMode, setArrowStepMode] = useState(false);\n  const [currentArrowStep, setCurrentArrowStep] = useState(0);\n  const [parsedArrowConnections, setParsedArrowConnections] = useState<any[]>([]);\n  const [currentArrowInfo, setCurrentArrowInfo] = useState(\"\");\n\n  // Parse connections whenever they change\n  useEffect(() => {\n    if (chart && arrowConnections) {\n      const parsed = parseArrowConnections(arrowConnections, dialecticalData);\n      setParsedArrowConnections(parsed);\n      console.log('Parsed arrow connections:', parsed);\n    }\n  }, [arrowConnections, dialecticalData, chart]);\n\n  // Update arrow step UI (matching Observable notebook)\n  const updateArrowStepUI = () => {\n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    const totalArrows = connections.length;\n    \n    if (arrowStepMode) {\n      console.log(`Arrow step ${currentArrowStep} of ${totalArrows}`);\n    } else {\n      console.log(`Showing all ${totalArrows} arrows`);\n    }\n  };\n\n  useEffect(() => {\n    updateArrowStepUI();\n  }, [arrowStepMode, currentArrowStep, parsedArrowConnections]);\n\n  // Helper function to calculate arrow color based on connection\n  const getArrowColor = (conn: any) => {\n    let color = \"#666\"; // Default gray\n    \n    // Check if either endpoint is NOT middle ring (inner/outer ring connections)\n    if (conn.fromRing !== 'middle' || conn.toRing !== 'middle') {\n      if ((conn.fromRing === 'inner' && conn.toRing === 'inner') || \n          (conn.fromRing === 'outer' && conn.toRing === 'outer')) {\n        color = \"#16a34a\"; // Green for same polarity\n      } else if ((conn.fromRing === 'inner' && conn.toRing === 'outer') || \n                 (conn.fromRing === 'outer' && conn.toRing === 'inner')) {\n        color = \"#dc2626\"; // Red for opposite polarity\n      } else {\n        color = \"#8b5cf6\"; // Purple for mixed connections (middle to inner/outer)\n      }\n    } else {\n      // Both are middle ring - check thesis vs antithesis\n      const fromIsThesis = conn.from.startsWith('T');\n      const toIsThesis = conn.to.startsWith('T');\n      if (fromIsThesis === toIsThesis) {\n        color = \"#2563eb\"; // Blue for same type (T->T or A->A)\n      } else {\n        color = \"#dc2626\"; // Red for opposition (T->A or A->T)\n      }\n    }\n    \n    return color;\n  };\n\n  // Draw arrows up to specific step (matching Observable notebook)\n  const drawArrowsUpToStep = (step: number) => {\n    if (!chart || !chart.clearArrows || !chart.drawArrow) return;\n    \n    chart.clearArrows();\n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    const connectionsToShow = connections.slice(0, step);\n    \n    connectionsToShow.forEach((conn: any, index: number) => {\n      const color = getArrowColor(conn);\n      const delay = index * 200;\n      chart.drawArrow(conn.from, conn.to, color, 2, conn.fromRing, conn.toRing, delay);\n    });\n  };\n\n  // Draw next arrow (matching Observable notebook)\n  const drawNextArrow = () => {\n    if (!chart || !chart.drawArrow) return false;\n    \n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    if (currentArrowStep >= connections.length) {\n      return false; // No more arrows to draw\n    }\n    \n    const conn = connections[currentArrowStep];\n    const color = getArrowColor(conn);\n    \n    chart.drawArrow(conn.from, conn.to, color, 2, conn.fromRing, conn.toRing, 0);\n    return true;\n  };\n\n  // Custom function to draw all arrows based on current connections (replaces chart.drawAllArrows)\n  const drawAllCurrentArrows = () => {\n    if (!chart || !chart.clearArrows || !chart.drawArrow) return;\n    \n    chart.clearArrows();\n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    console.log('Drawing all current arrows:', connections);\n    \n    connections.forEach((conn: any, index: number) => {\n      const color = getArrowColor(conn);\n      const delay = index * 300;\n      chart.drawArrow(conn.from, conn.to, color, 2, conn.fromRing, conn.toRing, delay);\n    });\n  };\n\n  // Start arrow step mode (matching Observable notebook)\n  const handleStartArrowStepMode = () => {\n    const parsed = parseArrowConnections(arrowConnections, dialecticalData);\n    setParsedArrowConnections(parsed);\n    setArrowStepMode(true);\n    setCurrentArrowStep(0);\n    \n    if (chart && chart.clearArrows) {\n      chart.clearArrows();\n    }\n    \n    dispatch(setArrowsVisible(false));\n    updateArrowStepUI();\n  };\n\n  // Step forward (matching Observable notebook)\n  const handleStepForward = () => {\n    if (!arrowStepMode) return;\n    \n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    if (currentArrowStep < connections.length) {\n      const success = drawNextArrow();\n      if (success) {\n        setCurrentArrowStep(prev => prev + 1);\n        updateArrowStepUI();\n      }\n    }\n  };\n\n  // Step backward (matching Observable notebook)\n  const handleStepBackward = () => {\n    if (!arrowStepMode) return;\n    \n    if (currentArrowStep > 0) {\n      const newStep = currentArrowStep - 1;\n      setCurrentArrowStep(newStep);\n      drawArrowsUpToStep(newStep);\n      updateArrowStepUI();\n    }\n  };\n\n  // Show all arrows (exit step mode)\n  const handleShowAllArrows = () => {\n    setArrowStepMode(false);\n    setCurrentArrowStep(0);\n    \n    // Use our custom function instead of chart.drawAllArrows\n    drawAllCurrentArrows();\n    \n    dispatch(setArrowsVisible(true));\n    updateArrowStepUI();\n  };\n\n  // Toggle arrows (matching Observable notebook)\n  const handleToggleArrows = () => {\n    if (!chart) return;\n    \n    if (arrowsVisible) {\n      if (chart.clearArrows) {\n        chart.clearArrows();\n      }\n      dispatch(setArrowsVisible(false));\n    } else {\n      if (arrowStepMode) {\n        drawArrowsUpToStep(currentArrowStep);\n      } else {\n        // Use our custom function instead of chart.drawAllArrows\n        drawAllCurrentArrows();\n      }\n      dispatch(setArrowsVisible(true));\n    }\n  };\n\n  // Redraw arrows\n  const handleRedrawArrows = () => {\n    if (!chart || !arrowsVisible) return;\n    \n    if (arrowStepMode) {\n      drawArrowsUpToStep(currentArrowStep);\n    } else {\n      // Use our custom function instead of chart.drawAllArrows\n      drawAllCurrentArrows();\n    }\n  };\n\n  // Update connections (matching Observable notebook)\n  const handleUpdateConnections = () => {\n    console.log('Update button clicked');\n    console.log('Editor value:', arrowConnections);\n    \n    // Parse the new connections\n    const connections = parseArrowConnections(arrowConnections, dialecticalData);\n    setParsedArrowConnections(connections);\n    console.log('Parsed connections:', connections);\n    \n    if (arrowStepMode) {\n      setCurrentArrowStep(0);\n      updateArrowStepUI();\n      if (arrowsVisible && chart && chart.clearArrows) {\n        chart.clearArrows();\n      }\n    } else {\n      // In normal mode, redraw all arrows using the new connections\n      if (arrowsVisible) {\n        drawAllCurrentArrows();\n      }\n    }\n  };\n\n  const handleConnectionsChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    dispatch(updateArrowConnections(e.target.value));\n  };\n\n  const getArrowCounterText = () => {\n    if (arrowStepMode) {\n      return `Arrow ${currentArrowStep} of ${parsedArrowConnections.length}`;\n    }\n    return arrowsVisible ? \"All Arrows Visible\" : \"Ready to start\";\n  };\n\n  return (\n    <div style={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center', \n      margin: '20px 0',\n      padding: '20px',\n      border: '1px solid #ddd',\n      borderRadius: '8px',\n      background: 'white'\n    }}>\n      <div style={{ marginBottom: '10px', fontWeight: 'bold' }}>Arrow Connections</div>\n      \n      {/* Basic Arrow Controls */}\n      <div style={{ \n        display: 'flex', \n        gap: '10px', \n        marginBottom: '15px', \n        alignItems: 'center' \n      }}>\n        <button \n          onClick={handleToggleArrows}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: '#f8f9fa',\n            cursor: 'pointer'\n          }}\n        >\n          {arrowsVisible ? 'Hide Arrows' : 'Show Arrows'}\n        </button>\n        \n        <button \n          onClick={handleRedrawArrows}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: '#f8f9fa',\n            cursor: 'pointer'\n          }}\n        >\n          Redraw Arrows\n        </button>\n      </div>\n      \n      {/* Step-by-Step Arrow Drawing */}\n      <div style={{ \n        border: '1px solid #ddd', \n        borderRadius: '8px', \n        padding: '15px', \n        marginBottom: '15px', \n        background: '#f9f9f9',\n        width: '100%',\n        maxWidth: '500px'\n      }}>\n        <div style={{ fontWeight: 'bold', marginBottom: '10px' }}>Step-by-Step Arrow Drawing</div>\n        \n        <div style={{ \n          display: 'flex', \n          gap: '10px', \n          marginBottom: '10px', \n          alignItems: 'center',\n          flexWrap: 'wrap',\n          justifyContent: 'center'\n        }}>\n          <button \n            onClick={handleStartArrowStepMode}\n            disabled={arrowStepMode}\n            style={{\n              padding: '6px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: arrowStepMode ? '#e9ecef' : '#e7f3ff',\n              cursor: arrowStepMode ? 'not-allowed' : 'pointer'\n            }}\n          >\n            Start Step Mode\n          </button>\n          \n          <button \n            onClick={handleStepBackward}\n            disabled={!arrowStepMode || currentArrowStep <= 0}\n            style={{\n              padding: '6px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: (!arrowStepMode || currentArrowStep <= 0) ? '#e9ecef' : '#f8f9fa',\n              cursor: (!arrowStepMode || currentArrowStep <= 0) ? 'not-allowed' : 'pointer'\n            }}\n          >\n            Previous\n          </button>\n          \n          <span style={{ \n            margin: '0 10px', \n            fontWeight: 'bold', \n            minWidth: '120px',\n            textAlign: 'center'\n          }}>\n            {getArrowCounterText()}\n          </span>\n          \n                      <button \n             onClick={handleStepForward}\n             disabled={!arrowStepMode || currentArrowStep >= parseArrowConnections(arrowConnections, dialecticalData).length}\n            style={{\n              padding: '6px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: (!arrowStepMode || currentArrowStep >= parsedArrowConnections.length) ? '#e9ecef' : '#f8f9fa',\n              cursor: (!arrowStepMode || currentArrowStep >= parsedArrowConnections.length) ? 'not-allowed' : 'pointer'\n            }}\n          >\n            Next Arrow\n          </button>\n          \n          <button \n            onClick={handleShowAllArrows}\n            style={{\n              padding: '6px 12px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: '#f8f9fa',\n              cursor: 'pointer'\n            }}\n          >\n            Show All\n          </button>\n        </div>\n        \n        <div style={{ \n          fontSize: '12px', \n          color: '#666', \n          minHeight: '20px', \n          fontStyle: 'italic',\n          textAlign: 'center'\n        }}>\n          {currentArrowInfo}\n        </div>\n      </div>\n      \n      {/* Connection Editor */}\n      <div style={{ width: '100%', maxWidth: '500px' }}>\n        <div style={{ marginBottom: '10px' }}>\n          <label htmlFor=\"connections-editor\" style={{ fontWeight: 'bold' }}>\n            Edit Connections (DOT syntax):\n          </label>\n        </div>\n        \n        <textarea \n          id=\"connections-editor\"\n          value={arrowConnections}\n          onChange={handleConnectionsChange}\n          style={{\n            width: '100%',\n            height: '150px',\n            fontFamily: 'monospace',\n            fontSize: '12px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            padding: '8px',\n            resize: 'vertical'\n          }}\n        />\n        \n        <div style={{ marginTop: '10px' }}>\n          <button \n            onClick={handleUpdateConnections}\n            style={{\n              padding: '8px 16px',\n              border: '1px solid #ccc',\n              borderRadius: '4px',\n              background: '#007bff',\n              color: 'white',\n              cursor: 'pointer'\n            }}\n          >\n            Update Arrows\n          </button>\n        </div>\n        \n        <div style={{ \n          marginTop: '15px', \n          fontSize: '12px', \n          color: '#666', \n          maxWidth: '500px'\n        }}>\n          <strong>Syntax:</strong> Use \"A → B\" format. Available units: {Object.keys(dialecticalData).join(', ')}<br/>\n          <strong>Ring-specific:</strong> Add + for positives (e.g., T1+) or - for negatives (e.g., T1-)<br/>\n          <strong>Colors:</strong> 🔴Red for oppositions, 🔵Blue for same type, 🟢Green for same polarity, 🟣Purple for mixed\n        </div>\n      </div>\n    </div>\n  );\n} ","import {Runtime, Inspector} from '@observablehq/runtime';\nimport React, {useEffect, useRef, useState} from 'react';\nimport { useAppSelector } from '../../store/hooks';\nimport StepControls from './components/StepControls';\nimport ArrowControls from './components/ArrowControls';\nimport DataEditor from '../DataEditor';\n// @ts-ignore - Import the fixed version from package.json\nimport notebook from '@dialexity/dialectical-wheel';\n\nexport default function DialecticalWheel() {\n  const chartRef = useRef<HTMLDivElement>(null);\n  const [module, setModule] = useState<any>(null);\n  const [chart, setChart] = useState<any>(null);\n  const [runtime, setRuntime] = useState<any>(null);\n  \n  // Get dialectical data from Redux store\n  const dialecticalData = useAppSelector(state => state.dialectical.data);\n\n  useEffect(() => {\n    console.log('Loading Observable notebook from local npm package...');\n    \n    const runtime = new Runtime();\n    setRuntime(runtime);\n    \n    const main = runtime.module(notebook, (name: string) => {\n      if (name === 'chart') {\n        return new class extends Inspector {\n          constructor(node: any) {\n            super(node);\n          }\n          fulfilled(value: any) {\n            // The chart value IS the SVG node with methods attached\n            setChart(value);\n            return super.fulfilled(value);\n          }\n        }(chartRef.current);\n      }\n      // Don't render the Observable controls - we'll use React components instead\n      return undefined;\n    });\n\n    setModule(main);\n    \n    return () => {\n      setModule(null);\n      setChart(null);\n      setRuntime(null);\n      runtime.dispose();\n    };\n  }, []);\n\n  // Separate useEffect for redefining data - this follows the Observable examples pattern\n  useEffect(() => {\n    if (module && dialecticalData) {\n      console.log('Redefining dialecticalData in Observable notebook');\n      try {\n        module.redefine(\"dialecticalData\", dialecticalData);\n        console.log('Successfully redefined dialecticalData from local npm package');\n      } catch (error) {\n        console.warn('Could not redefine dialecticalData:', error);\n      }\n    }\n  }, [dialecticalData, module]);\n\n\n\n  return (\n    <div className=\"dialectical-wheel-wrapper\">\n      <div \n        ref={chartRef} \n        className=\"chart-container\"\n        style={{\n          width: '800px',\n          height: '800px',\n          border: '1px solid #ddd',\n          borderRadius: '8px',\n          background: 'white'\n        }}\n      />\n      \n      <StepControls chart={chart} />\n      \n      <ArrowControls chart={chart} />\n      \n      {/* Debug info */}\n      <div style={{ \n        marginTop: '10px', \n        padding: '10px', \n        background: '#f8f9fa', \n        borderRadius: '4px',\n        fontSize: '12px',\n        color: '#666'\n      }}>\n        Debug: {Object.keys(dialecticalData).length} entries in Redux store: {Object.keys(dialecticalData).join(', ')}<br/>\n        Using local npm package: @dialexity/dialectical-wheel\n      </div>\n    </div>\n  );\n} ","import React, { useState } from 'react';\n\nconst ExploreComponent = ({ \n  userMessage, \n  wisdomUnits, \n  currentApiCycle, \n  onEdit \n}) => {\n  const [currentUnitIndex, setCurrentUnitIndex] = useState(0);\n\n  const currentUnit = wisdomUnits[currentUnitIndex];\n\n  const handlePrevious = () => {\n    setCurrentUnitIndex(prev => prev > 0 ? prev - 1 : wisdomUnits.length - 1);\n  };\n\n  const handleNext = () => {\n    setCurrentUnitIndex(prev => prev < wisdomUnits.length - 1 ? prev + 1 : 0);\n  };\n\n  const getComponentCards = (unit) => {\n    const cards = [];\n    \n    // THESIS components (green)\n\n    if (unit.t?.statement) {\n        cards.push({\n          id: 't',\n          text: unit.t.statement,\n          label: 'THESIS', \n          color: '#ffffff',\n          textColor: '#155724',\n          type: 'thesis'\n        });\n      }\n\n    if (unit.tPlus?.statement) {\n      cards.push({\n        id: 'tPlus',\n        text: unit.tPlus.statement,\n        label: 'GOAL',\n        color: '#d4edda',\n        textColor: '#155724',\n        type: 'thesis'\n      });\n    }\n    \n    if (unit.tMinus?.statement) {\n      cards.push({\n        id: 'tMinus',\n        text: unit.tMinus.statement,\n        label: 'RISK',\n        color: '#f8d7da', \n        textColor: '#721c24',\n        type: 'thesis'\n      });\n    }\n\n    \n    \n    // ANTITHESIS components (red/orange)\n\n    if (unit.a?.statement) {\n        cards.push({\n          id: 'a',\n          text: unit.a.statement,\n          label: 'ANTITHESIS',\n          color: '#ffffff',\n          textColor: '#0c5460',\n          type: 'antithesis'\n        });\n      }\n\n    if (unit.aPlus?.statement) {\n      cards.push({\n        id: 'aPlus',\n        text: unit.aPlus.statement,\n        label: 'DUTY',\n        color: '#d4edda',\n        textColor: '#0c5460',\n        type: 'antithesis'\n      });\n    }\n    \n    if (unit.aMinus?.statement) {\n      cards.push({\n        id: 'aMinus',\n        text: unit.aMinus.statement,\n        label: 'DANGER',\n        color: '#f8d7da',\n        textColor: '#721c24', \n        type: 'antithesis'\n      });\n    }\n    \n    return cards;\n  };\n\n  if (!currentUnit || wisdomUnits.length === 0) {\n    return (\n      <div style={{ \n        padding: '40px 20px', \n        textAlign: 'center',\n        color: '#6c757d'\n      }}>\n        <div style={{ fontSize: '48px', marginBottom: '20px' }}>🤔</div>\n        <h3 style={{ margin: '0 0 10px 0', color: '#495057' }}>\n          No wisdom units found\n        </h3>\n        <p style={{ margin: 0, lineHeight: '1.5' }}>\n          Try running a new analysis to explore solutions.\n        </p>\n      </div>\n    );\n  }\n\n  const componentCards = getComponentCards(currentUnit);\n\n  return (\n    <div style={{ \n      maxWidth: '500px', \n      margin: '0 auto',\n      padding: '20px',\n      backgroundColor: 'white',\n      minHeight: 'calc(100vh - 80px)'\n    }}>\n      {/* Header with problem statement and navigation */}\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginBottom: '20px',\n        padding: '15px',\n        backgroundColor: '#f8f9fa',\n        borderRadius: '8px',\n        border: '1px solid #e9ecef'\n      }}>\n        <h2 style={{\n          margin: 0,\n          fontSize: '18px',\n          fontWeight: '600',\n          color: '#2c3e50',\n          flex: 1\n        }}>\n          {userMessage || 'Exploring Solutions'}\n        </h2>\n        <button\n          onClick={onEdit}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            fontSize: '16px',\n            cursor: 'pointer',\n            padding: '5px',\n            color: '#6c757d'\n          }}\n        >\n          ✏️\n        </button>\n      </div>\n\n      {/* Unit Navigation */}\n      <div style={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        marginBottom: '25px',\n        padding: '10px 15px',\n        backgroundColor: 'white',\n        borderRadius: '8px',\n        border: '2px solid #e9ecef'\n      }}>\n        <button\n          onClick={handlePrevious}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            fontSize: '20px',\n            cursor: 'pointer',\n            padding: '8px',\n            color: '#6c757d',\n            borderRadius: '50%'\n          }}\n        >\n          ← \n        </button>\n        \n        <div style={{ textAlign: 'center' }}>\n          <div style={{\n            fontSize: '14px',\n            fontWeight: '600',\n            color: '#495057',\n            marginBottom: '2px'\n          }}>\n            Perspective {currentUnitIndex + 1} of {wisdomUnits.length}\n          </div>\n          <div style={{\n            fontSize: '12px',\n            color: '#6c757d'\n          }}>\n            Thesis vs Antithesis\n          </div>\n        </div>\n        \n        <button\n          onClick={handleNext}\n          style={{\n            backgroundColor: 'transparent',\n            border: 'none',\n            fontSize: '20px',\n            cursor: 'pointer',\n            padding: '8px',\n            color: '#6c757d',\n            borderRadius: '50%'\n          }}\n        >\n          →\n        </button>\n      </div>\n\n      {/* Wisdom Unit Components */}\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '15px' }}>\n        {/* Thesis Cards */}\n        {componentCards.filter(card => card.type === 'thesis').map((card) => (\n          <div\n            key={card.id}\n            style={{\n              backgroundColor: card.color,\n              borderRadius: '8px',\n              padding: '15px 20px',\n              border: '1px solid rgba(0,0,0,0.1)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between'\n            }}\n          >\n            <div style={{\n              fontSize: '16px',\n              fontWeight: '500',\n              color: card.textColor,\n              flex: 1,\n              lineHeight: '1.4'\n            }}>\n              {card.text}\n            </div>\n            \n            <div style={{\n              fontSize: '12px',\n              fontWeight: '700',\n              color: card.textColor,\n              backgroundColor: 'rgba(255,255,255,0.3)',\n              padding: '4px 8px',\n              borderRadius: '4px',\n              marginLeft: '15px',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '5px'\n            }}>\n              {card.label}\n            </div>\n          </div>\n        ))}\n        \n        {/* Divider */}\n        <div style={{\n          display: 'flex',\n          alignItems: 'center',\n          margin: '10px 0',\n          gap: '15px'\n        }}>\n          <div style={{\n            flex: 1,\n            height: '2px',\n            background: 'linear-gradient(to right, transparent, #e9ecef, transparent)'\n          }}></div>\n          <div style={{\n            fontSize: '14px',\n            fontWeight: '600',\n            color: '#6c757d',\n            backgroundColor: 'white',\n            padding: '8px 16px',\n            borderRadius: '20px',\n            border: '2px solid #e9ecef'\n          }}>\n            VS\n          </div>\n          <div style={{\n            flex: 1,\n            height: '2px',\n            background: 'linear-gradient(to left, transparent, #e9ecef, transparent)'\n          }}></div>\n        </div>\n        \n        {/* Antithesis Cards */}\n        {componentCards.filter(card => card.type === 'antithesis').map((card) => (\n          <div\n            key={card.id}\n            style={{\n              backgroundColor: card.color,\n              borderRadius: '8px',\n              padding: '15px 20px',\n              border: '1px solid rgba(0,0,0,0.1)',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between'\n            }}\n          >\n            <div style={{\n              fontSize: '16px',\n              fontWeight: '500',\n              color: card.textColor,\n              flex: 1,\n              lineHeight: '1.4'\n            }}>\n              {card.text}\n            </div>\n            \n            <div style={{\n              fontSize: '12px',\n              fontWeight: '700',\n              color: card.textColor,\n              backgroundColor: 'rgba(255,255,255,0.3)',\n              padding: '4px 8px',\n              borderRadius: '4px',\n              marginLeft: '15px',\n              display: 'flex',\n              alignItems: 'center',\n              gap: '5px'\n            }}>\n              {card.label}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Unit Indicator Dots */}\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        gap: '8px',\n        marginTop: '30px',\n        padding: '20px 0'\n      }}>\n        {wisdomUnits.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setCurrentUnitIndex(index)}\n            style={{\n              width: '12px',\n              height: '12px',\n              borderRadius: '50%',\n              border: 'none',\n              backgroundColor: index === currentUnitIndex ? '#17a2b8' : '#e9ecef',\n              cursor: 'pointer',\n              transition: 'background-color 0.2s'\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Optimal Sequence Info */}\n      {currentApiCycle && (\n        <div style={{\n          marginTop: '20px',\n          padding: '15px',\n          backgroundColor: '#f8f9fa',\n          borderRadius: '8px',\n          textAlign: 'center',\n          border: '1px solid #e9ecef'\n        }}>\n          <div style={{\n            fontSize: '14px',\n            color: '#6c757d',\n            marginBottom: '8px'\n          }}>\n            Optimal Sequence: {currentApiCycle.rawSequence?.join(' → ')}\n          </div>\n          <div style={{\n            fontSize: '12px',\n            color: '#495057'\n          }}>\n            Confidence: {currentApiCycle ? (currentApiCycle.probability * 100).toFixed(0) + '%' : 'N/A'}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ExploreComponent; ","import React, { useState } from 'react';\nimport { useAppSelector, useAppDispatch } from '../store/hooks';\nimport { \n  updateEntry, \n  addEntry, \n  removeEntry, \n  undo, \n  redo,\n  reorderEntries,\n  type DialecticalEntry \n} from '../store/dialecticalSlice';\n\nexport default function DataEditor() {\n  const dispatch = useAppDispatch();\n  const dialecticalData = useAppSelector(state => state.dialectical.data);\n  const history = useAppSelector(state => state.dialectical.history);\n  const historyIndex = useAppSelector(state => state.dialectical.historyIndex);\n  \n  const [draggedItem, setDraggedItem] = useState<string | null>(null);\n  const [dragOverItem, setDragOverItem] = useState<string | null>(null);\n  \n  const canUndo = historyIndex > 0;\n  const canRedo = historyIndex < history.length - 1;\n\n  const dataEntries = Object.entries(dialecticalData);\n\n  // Test function to update T4 statement\n  const updateT4Statement = () => {\n    dispatch(updateEntry({\n      id: 'T4',\n      entry: {\n        statement: \"Remote work revolutionizes global collaboration\",\n        positive: \"Connects talent across geographical boundaries\",\n        negative: \"Creates digital divide and timezone conflicts\"\n      }\n    }));\n  };\n\n  // Test function to add new dialectical pair\n  const addNewDialecticalPair = () => {\n    const newPairNumber = Object.keys(dialecticalData).filter(key => key.startsWith('T')).length + 1;\n    \n    dispatch(addEntry({\n      id: `T${newPairNumber}`,\n      entry: {\n        statement: \"Climate change drives innovation\",\n        positive: \"Forces development of sustainable technologies\",\n        negative: \"Creates economic disruption and uncertainty\"\n      }\n    }));\n    \n    dispatch(addEntry({\n      id: `A${newPairNumber}`,\n      entry: {\n        statement: \"Economic stability preserves environment\",\n        positive: \"Steady growth enables green investments\",\n        negative: \"Short-term profits ignore long-term costs\"\n      }\n    }));\n  };\n\n  const handleUndo = () => {\n    dispatch(undo());\n  };\n\n  const handleRedo = () => {\n    dispatch(redo());\n  };\n\n  const handleRemoveEntry = (id: string) => {\n    if (window.confirm(`Are you sure you want to remove ${id}?`)) {\n      dispatch(removeEntry(id));\n    }\n  };\n\n  // Drag and Drop handlers\n  const handleDragStart = (e: React.DragEvent, id: string) => {\n    setDraggedItem(id);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/html', id);\n  };\n\n  const handleDragOver = (e: React.DragEvent, id: string) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n    setDragOverItem(id);\n  };\n\n  const handleDragLeave = () => {\n    setDragOverItem(null);\n  };\n\n  const handleDrop = (e: React.DragEvent, targetId: string) => {\n    e.preventDefault();\n    \n    if (!draggedItem || draggedItem === targetId) {\n      setDraggedItem(null);\n      setDragOverItem(null);\n      return;\n    }\n\n    const currentOrder = Object.keys(dialecticalData);\n    const draggedIndex = currentOrder.indexOf(draggedItem);\n    const targetIndex = currentOrder.indexOf(targetId);\n\n    if (draggedIndex !== -1 && targetIndex !== -1) {\n      const newOrder = [...currentOrder];\n      \n      // Remove dragged item from its current position\n      newOrder.splice(draggedIndex, 1);\n      \n      // Insert dragged item at target position\n      newOrder.splice(targetIndex, 0, draggedItem);\n      \n      dispatch(reorderEntries(newOrder));\n    }\n\n    setDraggedItem(null);\n    setDragOverItem(null);\n  };\n\n  const handleDragEnd = () => {\n    setDraggedItem(null);\n    setDragOverItem(null);\n  };\n\n  return (\n    <div style={{ \n      margin: '20px 0', \n      padding: '20px', \n      border: '1px solid #ddd', \n      borderRadius: '8px',\n      background: 'white'\n    }}>\n      <h3>Data Editor</h3>\n      \n      {/* Undo/Redo Controls */}\n      <div style={{ \n        display: 'flex', \n        gap: '10px', \n        marginBottom: '15px',\n        alignItems: 'center' \n      }}>\n        <button \n          onClick={handleUndo}\n          disabled={!canUndo}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: !canUndo ? '#e9ecef' : '#6c757d',\n            color: !canUndo ? '#6c757d' : 'white',\n            cursor: !canUndo ? 'not-allowed' : 'pointer'\n          }}\n        >\n          ↶ Undo\n        </button>\n        \n        <button \n          onClick={handleRedo}\n          disabled={!canRedo}\n          style={{\n            padding: '8px 16px',\n            border: '1px solid #ccc',\n            borderRadius: '4px',\n            background: !canRedo ? '#e9ecef' : '#6c757d',\n            color: !canRedo ? '#6c757d' : 'white',\n            cursor: !canRedo ? 'not-allowed' : 'pointer'\n          }}\n        >\n          ↷ Redo\n        </button>\n        \n        <span style={{ \n          marginLeft: '10px', \n          fontSize: '12px', \n          color: '#666' \n        }}>\n          History: {historyIndex + 1} / {history.length}\n        </span>\n      </div>\n\n      {/* Test Controls */}\n      <div style={{ \n        margin: '15px 0', \n        padding: '15px', \n        border: '2px solid #007bff', \n        borderRadius: '8px',\n        background: '#f8f9ff'\n      }}>\n        <h4>Test Data Flow</h4>\n        <p>Current T4 statement: <strong>{dialecticalData.T4?.statement || 'N/A'}</strong></p>\n        <div style={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}>\n          <button \n            onClick={updateT4Statement}\n            style={{\n              padding: '10px 20px',\n              background: '#007bff',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Update T4 Statement\n          </button>\n          <button \n            onClick={addNewDialecticalPair}\n            style={{\n              padding: '10px 20px',\n              background: '#28a745',\n              color: 'white',\n              border: 'none',\n              borderRadius: '4px',\n              cursor: 'pointer'\n            }}\n          >\n            Add New Pair\n          </button>\n        </div>\n        <p style={{ fontSize: '12px', color: '#666', marginTop: '10px' }}>\n          Current entries: {Object.keys(dialecticalData).length} total\n        </p>\n      </div>\n\n      {/* Current Data Display with Drag and Drop */}\n      <div style={{ marginTop: '15px' }}>\n        <h4>Current Dialectical Data: <span style={{ fontSize: '12px', color: '#666' }}>(Drag to reorder)</span></h4>\n        <div style={{ \n          maxHeight: '400px', \n          overflowY: 'auto',\n          border: '1px solid #ddd',\n          borderRadius: '4px',\n          padding: '10px'\n        }}>\n          {dataEntries.map(([id, entry]) => (\n            <div \n              key={id}\n              draggable\n              onDragStart={(e) => handleDragStart(e, id)}\n              onDragOver={(e) => handleDragOver(e, id)}\n              onDragLeave={handleDragLeave}\n              onDrop={(e) => handleDrop(e, id)}\n              onDragEnd={handleDragEnd}\n              style={{ \n                marginBottom: '10px', \n                padding: '10px',\n                background: draggedItem === id ? '#e3f2fd' : \n                           dragOverItem === id ? '#f3e5f5' : '#f8f9fa',\n                borderRadius: '4px',\n                border: dragOverItem === id ? '2px dashed #9c27b0' : '1px solid #e9ecef',\n                cursor: 'move',\n                transition: 'all 0.2s ease',\n                transform: draggedItem === id ? 'rotate(2deg) scale(1.02)' : 'none',\n                opacity: draggedItem === id ? 0.8 : 1\n              }}\n            >\n              <div style={{ \n                display: 'flex', \n                justifyContent: 'space-between', \n                alignItems: 'center',\n                marginBottom: '5px'\n              }}>\n                <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>\n                  <span style={{ \n                    fontSize: '16px', \n                    color: '#666',\n                    cursor: 'grab'\n                  }}>\n                    ⋮⋮\n                  </span>\n                  <strong>{id}</strong>\n                </div>\n                <button\n                  onClick={() => handleRemoveEntry(id)}\n                  style={{\n                    padding: '2px 6px',\n                    background: '#dc3545',\n                    color: 'white',\n                    border: 'none',\n                    borderRadius: '3px',\n                    cursor: 'pointer',\n                    fontSize: '12px'\n                  }}\n                >\n                  Remove\n                </button>\n              </div>\n              <div style={{ fontSize: '14px' }}>\n                <div><strong>Statement:</strong> {entry.statement}</div>\n                <div><strong>Positive:</strong> {entry.positive}</div>\n                <div><strong>Negative:</strong> {entry.negative}</div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n} ","export const WHEEL_CONFIG = {\n  // Core wheel dimensions\n  DIMENSIONS: {\n    CENTER_X: 200,\n    CENTER_Y: 200,\n    RADIUS: 150,\n    CENTER_CIRCLE_RADIUS: 30,\n    SLICE_INNER_RADIUS_RATIO: 0.3, // Inner radius is 30% of total radius\n    SLICE_OUTER_RADIUS_RATIO: 1.0,  // Outer radius is 100% of total radius\n  },\n\n  // Colors\n  COLORS: {\n    // Slice type colors\n    THESIS: '#4CAF50',        // Green for thesis\n    ANTITHESIS: '#F44336',    // Red for antithesis\n    \n    // Layer colors (from inner to outer)\n    LAYER_COLORS: ['#C6E5B3', '#FFFFFF', '#F9C6CC'], // green, white, pink\n    \n    // UI colors\n    PRIMARY_BLUE: '#007AFF',\n    ACCENT_BLUE: '#0074d9',\n    CENTER_CIRCLE: '#FFC107', // Yellow/gold\n    BOUNDARY_LINES: '#888',   // Gray\n    \n    // Arrow marker colors\n    ARROWS: {\n      DEFAULT: '#0074d9',\n      ORANGE: '#FF6B35',\n      BLUE: '#2196F3',\n      PURPLE: '#9C27B0',\n      GREEN: '#4CAF50',\n    },\n    \n    // Background and UI\n    BACKGROUND: '#f7f7f7',\n    WHITE: '#FFFFFF',\n    BLACK: '#000000',\n  },\n\n  // Typography\n  TYPOGRAPHY: {\n    // Font sizes for different elements\n    CENTER_LABEL: 16,\n    SLICE_LAYERS: [8, 10, 14], // Inner, middle, outer layer font sizes\n    DEFAULT_FONT_FAMILY: \"'Arial Rounded MT Bold', Arial, sans-serif\",\n  },\n\n  // Slice configuration\n  SLICES: {\n    DEFAULT_ANGLE: 120,\n    LAYER_COUNT: 3,\n    // Layer distribution within slice (as ratios)\n    LAYER_RATIOS: [\n      { inner: 0.3, outer: 0.55 }, // Inner layer: 30% to 55%\n      { inner: 0.55, outer: 0.775 }, // Middle layer: 55% to 77.5%\n      { inner: 0.775, outer: 1.0 },  // Outer layer: 77.5% to 100%\n    ],\n  },\n\n  // Stroke and line properties\n  STROKES: {\n    BOUNDARY_WIDTH: 1,\n    HOVER_WIDTH: 2,\n    FOCUS_WIDTH: 3,\n    ARROW_WIDTH: 2,\n    DEBUG_WIDTH: 2,\n  },\n\n  // Animation and interaction\n  ANIMATION: {\n    // Rotation hints configuration\n    ROTATION_HINTS: [\n      { radius: 160, opacity: 0.7, strokeWidth: 2, dashArray: \"8 4\", duration: \"6s\", direction: 1 },\n      { radius: 170, opacity: 0.6, strokeWidth: 1.5, dashArray: \"4 8\", duration: \"8s\", direction: 1 },\n      { radius: 180, opacity: 0.5, strokeWidth: 2, dashArray: \"2 4\", duration: \"12s\", direction: -1 },\n      { radius: 190, opacity: 0.4, strokeWidth: 1, dashArray: \"6 3\", duration: \"10s\", direction: 1 },\n      { radius: 200, opacity: 0.3, strokeWidth: 1.5, dashArray: \"3 6\", duration: \"15s\", direction: -1 },\n      { radius: 210, opacity: 0.2, strokeWidth: 1, dashArray: \"5 2\", duration: \"18s\", direction: 1 }\n    ],\n    \n    // Transition durations\n    TRANSITION_DURATION: '0.3s',\n    OPACITY_TRANSITION: '0.2s',\n  },\n\n  // SVG markers configuration\n  MARKERS: {\n    ROTATION_ARROW: {\n      id: 'rotation-arrow',\n      width: 8,\n      height: 6,\n      refX: 8,\n      refY: 3,\n      color: '#007AFF',\n      opacity: 0.6,\n    },\n    \n    ARROWHEADS: [\n      { id: 'arrowhead', color: '#0074d9' },\n      { id: 'arrowhead-orange', color: '#FF6B35' },\n      { id: 'arrowhead-blue', color: '#2196F3' },\n      { id: 'arrowhead-purple', color: '#9C27B0' },\n      { id: 'arrowhead-green', color: '#4CAF50' },\n    ],\n    \n    ARROWHEAD_DIMENSIONS: {\n      width: 6,\n      height: 4,\n      refX: 6,\n      refY: 2,\n    },\n  },\n\n  // Interaction zones and thresholds\n  INTERACTION: {\n    HOVER_OPACITY: 0.8,\n    SELECTED_OPACITY: 0.9,\n    FOCUS_BRIGHTNESS: 1.2,\n    PAIR_HIGHLIGHT_BRIGHTNESS: 1.1,\n    \n    // Touch and click thresholds\n    TOUCH_THRESHOLD: 10, // pixels\n    DOUBLE_TAP_DELAY: 300, // milliseconds\n  },\n\n  // Layout and responsive design\n  LAYOUT: {\n    SVG_VIEWBOX: \"0 0 400 400\",\n    \n    // Responsive breakpoints (matching CSS)\n    BREAKPOINTS: {\n      MOBILE: 768,\n      SMALL_MOBILE: 480,\n    },\n    \n    // Control overlay positioning\n    CONTROLS_OVERLAY: {\n      top: 60,\n      left: 20,\n      fontSize: 12,\n      padding: 8,\n    },\n  },\n\n  // Default wheel configuration\n  DEFAULTS: {\n    NUM_PAIRS: 4,\n    TITLE: \"Win-Win\",\n    CENTER_LABEL: \"Core\",\n    SHOW_BOUNDARIES: true,\n    ENABLE_ARROWS: false,\n  },\n} as const;\n\n// Export individual sections for convenience\nexport const { DIMENSIONS, COLORS, TYPOGRAPHY, SLICES, STROKES, ANIMATION, MARKERS, INTERACTION, LAYOUT, DEFAULTS } = WHEEL_CONFIG;\n\n// Type definitions for configuration\nexport type WheelConfig = typeof WHEEL_CONFIG;\nexport type WheelDimensions = typeof DIMENSIONS;\nexport type WheelColors = typeof COLORS;\nexport type WheelTypography = typeof TYPOGRAPHY; ","import React from 'react';\nimport { COLORS, DIMENSIONS, SLICES, TYPOGRAPHY, STROKES } from '../components/DialecticalWheel/config/wheelConfig';\n\n// Type definitions\ninterface LayerNode {\n  nodeId: string;\n  sliceId: string;\n  pairIndex?: number;\n  sliceType?: 'thesis' | 'antithesis';\n  layerIndex: number;\n  layerType: 'green' | 'white' | 'pink';\n}\n\ninterface SliceData {\n  labels: [string, string][];\n}\n\ninterface SliceProps {\n  sliceData: SliceData;\n  sliceId: string;\n  angle?: number;\n  cx?: number;\n  cy?: number;\n  radius?: number;\n  sliceAngle?: number;\n  layerColors?: string[] | null;\n  fontSizes?: number[] | null;\n  showBoundaries?: boolean;\n  pairIndex?: number | null;\n  sliceType?: 'thesis' | 'antithesis' | null;\n  originalSliceIndex?: number | null;\n}\n\n// Utility functions\nconst wrapTextForArc = (text: string, arcLength: number, fontSize: number): string[] => {\n  if (!text) return [''];\n  \n  const avgCharWidth = fontSize * 0.6;\n  const maxCharsPerLine = Math.floor(arcLength / avgCharWidth);\n  \n  if (text.length <= maxCharsPerLine) {\n    return [text];\n  }\n  \n  const words = text.split(' ');\n  const lines: string[] = [];\n  let currentLine = '';\n  \n  for (const word of words) {\n    const testLine = currentLine + (currentLine ? ' ' : '') + word;\n    if (testLine.length <= maxCharsPerLine) {\n      currentLine = testLine;\n    } else {\n      if (currentLine) {\n        lines.push(currentLine);\n        currentLine = word;\n      } else {\n        lines.push(word.substring(0, maxCharsPerLine));\n        currentLine = word.substring(maxCharsPerLine);\n      }\n    }\n  }\n  \n  if (currentLine) {\n    lines.push(currentLine);\n  }\n  \n  return lines.slice(0, 3); // Max 3 lines\n};\n\nconst calculateOptimalFontSize = (text: string, arcLength: number, maxFontSize: number, minFontSize: number = 4): number => {\n  if (!text) return maxFontSize;\n  \n  let fontSize = maxFontSize;\n  while (fontSize >= minFontSize) {\n    const avgCharWidth = fontSize * 0.6;\n    const maxCharsPerLine = Math.floor(arcLength / avgCharWidth);\n    \n    const lines = wrapTextForArc(text, arcLength, fontSize);\n    const longestLine = Math.max(...lines.map(line => line.length));\n    \n    if (longestLine <= maxCharsPerLine) {\n      return fontSize;\n    }\n    \n    fontSize -= 0.5;\n  }\n  \n  return minFontSize;\n};\n\nconst toRadians = (deg: number): number => deg * Math.PI / 180;\n\n// React component for slice at a specific angle\nexport const SliceAtAngle: React.FC<SliceProps> = ({\n  sliceData,\n  sliceId,\n  angle = 0,\n  cx = DIMENSIONS.CENTER_X,\n  cy = DIMENSIONS.CENTER_Y,\n  radius = DIMENSIONS.RADIUS,\n  sliceAngle = SLICES.DEFAULT_ANGLE,\n  layerColors = null,\n  fontSizes = null,\n  showBoundaries = true,\n  pairIndex = null,\n  sliceType = null,\n  originalSliceIndex = null\n}) => {\n  const { labels } = sliceData;\n  const nLabels = labels.length;\n  \n  const colors = layerColors || COLORS.LAYER_COLORS;\n  const fonts = fontSizes || TYPOGRAPHY.SLICE_LAYERS;\n  \n  const halfAngle = sliceAngle / 2;\n  \n  // Generate layer elements (rings)\n  const layerElements: JSX.Element[] = [];\n  \n      for (let layer = 0; layer < nLabels; layer++) {\n    const innerRadius = radius * (DIMENSIONS.SLICE_INNER_RADIUS_RATIO + (DIMENSIONS.SLICE_OUTER_RADIUS_RATIO - DIMENSIONS.SLICE_INNER_RADIUS_RATIO) * layer / nLabels);\n    const outerRadius = radius * (DIMENSIONS.SLICE_INNER_RADIUS_RATIO + (DIMENSIONS.SLICE_OUTER_RADIUS_RATIO - DIMENSIONS.SLICE_INNER_RADIUS_RATIO) * (layer + 1) / nLabels);\n    const color = colors[layer % colors.length];\n    \n    const startAngleRad = toRadians(angle - halfAngle);\n    const endAngleRad = toRadians(angle + halfAngle);\n    \n    const innerX1 = cx + innerRadius * Math.cos(startAngleRad);\n    const innerY1 = cy + innerRadius * Math.sin(startAngleRad);\n    const innerX2 = cx + innerRadius * Math.cos(endAngleRad);\n    const innerY2 = cy + innerRadius * Math.sin(endAngleRad);\n    \n    const outerX1 = cx + outerRadius * Math.cos(startAngleRad);\n    const outerY1 = cy + outerRadius * Math.sin(startAngleRad);\n    const outerX2 = cx + outerRadius * Math.cos(endAngleRad);\n    const outerY2 = cy + outerRadius * Math.sin(endAngleRad);\n    \n    const largeArc = sliceAngle > 180 ? 1 : 0;\n    \n    const pathD = `M ${outerX1},${outerY1} \n                   A ${outerRadius},${outerRadius} 0 ${largeArc},1 ${outerX2},${outerY2} \n                   L ${innerX2},${innerY2} \n                   A ${innerRadius},${innerRadius} 0 ${largeArc},0 ${innerX1},${innerY1} Z`;\n    \n    // Generate node attributes for data\n    const layerType = layer === 0 ? 'green' : layer === 1 ? 'white' : 'pink';\n    const nodeId = `${sliceId}-layer-${layer}`;\n    \n    layerElements.push(\n      <path\n        key={`${sliceId}-layer-${layer}`}\n        d={pathD}\n        fill={color}\n        className=\"layer-node\"\n        data-node-id={nodeId}\n        data-slice-id={sliceId}\n        data-pair-index={pairIndex ?? undefined}\n        data-slice-type={sliceType ?? undefined}\n        data-layer-index={layer}\n        data-layer-type={layerType}\n      />\n    );\n  }\n  \n  // Generate text elements\n  const textElements: JSX.Element[] = [];\n  \n  for (let j = 0; j < labels.length; j++) {\n    const [label, color] = labels[j];\n    \n    // Calculate radius for this layer with better clearance from edges\n    const innerRadius = radius * (0.3 + 0.7 * j / nLabels);\n    const outerRadius = radius * (0.3 + 0.7 * (j + 1) / nLabels);\n    \n    // Use weighted average closer to inner edge for outer layers to avoid edge proximity\n    const clearanceFactor = j === (nLabels - 1) ? 0.3 : 0.5; // 30% from inner for outermost, 50% for others\n    const textRadius = innerRadius + (outerRadius - innerRadius) * clearanceFactor;\n    const maxFontSize = fonts[j % fonts.length];\n    \n    // Calculate arc length for this text layer\n    const arcLengthRadians = (sliceAngle * Math.PI) / 180;\n    const arcLength = textRadius * arcLengthRadians;\n    \n    // Calculate optimal font size\n    const optimalFontSize = calculateOptimalFontSize(label, arcLength, maxFontSize);\n    \n    // Wrap text if needed\n    const wrappedLines = wrapTextForArc(label, arcLength, optimalFontSize);\n    \n    // Create arc path for text\n    const startAngleRad = toRadians(angle - halfAngle);\n    const endAngleRad = toRadians(angle + halfAngle);\n    \n    // For multiple lines, adjust radius for each line\n    const lineSpacing = optimalFontSize * 1.2;\n    const totalHeight = (wrappedLines.length - 1) * lineSpacing;\n    const startRadius = textRadius - totalHeight / 2;\n    \n    wrappedLines.forEach((line, lineIndex) => {\n      // Reverse line order: first line gets largest radius (farthest from center)\n      const currentRadius = startRadius + ((wrappedLines.length - 1 - lineIndex) * lineSpacing);\n      \n      // Skip if radius is out of bounds\n      if (currentRadius < radius * 0.3 || currentRadius > radius) {\n        return;\n      }\n      \n      const arcStartX = cx + currentRadius * Math.cos(startAngleRad);\n      const arcStartY = cy + currentRadius * Math.sin(startAngleRad);\n      const arcEndX = cx + currentRadius * Math.cos(endAngleRad);\n      const arcEndY = cy + currentRadius * Math.sin(endAngleRad);\n      \n      const arcId = `${sliceId}-arc-${j}-line-${lineIndex}`;\n      const largeArc = sliceAngle > 180 ? 1 : 0;\n      const arcPath = `M ${arcStartX},${arcStartY} A ${currentRadius},${currentRadius} 0 ${largeArc},1 ${arcEndX},${arcEndY}`;\n      \n      textElements.push(\n        <defs key={`${arcId}-def`}>\n          <path id={arcId} d={arcPath} fill=\"none\" />\n        </defs>\n      );\n      \n      textElements.push(\n        <text key={`${arcId}-text`} fontSize={optimalFontSize} fill={color}>\n          <textPath href={`#${arcId}`} startOffset=\"50%\" textAnchor=\"middle\">\n            {line}\n          </textPath>\n        </text>\n      );\n    });\n  }\n  \n  // Generate boundary lines\n  const boundaryElements: JSX.Element[] = [];\n  \n  if (showBoundaries) {\n    const startAngleRad = toRadians(angle - halfAngle);\n    const endAngleRad = toRadians(angle + halfAngle);\n    \n    const boundaryX1 = cx + radius * Math.cos(startAngleRad);\n    const boundaryY1 = cy + radius * Math.sin(startAngleRad);\n    const boundaryX2 = cx + radius * Math.cos(endAngleRad);\n    const boundaryY2 = cy + radius * Math.sin(endAngleRad);\n    \n    boundaryElements.push(\n      <line\n        key={`${sliceId}-boundary-1`}\n        x1={cx}\n        y1={cy}\n        x2={boundaryX1}\n        y2={boundaryY1}\n        stroke={COLORS.BOUNDARY_LINES}\n        strokeWidth={STROKES.BOUNDARY_WIDTH}\n      />,\n      <line\n        key={`${sliceId}-boundary-2`}\n        x1={cx}\n        y1={cy}\n        x2={boundaryX2}\n        y2={boundaryY2}\n        stroke={COLORS.BOUNDARY_LINES}\n        strokeWidth={STROKES.BOUNDARY_WIDTH}\n      />\n    );\n  }\n  \n  return (\n    <g>\n      {layerElements}\n      {boundaryElements}\n      {textElements}\n    </g>\n  );\n};\n\n// React component for detailed slice (fixed position)\nexport const DetailedSlice: React.FC<{\n  texts: string[];\n  sliceId: string;\n  debugColor?: string;\n}> = ({ texts, sliceId, debugColor = COLORS.BOUNDARY_LINES }) => {\n  const centerX = DIMENSIONS.CENTER_X, centerY = DIMENSIONS.CENTER_Y;\n  const startAngle = -60;\n  const endAngle = 60;\n  \n  const startRad = toRadians(startAngle);\n  const endRad = toRadians(endAngle);\n  \n  const ringRadii = [\n    { inner: 45, outer: 80, fill: COLORS.LAYER_COLORS[0] },   // Inner ring - green\n    { inner: 80, outer: 115, fill: COLORS.LAYER_COLORS[1] },  // Middle ring - white  \n    { inner: 115, outer: 150, fill: COLORS.LAYER_COLORS[2] }  // Outer ring - pink\n  ];\n  \n  const pathElements: JSX.Element[] = [];\n  const textElements: JSX.Element[] = [];\n  \n  // Generate ring paths\n  ringRadii.forEach((ring, index) => {\n    const inner1X = centerX + ring.inner * Math.cos(startRad);\n    const inner1Y = centerY + ring.inner * Math.sin(startRad);\n    const inner2X = centerX + ring.inner * Math.cos(endRad);\n    const inner2Y = centerY + ring.inner * Math.sin(endRad);\n    \n    const outer1X = centerX + ring.outer * Math.cos(startRad);\n    const outer1Y = centerY + ring.outer * Math.sin(startRad);\n    const outer2X = centerX + ring.outer * Math.cos(endRad);\n    const outer2Y = centerY + ring.outer * Math.sin(endRad);\n    \n    const largeArc = 0; // 120° is less than 180°\n    \n    const pathD = `M ${outer1X},${outer1Y} \n                   A ${ring.outer},${ring.outer} 0 ${largeArc},1 ${outer2X},${outer2Y} \n                   L ${inner2X},${inner2Y} \n                   A ${ring.inner},${ring.inner} 0 ${largeArc},0 ${inner1X},${inner1Y} \n                   L ${outer1X},${outer1Y} Z`;\n    \n    pathElements.push(\n      <path\n        key={`${sliceId}-ring-${index}`}\n        d={pathD}\n        fill={ring.fill}\n        stroke={debugColor}\n        strokeWidth=\"2\"\n      />\n    );\n    \n    // Add text if available\n    if (texts[index]) {\n      const textRadius = (ring.inner + ring.outer) / 2;\n      const arcId = `${sliceId}-arc-${index}`;\n      \n      const textStartX = centerX + textRadius * Math.cos(startRad);\n      const textStartY = centerY + textRadius * Math.sin(startRad);\n      const textEndX = centerX + textRadius * Math.cos(endRad);\n      const textEndY = centerY + textRadius * Math.sin(endRad);\n      \n      const textArcPath = `M ${textStartX},${textStartY} A ${textRadius},${textRadius} 0 ${largeArc},1 ${textEndX},${textEndY}`;\n      \n      const maxFontSize = index === 0 ? 8 : index === 1 ? 10 : 14;\n      const arcLengthRadians = (120 * Math.PI) / 180;\n      const arcLength = textRadius * arcLengthRadians;\n      const optimalFontSize = calculateOptimalFontSize(texts[index], arcLength, maxFontSize);\n      \n      const color = index === 0 ? 'green' : index === 1 ? 'black' : 'red';\n      \n      textElements.push(\n        <defs key={`${arcId}-def`}>\n          <path id={arcId} d={textArcPath} fill=\"none\" />\n        </defs>\n      );\n      \n      textElements.push(\n        <text key={`${arcId}-text`} fontSize={optimalFontSize} fill={color}>\n          <textPath href={`#${arcId}`} startOffset=\"50%\" textAnchor=\"middle\">\n            {texts[index]}\n          </textPath>\n        </text>\n      );\n    }\n  });\n  \n  // Add boundary lines\n  const boundaryElements = [\n    <line\n      key={`${sliceId}-boundary-1`}\n      x1={centerX}\n      y1={centerY}\n      x2={centerX + 150 * Math.cos(startRad)}\n      y2={centerY + 150 * Math.sin(startRad)}\n      stroke={debugColor}\n      strokeWidth=\"3\"\n    />,\n    <line\n      key={`${sliceId}-boundary-2`}\n      x1={centerX}\n      y1={centerY}\n      x2={centerX + 150 * Math.cos(endRad)}\n      y2={centerY + 150 * Math.sin(endRad)}\n      stroke={debugColor}\n      strokeWidth=\"3\"\n    />\n  ];\n  \n  return (\n    <g>\n      {pathElements}\n      {textElements}\n      {boundaryElements}\n    </g>\n  );\n};\n\n// Function to generate pair texts from WisdomUnits (for compatibility with existing code)\nexport const generatePairTextsFromWisdomUnits = (wisdomUnits: any[]) => {\n  const pairTexts: Record<number, any> = {};\n  \n  wisdomUnits.forEach((wu, index) => {\n    // Generate thesis labels\n    const thesisLabels = [];\n    if (wu.tPlus && wu.tPlus.statement) thesisLabels.push([wu.tPlus.statement, 'green']);\n    if (wu.t && wu.t.statement) thesisLabels.push([wu.t.statement, 'black']);\n    if (wu.tMinus && wu.tMinus.statement) thesisLabels.push([wu.tMinus.statement, 'red']);\n    \n    // Generate antithesis labels\n    const antithesisLabels = [];\n    if (wu.aPlus && wu.aPlus.statement) antithesisLabels.push([wu.aPlus.statement, 'green']);\n    if (wu.a && wu.a.statement) antithesisLabels.push([wu.a.statement, 'black']);\n    if (wu.aMinus && wu.aMinus.statement) antithesisLabels.push([wu.aMinus.statement, 'red']);\n    \n    // Only add if we have both sides\n    if (thesisLabels.length > 0 && antithesisLabels.length > 0) {\n      pairTexts[index] = {\n        thesis: thesisLabels,\n        antithesis: antithesisLabels\n      };\n    }\n  });\n  \n  return pairTexts;\n};\n\n// Default pair texts data (moved here to avoid circular dependencies)\nexport const defaultPairTexts = {\n  0: {\n    thesis: [\n      ['Strategic power projection', 'green'],\n      ['Putin initiates war', 'black'], \n      ['Destructive aggression', 'red']\n    ],\n    antithesis: [\n      ['Mutual understanding', 'green'],\n      ['Peace negotiations', 'black'],\n      ['Passive submission', 'red']\n    ]\n  },\n  1: {\n    thesis: [\n      ['Liberation and sovereignty protected', 'green'],\n      ['Ukraine resists invasion', 'black'],\n      ['Endless conflict and destruction', 'red']\n    ],\n    antithesis: [\n      ['Immediate peace achieved', 'green'],\n      ['Ukraine surrenders to invasion', 'black'],\n      ['Freedom and independence lost', 'red']\n    ]\n  },\n  2: {\n    thesis: [\n      ['Ukrainian victory approaches', 'green'],\n      ['Russian offensive weakens', 'black'],\n      ['Military resources drain rapidly', 'red']\n    ],\n    antithesis: [\n      ['Strategic military strength maintained', 'green'],\n      ['Russian military dominance persists', 'black'],\n      ['Total defeat inevitable', 'red']\n    ]\n  },\n  3: {\n    thesis: [\n      ['Freedom restored', 'green'],\n      ['Ukrainian victory approaches', 'black'],\n      ['Vengeance intensifies', 'red']\n    ],\n    antithesis: [\n      ['Stability maintained', 'green'],\n      ['Russian dominance persists', 'black'],\n      ['Oppression deepens', 'red']\n    ]\n  }\n}; ","import React from 'react';\nimport { \n  generatePairTextsFromWisdomUnits \n} from '../utils/SliceGenerator';\n\n// API service for the dialectical wheel API\nexport class WisdomService {\n  \n  // 1. Create a session\n  static async createSession(userMessage, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_message: userMessage\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Session created:', data);\n      return data; // { session_id: \"uuid-string\", user_message: \"...\" }\n    } catch (error) {\n      console.error('Error creating session:', error);\n      throw error;\n    }\n  }\n\n  // 2A. Auto-build a wheel\n  static async autoBuildWheel(sessionId, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}/wheel/auto`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          number_of_thoughts: numberOfThoughts,\n          component_length: componentLength\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Auto-built wheel:', data);\n      return data; // { wheels: [{ wisdom_units: [...] }] }\n    } catch (error) {\n      console.error('Error auto-building wheel:', error);\n      throw error;\n    }\n  }\n\n  // 2B. Manually create a wheel\n  static async createWheel(sessionId, wisdomUnitsData, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}/wheel`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          wisdom_units: wisdomUnitsData\n        })\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Created wheel:', data);\n      return data;\n    } catch (error) {\n      console.error('Error creating wheel:', error);\n      throw error;\n    }\n  }\n\n  // 3. Get wisdom units of a specific wheel\n  static async getWisdomUnits(sessionId, wheelId, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}/wheel/${wheelId}/wisdom-units`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Retrieved wisdom units:', data);\n      return data; // { wheel_id: 0, wisdom_units: [...] }\n    } catch (error) {\n      console.error('Error getting wisdom units:', error);\n      throw error;\n    }\n  }\n\n  // 4. Get wheel cycles with sequences\n  static async getWheelCycles(sessionId, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}/wheels/cycles/structured`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Retrieved wheel cycles:', data);\n      return data; // { cycles: [{ sequence: [...], probability: ..., ... }] }\n    } catch (error) {\n      console.error('Error getting wheel cycles:', error);\n      throw error;\n    }\n  }\n\n  // 5. Get session data directly\n  static async getSessionData(sessionId, baseUrl = '/api') {\n    try {\n      const response = await fetch(`${baseUrl}/session/${sessionId}`);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      console.log('Retrieved session data:', data);\n      return data; // Complete session data including wheels and cycles\n    } catch (error) {\n      console.error('Error getting session data:', error);\n      throw error;\n    }\n  }\n\n  // Convert API sequence format to our slice sequence format\n  static convertSequenceToSliceSequence(apiSequence) {\n    // API provides first half of sequence like [\"T1\", \"A2\", \"T3\"] \n    // DialecticalWheel will auto-generate opposites: [\"A1\", \"T2\", \"A3\"]\n    \n    return apiSequence.map(item => {\n      const type = item.startsWith('T') ? 'thesis' : 'antithesis';\n      const pairNumber = parseInt(item.slice(1)) - 1; // Convert T1->0, T2->1, A1->0, etc.\n      \n      return {\n        pair: pairNumber,\n        type: type\n      };\n    });\n  }\n\n  // Get the highest probability cycle sequence\n  static getBestCycleSequence(cyclesData) {\n    if (!cyclesData.cycles || cyclesData.cycles.length === 0) {\n      return null;\n    }\n    \n    // Find cycle with highest probability\n    const bestCycle = cyclesData.cycles.reduce((best, current) => \n      current.probability > best.probability ? current : best\n    );\n    \n    // Extract first half from the complete sequence\n    // If API gives [\"T1\", \"A2\", \"T3\", \"A1\", \"T2\", \"A3\"], take first 3: [\"T1\", \"A2\", \"T3\"]\n    const firstHalf = bestCycle.sequence.slice(0, bestCycle.sequence.length / 2);\n    \n    return {\n      sequence: this.convertSequenceToSliceSequence(firstHalf),\n      probability: bestCycle.probability,\n      causality_direction: bestCycle.causality_direction,\n      reasoning: bestCycle.reasoning,\n      argumentation: bestCycle.argumentation,\n      concepts: bestCycle.concepts,\n      rawSequence: bestCycle.sequence, // Keep full sequence for display\n      firstHalf: firstHalf // Keep first half for debugging\n    };\n  }\n\n  /**\n   * Transform API wisdom units to our internal format\n   * Now properly handles flipped wisdom units based on alias patterns\n   */\n  static transformApiWisdomUnits(apiWisdomUnits) {\n    return apiWisdomUnits.map((unit, index) => {\n      // Detect if this wisdom unit is flipped by checking aliases\n      // Normal: t_minus has T alias, a_minus has A alias\n      // Flipped: t_minus has A alias, a_minus has T alias\n      const isFlipped = unit.t_minus.alias && unit.t_minus.alias.startsWith('A');\n      \n      if (isFlipped) {\n        // Wisdom unit is flipped - thesis and antithesis are swapped\n        return {\n          tPlus: { statement: unit.a_plus.statement },\n          t: { statement: unit.a.statement }, \n          tMinus: { statement: unit.a_minus.statement },\n          aPlus: { statement: unit.t_plus.statement },\n          a: { statement: unit.t.statement },\n          aMinus: { statement: unit.t_minus.statement }\n        };\n      } else {\n        // Normal wisdom unit orientation\n        return {\n          tPlus: { statement: unit.t_plus.statement },\n          t: { statement: unit.t.statement },\n          tMinus: { statement: unit.t_minus.statement },\n          aPlus: { statement: unit.a_plus.statement },\n          a: { statement: unit.a.statement },\n          aMinus: { statement: unit.a_minus.statement }\n        };\n      }\n    });\n  }\n\n  // Complete workflow: Create session + auto-build wheel + get wisdom units\n  static async createSessionAndAutoBuildWheel(userMessage, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n    try {\n      // Step 1: Create session\n      const sessionData = await this.createSession(userMessage, baseUrl);\n      const sessionId = sessionData.session_id;\n\n      // Step 2: Auto-build wheel\n      const wheelData = await this.autoBuildWheel(sessionId, numberOfThoughts, componentLength, baseUrl);\n      \n      console.log('DEBUG: Raw wheel data received:', wheelData);\n      console.log('DEBUG: Number of wheels in response:', wheelData.wheels?.length || 0);\n      \n      // Return all wheels instead of just the first one\n      if (wheelData.wheels && wheelData.wheels.length > 0) {\n        const allWheels = wheelData.wheels.map((wheel, index) => {\n          console.log(`DEBUG: Processing wheel ${index + 1}:`, wheel);\n          const transformedUnits = this.transformApiWisdomUnits(wheel.wisdom_units);\n          console.log(`DEBUG: Transformed wisdom units for wheel ${index + 1}:`, transformedUnits);\n          \n          return {\n            wheelId: index,\n            wisdomUnits: transformedUnits,\n            rawWisdomUnits: wheel.wisdom_units\n          };\n        });\n        \n        console.log('DEBUG: All processed wheels:', allWheels);\n        \n        return {\n          sessionId,\n          wheels: allWheels,\n          selectedWheelIndex: 0, // Default to first wheel\n          rawData: wheelData\n        };\n      } else {\n        throw new Error('No wheels returned from auto-build');\n      }\n    } catch (error) {\n      console.error('Error in complete workflow:', error);\n      throw error;\n    }\n  }\n\n  // Complete workflow with cycles: Create session + auto-build wheel + get wisdom units + get cycles\n  static async createSessionAndAutoBuildWheelWithCycles(userMessage, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n    try {\n      // Step 1: Create session\n      const sessionData = await this.createSession(userMessage, baseUrl);\n      const sessionId = sessionData.session_id;\n\n      // Step 2: Auto-build wheel\n      const wheelData = await this.autoBuildWheel(sessionId, numberOfThoughts, componentLength, baseUrl);\n      \n      // Step 3: Get cycles data\n      const cyclesData = await this.getWheelCycles(sessionId, baseUrl);\n      const bestCycle = this.getBestCycleSequence(cyclesData);\n      \n      // Return all wheels instead of just the first one\n      if (wheelData.wheels && wheelData.wheels.length > 0) {\n        const allWheels = wheelData.wheels.map((wheel, index) => ({\n          wheelId: index,\n          wisdomUnits: this.transformApiWisdomUnits(wheel.wisdom_units),\n          rawWisdomUnits: wheel.wisdom_units\n        }));\n        \n        return {\n          sessionId,\n          wheels: allWheels,\n          selectedWheelIndex: 0, // Default to first wheel\n          sliceSequence: bestCycle?.sequence || null,\n          cycles: cyclesData,\n          bestCycle,\n          rawData: wheelData\n        };\n      } else {\n        throw new Error('No wheels returned from auto-build');\n      }\n    } catch (error) {\n      console.error('Error in complete workflow with cycles:', error);\n      throw error;\n    }\n  }\n\n  // Generate slice sequence from wisdom units order (the order IS the sequence)\n  static generateSequenceFromWisdomUnitsOrder(wisdomUnits) {\n    // The order of wisdom units in the array determines the sequence\n    // If we have [WU_A, WU_B, WU_C], that means sequence [T1, T2, T3]\n    return wisdomUnits.map((_, index) => ({\n      pair: index,\n      type: 'thesis' // First half is always thesis, wheel will auto-generate antithesis\n    }));\n  }\n\n  // Get pair texts for React component compatibility\n  static getPairTextsFromWisdomUnits(wisdomUnits) {\n    return generatePairTextsFromWisdomUnits(wisdomUnits);\n  }\n\n  // Cheaper workflow: Just get existing data from a session (no expensive creation)\n  static async getExistingSessionData(sessionId, baseUrl = '/api') {\n    try {\n      console.log('DEBUG: Getting existing data for session:', sessionId);\n      \n      // Single GET call to retrieve all session data\n      const sessionData = await this.getSessionData(sessionId, baseUrl);\n      \n      // Extract wheels data\n      if (!sessionData.wheels || sessionData.wheels.length === 0) {\n        throw new Error('No wheels found in session data');\n      }\n      \n      const allWheels = sessionData.wheels.map((wheel, index) => ({\n        wheelId: index,\n        wisdomUnits: this.transformApiWisdomUnits(wheel.wisdom_units),\n        rawWisdomUnits: wheel.wisdom_units\n      }));\n      \n      console.log(`DEBUG: Found ${allWheels.length} wheels from session data`);\n      \n      // Always fetch cycles explicitly to ensure we have the full data\n      let cycles = null;\n      let bestCycle = null;\n      \n      try {\n        console.log('DEBUG: Fetching cycles data explicitly for session:', sessionId);\n        cycles = await this.getWheelCycles(sessionId, baseUrl);\n        bestCycle = this.getBestCycleSequence(cycles);\n        console.log('DEBUG: Successfully retrieved cycles:', cycles?.cycles?.length || 0);\n      } catch (error) {\n        console.error('Failed to retrieve cycles data:', error);\n        // Fallback to session data if available\n        if (sessionData.cycles) {\n          console.log('DEBUG: Using cycles from session data as fallback');\n          cycles = sessionData.cycles;\n          bestCycle = this.getBestCycleSequence(sessionData.cycles);\n        }\n      }\n      \n      return {\n        sessionId,\n        wheels: allWheels,\n        selectedWheelIndex: 0,\n        sliceSequence: bestCycle?.sequence || null,\n        cycles,\n        bestCycle,\n        rawData: { wheels: sessionData.wheels }\n      };\n    } catch (error) {\n      console.error('Error getting existing session data:', error);\n      throw error;\n    }\n  }\n}\n\n// React hook for the complete API workflow\nexport function useDialecticalWheel(userMessage, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n  const [sessionId, setSessionId] = React.useState(null);\n  const [wheels, setWheels] = React.useState([]);\n  const [selectedWheelIndex, setSelectedWheelIndex] = React.useState(0);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [rawData, setRawData] = React.useState(null);\n\n  const createAndBuildWheel = React.useCallback(async () => {\n    if (!userMessage) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await WisdomService.createSessionAndAutoBuildWheel(\n        userMessage, \n        numberOfThoughts, \n        componentLength, \n        baseUrl\n      );\n      \n      setSessionId(result.sessionId);\n      setWheels(result.wheels);\n      setSelectedWheelIndex(result.selectedWheelIndex);\n      setRawData(result.rawData);\n      \n      console.log('DEBUG: useDialecticalWheel - wheels set to:', result.wheels);\n      console.log('DEBUG: useDialecticalWheel - wheels length:', result.wheels.length);\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userMessage, numberOfThoughts, componentLength, baseUrl]);\n\n  // Get current wheel data\n  const currentWheel = wheels[selectedWheelIndex] || null;\n  const wisdomUnits = currentWheel?.wisdomUnits || [];\n  const pairTexts = currentWheel ? WisdomService.getPairTextsFromWisdomUnits(currentWheel.wisdomUnits) : {};\n\n  return { \n    sessionId,\n    wheels,\n    selectedWheelIndex,\n    setSelectedWheelIndex,\n    currentWheel,\n    wisdomUnits, \n    pairTexts, \n    loading, \n    error, \n    rawData,\n    refetch: createAndBuildWheel \n  };\n}\n\n// React hook for the complete API workflow with cycles\nexport function useDialecticalWheelWithCycles(userMessage, numberOfThoughts = 3, componentLength = 7, baseUrl = '/api') {\n  const [sessionId, setSessionId] = React.useState(null);\n  const [wheels, setWheels] = React.useState([]);\n  const [selectedWheelIndex, setSelectedWheelIndex] = React.useState(0);\n  const [sliceSequence, setSliceSequence] = React.useState(null);\n  const [cycles, setCycles] = React.useState(null);\n  const [bestCycle, setBestCycle] = React.useState(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [rawData, setRawData] = React.useState(null);\n\n  const createAndBuildWheelWithCycles = React.useCallback(async () => {\n    if (!userMessage) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await WisdomService.createSessionAndAutoBuildWheelWithCycles(\n        userMessage, \n        numberOfThoughts, \n        componentLength, \n        baseUrl\n      );\n      \n      setSessionId(result.sessionId);\n      setWheels(result.wheels);\n      setSelectedWheelIndex(result.selectedWheelIndex);\n      setSliceSequence(result.sliceSequence);\n      setCycles(result.cycles);\n      setBestCycle(result.bestCycle);\n      setRawData(result.rawData);\n      \n      console.log('DEBUG: useDialecticalWheelWithCycles - wheels set to:', result.wheels);\n      console.log('DEBUG: useDialecticalWheelWithCycles - wheels length:', result.wheels.length);\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [userMessage, numberOfThoughts, componentLength, baseUrl]);\n\n  const getExistingData = React.useCallback(async (existingSessionId) => {\n    if (!existingSessionId) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await WisdomService.getExistingSessionData(existingSessionId, baseUrl);\n      \n      setSessionId(result.sessionId);\n      setWheels(result.wheels);\n      setSelectedWheelIndex(result.selectedWheelIndex);\n      setSliceSequence(result.sliceSequence);\n      setCycles(result.cycles);\n      setBestCycle(result.bestCycle);\n      setRawData(result.rawData);\n      \n      console.log('DEBUG: Retrieved existing data - wheels:', result.wheels.length);\n      \n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [baseUrl]);\n\n  const clearSession = React.useCallback(() => {\n    setSessionId(null);\n    setWheels([]);\n    setSelectedWheelIndex(0);\n    setSliceSequence(null);\n    setCycles(null);\n    setBestCycle(null);\n    setRawData(null);\n    setError(null);\n  }, []);\n\n  // Get current wheel data\n  const currentWheel = wheels[selectedWheelIndex] || null;\n  const wisdomUnits = currentWheel?.wisdomUnits || [];\n  const pairTexts = currentWheel ? WisdomService.getPairTextsFromWisdomUnits(currentWheel.wisdomUnits) : {};\n\n  return { \n    sessionId,\n    wheels,\n    selectedWheelIndex,\n    setSelectedWheelIndex,\n    currentWheel,\n    wisdomUnits, \n    pairTexts,\n    sliceSequence,\n    cycles,\n    bestCycle,\n    loading, \n    error, \n    rawData,\n    createNew: createAndBuildWheelWithCycles,\n    getExisting: getExistingData,\n    clearSession\n  };\n}\n\n// React hook for manual wheel creation\nexport function useManualWheel(sessionId, wisdomUnitsData, baseUrl = '/api') {\n  const [wheelData, setWheelData] = React.useState(null);\n  const [loading, setLoading] = React.useState(false);\n  const [error, setError] = React.useState(null);\n\n  const createWheel = React.useCallback(async () => {\n    if (!sessionId || !wisdomUnitsData) return;\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      const result = await WisdomService.createWheel(sessionId, wisdomUnitsData, baseUrl);\n      setWheelData(result);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [sessionId, wisdomUnitsData, baseUrl]);\n\n  return { \n    wheelData, \n    loading, \n    error, \n    createWheel \n  };\n} ","import { configureStore } from '@reduxjs/toolkit';\nimport dialecticalReducer from './dialecticalSlice';\n\nexport const store = configureStore({\n  reducer: {\n    dialectical: dialecticalReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],\n      },\n    }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch; ","import { useState, useEffect, useCallback } from 'react';\nimport { DynamicSlice } from './useWheelSlices';\n\ninterface DemoConnection {\n  fromId: string;\n  toId: string;\n  color: string;\n  strokeWidth: number;\n  label: string;\n}\n\n// New types for slice layer mapping\ntype SliceLayerCode = string; // e.g., \"T1\", \"T1+\", \"T1-\", \"A1\", \"A1+\", \"A1-\"\ntype LayerType = 'green' | 'white' | 'pink';\ntype SliceType = 'thesis' | 'antithesis';\n\ninterface SliceLayerMapping {\n  pairIndex: number;\n  sliceType: SliceType;\n  layerType: LayerType;\n  layerIndex: number;\n}\n\n// NEW: DOT Script types\ninterface DotEdgeAttributes {\n  color?: string;\n  weight?: number;\n  strokeWidth?: number;\n  label?: string;\n  style?: 'solid' | 'dashed' | 'dotted';\n}\n\ninterface DotEdge {\n  from: SliceLayerCode;\n  to: SliceLayerCode;\n  attributes: DotEdgeAttributes;\n}\n\ninterface DotScriptParseResult {\n  edges: DotEdge[];\n  errors: string[];\n}\n\nexport const useNodeConnections = (\n  dynamicSlices: DynamicSlice[],\n  title: string,\n  recordRef: React.RefObject<SVGGElement>\n) => {\n  const [showArrows, setShowArrows] = useState<boolean>(true);\n  const [demoConnections, setDemoConnections] = useState<DemoConnection[]>([]);\n\n  // Helper functions for layer node management and arrow connections\n  const getAllLayerNodes = useCallback(() => {\n    return document.querySelectorAll('.layer-node');\n  }, []);\n\n  const getLayerNodeById = useCallback((nodeId: string): Element | null => {\n    return document.querySelector(`[data-node-id=\"${nodeId}\"]`);\n  }, []);\n\n  const getLayerNodesForPair = useCallback((pairIndex: number): NodeListOf<Element> => {\n    return document.querySelectorAll(`[data-pair-index=\"${pairIndex}\"].layer-node`);\n  }, []);\n\n  const getLayerNodesByType = useCallback((layerType: string): NodeListOf<Element> => {\n    return document.querySelectorAll(`[data-layer-type=\"${layerType}\"].layer-node`);\n  }, []);\n\n  const getLayerNodeInfo = useCallback((nodeElement: HTMLElement | null) => {\n    if (!nodeElement || !nodeElement.dataset) return null;\n    \n    return {\n      nodeId: nodeElement.dataset.nodeId!,\n      sliceId: nodeElement.dataset.sliceId!,\n      pairIndex: parseInt(nodeElement.dataset.pairIndex!),\n      sliceType: nodeElement.dataset.sliceType!, // thesis or antithesis\n      layerIndex: parseInt(nodeElement.dataset.layerIndex!),\n      layerType: nodeElement.dataset.layerType! // green, white, or pink\n    };\n  }, []);\n\n  const getNodeCenter = useCallback((nodeElement: HTMLElement | null) => {\n    if (!nodeElement) return null;\n    \n    // Get the node's data attributes to calculate position geometrically\n    const nodeId = nodeElement.dataset.nodeId;\n    const sliceId = nodeElement.dataset.sliceId;\n    const layerIndex = parseInt(nodeElement.dataset.layerIndex || '0');\n    \n    // Validate required data attributes\n    if (!nodeId || !sliceId || isNaN(layerIndex)) {\n      console.warn('Missing or invalid data attributes on node:', nodeElement);\n      return null;\n    }\n    \n    // Find the corresponding slice to get its angle\n    const slice = dynamicSlices.find(s => s.id === sliceId);\n    if (!slice) {\n      console.warn('Could not find slice for node:', nodeId);\n      return null;\n    }\n    \n    // Validate layer index\n    if (isNaN(layerIndex) || layerIndex < 0 || layerIndex > 2) {\n      console.warn('Invalid layer index:', layerIndex);\n      return null;\n    }\n    \n    // Calculate the center based on the slice geometry\n    const cx = 200, cy = 200, radius = 150;\n    const layerRadii = [\n      radius * (0.3 + 0.7 * 0.5 / 3), // Green layer center\n      radius * (0.3 + 0.7 * 1.5 / 3), // White layer center  \n      radius * (0.3 + 0.7 * 2.5 / 3)  // Pink layer center\n    ];\n    \n    const layerRadius = layerRadii[layerIndex];\n    const angleRad = slice.angle * Math.PI / 180;\n    \n    return {\n      x: cx + layerRadius * Math.cos(angleRad),\n      y: cy + layerRadius * Math.sin(angleRad)\n    };\n  }, [dynamicSlices]);\n\n  // Function to connect two nodes\n  const connectNodes = useCallback((fromId: string, toId: string, color = '#0074d9', strokeWidth = 2) => {\n    const fromNode = getLayerNodeById(fromId) as HTMLElement | null;\n    const toNode = getLayerNodeById(toId) as HTMLElement | null;\n    \n    if (!fromNode || !toNode) {\n      console.warn(`Cannot connect nodes: ${fromId} or ${toId} not found`);\n      return null;\n    }\n    \n    const fromCenter = getNodeCenter(fromNode);\n    const toCenter = getNodeCenter(toNode);\n    \n    // Check if centers were calculated successfully\n    if (!fromCenter || !toCenter) {\n      console.warn(`Cannot calculate centers for nodes: ${fromId} -> ${toId}`);\n      return null;\n    }\n    \n    // Calculate control point for a curved arrow\n    const midX = (fromCenter.x + toCenter.x) / 2;\n    const midY = (fromCenter.y + toCenter.y) / 2;\n    \n    // Calculate the center of the wheel and distance from it\n    const wheelCenterX = 200;\n    const wheelCenterY = 200;\n    const distanceFromCenter = Math.sqrt(\n      Math.pow(midX - wheelCenterX, 2) + Math.pow(midY - wheelCenterY, 2)\n    );\n    \n    // Create control point that curves away from the center\n    const curveFactor = 0.3; // Adjust this to control curve intensity\n    const curveDirection = distanceFromCenter < 100 ? 1 : -1; // Curve outward if close to center, inward if far\n    \n    // Calculate perpendicular vector for the curve\n    const dx = toCenter.x - fromCenter.x;\n    const dy = toCenter.y - fromCenter.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    \n    if (length === 0) return null; // Same point\n    \n    // Perpendicular vector (rotated 90 degrees)\n    const perpX = -dy / length;\n    const perpY = dx / length;\n    \n    // Control point offset from midpoint\n    const curveOffset = length * curveFactor * curveDirection;\n    const controlX = midX + perpX * curveOffset;\n    const controlY = midY + perpY * curveOffset;\n    \n    // Create curved arrow path using quadratic Bezier curve\n    const arrow = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    const pathD = `M ${fromCenter.x},${fromCenter.y} Q ${controlX},${controlY} ${toCenter.x},${toCenter.y}`;\n    \n    arrow.setAttribute('d', pathD);\n    arrow.setAttribute('stroke', color);\n    arrow.setAttribute('stroke-width', strokeWidth.toString());\n    arrow.setAttribute('fill', 'none');\n    arrow.setAttribute('stroke-dasharray', '4 3'); // Dotted line pattern\n    arrow.setAttribute('stroke-linecap', 'round'); // Rounded line caps for better dotted appearance\n    \n    // Select appropriate arrow marker based on color\n    let markerUrl = 'url(#arrowhead)'; // default blue\n    if (color === '#FF6B35') markerUrl = 'url(#arrowhead-orange)';\n    else if (color === '#2196F3') markerUrl = 'url(#arrowhead-blue)';\n    else if (color === '#9C27B0') markerUrl = 'url(#arrowhead-purple)';\n    else if (color === '#4CAF50') markerUrl = 'url(#arrowhead-green)';\n    \n    arrow.setAttribute('marker-end', markerUrl);\n    arrow.classList.add('node-connection');\n    \n    // Add to SVG\n    recordRef.current?.appendChild(arrow);\n    \n    return arrow;\n  }, [getLayerNodeById, getNodeCenter, recordRef]);\n\n  // Function to toggle arrow visibility\n  const toggleArrows = useCallback(() => {\n    setShowArrows(!showArrows);\n    \n    // If hiding arrows, remove all existing connections immediately\n    if (showArrows) {\n      const existingConnections = document.querySelectorAll('.demo-connection, .node-connection');\n      existingConnections.forEach(conn => conn.remove());\n    }\n  }, [showArrows]);\n\n  // Demo function to create sample arrow connections\n  const createDemoConnections = useCallback(() => {\n    // Give the DOM a moment to render the nodes\n    setTimeout(() => {\n      if (!title.includes(\"Node System Demo\")) return; // Only for demo wheel\n      \n      // Clear any existing demo connections\n      const existingConnections = document.querySelectorAll('.demo-connection');\n      existingConnections.forEach(conn => conn.remove());\n      \n      // Don't create arrows if they should be hidden\n      if (!showArrows) return;\n      \n      console.log('Creating demo arrow connections...');\n      console.log('Current dynamicSlices:', dynamicSlices);\n      \n      // Get all available nodes first\n      const allNodes = getAllLayerNodes();\n      console.log('Available nodes:', Array.from(allNodes).map(n => ({\n        id: n.getAttribute('data-node-id'),\n        sliceId: n.getAttribute('data-slice-id'),\n        layerType: n.getAttribute('data-layer-type'),\n        layerIndex: n.getAttribute('data-layer-index')\n      })));\n      \n      if (allNodes.length === 0) {\n        console.warn('No layer nodes found for demo connections');\n        return;\n      }\n      \n      // If we have stored demo connections, recreate them\n      if (demoConnections.length > 0) {\n        console.log('Recreating stored demo connections:', demoConnections);\n        demoConnections.forEach(conn => {\n          const arrow = connectNodes(conn.fromId, conn.toId, conn.color, conn.strokeWidth);\n          if (arrow) {\n            arrow.classList.add('demo-connection');\n            arrow.setAttribute('data-demo-label', conn.label);\n            console.log(`Recreated connection: ${conn.label}`);\n          } else {\n            console.warn(`Failed to recreate connection: ${conn.label}`);\n          }\n        });\n        return;\n      }\n      \n      // Create initial demo connections and store them\n      const newDemoConnections: DemoConnection[] = [];\n      const nodeArray = Array.from(allNodes);\n      \n      // Example 1: Connect first green layer to first pink layer if they exist\n      const greenNodes = nodeArray.filter(n => n.getAttribute('data-layer-type') === 'green');\n      const pinkNodes = nodeArray.filter(n => n.getAttribute('data-layer-type') === 'pink');\n      \n      console.log('Green nodes found:', greenNodes.length);\n      console.log('Pink nodes found:', pinkNodes.length);\n      \n      if (greenNodes.length > 0 && pinkNodes.length > 0) {\n        const fromId = greenNodes[0].getAttribute('data-node-id')!;\n        const toId = pinkNodes[0].getAttribute('data-node-id')!;\n        console.log('Attempting to connect:', fromId, 'to', toId);\n        const connection1 = connectNodes(fromId, toId, '#FF6B35', 3);\n        if (connection1) {\n          connection1.classList.add('demo-connection');\n          connection1.setAttribute('data-demo-label', 'Green → Pink Layer');\n          newDemoConnections.push({ fromId, toId, color: '#FF6B35', strokeWidth: 3, label: 'Green → Pink Layer' });\n          console.log('Successfully created connection 1');\n        } else {\n          console.warn('Failed to create connection 1');\n        }\n      }\n      \n      // Example 2: Connect white layers if multiple exist\n      const whiteNodes = nodeArray.filter(n => n.getAttribute('data-layer-type') === 'white');\n      console.log('White nodes found:', whiteNodes.length);\n      \n      if (whiteNodes.length >= 2) {\n        const fromId = whiteNodes[0].getAttribute('data-node-id')!;\n        const toId = whiteNodes[1].getAttribute('data-node-id')!;\n        console.log('Attempting to connect white nodes:', fromId, 'to', toId);\n        const connection2 = connectNodes(fromId, toId, '#2196F3', 2);\n        if (connection2) {\n          connection2.classList.add('demo-connection');\n          connection2.setAttribute('data-demo-label', 'White → White Cross-Connection');\n          newDemoConnections.push({ fromId, toId, color: '#2196F3', strokeWidth: 2, label: 'White → White Cross-Connection' });\n          console.log('Successfully created connection 2');\n        } else {\n          console.warn('Failed to create connection 2');\n        }\n      }\n      \n      // Example 3: Connect thesis to antithesis if both exist\n      const thesisNodes = nodeArray.filter(n => n.getAttribute('data-slice-type') === 'thesis');\n      const antithesisNodes = nodeArray.filter(n => n.getAttribute('data-slice-type') === 'antithesis');\n      \n      console.log('Thesis nodes found:', thesisNodes.length);\n      console.log('Antithesis nodes found:', antithesisNodes.length);\n      \n      if (thesisNodes.length > 0 && antithesisNodes.length > 0) {\n        // Connect pink layer of thesis to green layer of antithesis\n        const thesisPink = thesisNodes.find(n => n.getAttribute('data-layer-type') === 'pink');\n        const antithesisGreen = antithesisNodes.find(n => n.getAttribute('data-layer-type') === 'green');\n        \n        if (thesisPink && antithesisGreen) {\n          const fromId = thesisPink.getAttribute('data-node-id')!;\n          const toId = antithesisGreen.getAttribute('data-node-id')!;\n          console.log('Attempting to connect thesis pink to antithesis green:', fromId, 'to', toId);\n          const connection3 = connectNodes(fromId, toId, '#9C27B0', 2);\n          if (connection3) {\n            connection3.classList.add('demo-connection');\n            connection3.setAttribute('data-demo-label', 'Thesis Pink → Antithesis Green');\n            newDemoConnections.push({ fromId, toId, color: '#9C27B0', strokeWidth: 2, label: 'Thesis Pink → Antithesis Green' });\n            console.log('Successfully created connection 3');\n          } else {\n            console.warn('Failed to create connection 3');\n          }\n        }\n      }\n      \n      // Store the demo connections for recreation later\n      setDemoConnections(newDemoConnections);\n      \n      console.log('Demo connections creation completed');\n      \n      // Log some example node information\n      if (nodeArray.length > 0) {\n        const sampleNode = nodeArray[0] as HTMLElement;\n        console.log('Sample node info:', getLayerNodeInfo(sampleNode));\n        console.log('Sample node center:', getNodeCenter(sampleNode));\n      }\n      \n    }, 2000); // Wait even longer for rendering\n  }, [\n    title, \n    showArrows, \n    dynamicSlices, \n    demoConnections, \n    getAllLayerNodes, \n    connectNodes, \n    getLayerNodeInfo, \n    getNodeCenter\n  ]);\n\n  // Create demo connections when component mounts or when slices change\n  useEffect(() => {\n    createDemoConnections();\n  }, [createDemoConnections]);\n\n  // NEW: Slice layer mapping functions\n  const parseSliceLayerCode = useCallback((code: SliceLayerCode): SliceLayerMapping | null => {\n    // Examples: \"T1\" -> Thesis pair 1, green layer\n    //          \"T1+\" -> Thesis pair 1, pink layer  \n    //          \"T1-\" -> Thesis pair 1, white layer\n    //          \"A2\" -> Antithesis pair 2, green layer\n    //          \"A2+\" -> Antithesis pair 2, pink layer\n    //          \"A2-\" -> Antithesis pair 2, white layer\n    \n    const match = code.match(/^([TA])(\\d+)([+\\-]?)$/);\n    if (!match) {\n      console.warn(`Invalid slice layer code: ${code}`);\n      return null;\n    }\n    \n    const [, typeChar, pairNum, modifier] = match;\n    const sliceType: SliceType = typeChar === 'T' ? 'thesis' : 'antithesis';\n    const pairIndex = parseInt(pairNum) - 1; // Convert 1-based to 0-based indexing\n    \n    // Determine layer type and index based on modifier\n    let layerType: LayerType;\n    let layerIndex: number;\n    \n    if (modifier === '+') {\n      layerType = 'green';\n      layerIndex = 0;\n    } else if (modifier === '-') {\n      layerType = 'pink';\n      layerIndex = 2;\n    } else {\n      layerType = 'white';\n      layerIndex = 1;\n    }\n    \n    return {\n      pairIndex,\n      sliceType,\n      layerType,\n      layerIndex\n    };\n  }, []);\n\n  const getNodeIdFromSliceLayerCode = useCallback((code: SliceLayerCode): string | null => {\n    const mapping = parseSliceLayerCode(code);\n    if (!mapping) return null;\n    \n    // Find the slice that matches the pair and type\n    const slice = dynamicSlices.find(s => \n      s.pair === mapping.pairIndex && s.type === mapping.sliceType\n    );\n    \n    if (!slice) {\n      console.warn(`No slice found for pair ${mapping.pairIndex} type ${mapping.sliceType}`);\n      return null;\n    }\n    \n    // Construct the node ID based on the slice ID and layer index\n    // Format: slice-{originalIndex}-layer-{layerIndex} or {sliceId}-layer-{layerIndex}\n    const baseId = slice.originalIndex !== undefined ? `slice-${slice.originalIndex}` : slice.id;\n    return `${baseId}-layer-${mapping.layerIndex}`;\n  }, [dynamicSlices, parseSliceLayerCode]);\n\n  const connectNodesBySliceLayerCode = useCallback((\n    fromCode: SliceLayerCode, \n    toCode: SliceLayerCode, \n    color = '#0074d9', \n    strokeWidth = 2\n  ) => {\n    const fromNodeId = getNodeIdFromSliceLayerCode(fromCode);\n    const toNodeId = getNodeIdFromSliceLayerCode(toCode);\n    \n    if (!fromNodeId || !toNodeId) {\n      console.warn(`Cannot create connection ${fromCode} -> ${toCode}: node IDs not found`);\n      console.warn(`From: ${fromCode} -> ${fromNodeId}, To: ${toCode} -> ${toNodeId}`);\n      return null;\n    }\n    \n    console.log(`Creating connection: ${fromCode} (${fromNodeId}) -> ${toCode} (${toNodeId})`);\n    return connectNodes(fromNodeId, toNodeId, color, strokeWidth);\n  }, [getNodeIdFromSliceLayerCode, connectNodes]);\n\n  const getAvailableSliceLayerCodes = useCallback((): SliceLayerCode[] => {\n    const codes: SliceLayerCode[] = [];\n    \n    // Group slices by pair to ensure we have complete pairs\n    const pairGroups: { [pairIndex: number]: { thesis?: DynamicSlice, antithesis?: DynamicSlice } } = {};\n    \n    dynamicSlices.forEach(slice => {\n      if (!pairGroups[slice.pair]) {\n        pairGroups[slice.pair] = {};\n      }\n      pairGroups[slice.pair][slice.type] = slice;\n    });\n    \n    // Generate codes for each complete pair\n    Object.entries(pairGroups).forEach(([pairIndexStr, pair]) => {\n      const pairIndex = parseInt(pairIndexStr);\n      const pairNumber = pairIndex + 1; // Convert to 1-based for codes\n      \n      if (pair.thesis) {\n        codes.push(`T${pairNumber}`);   // White layer\n        codes.push(`T${pairNumber}+`);  // Green layer\n        codes.push(`T${pairNumber}-`);  // Pink layer\n      }\n      \n      if (pair.antithesis) {\n        codes.push(`A${pairNumber}`);   // White layer\n        codes.push(`A${pairNumber}+`);  // Green layer\n        codes.push(`A${pairNumber}-`);  // Pink layer\n      }\n    });\n    \n    return codes.sort();\n  }, [dynamicSlices]);\n\n  // NEW: DOT Script parsing and execution\n  const parseDotScript = useCallback((dotScript: string): DotScriptParseResult => {\n    const edges: DotEdge[] = [];\n    const errors: string[] = [];\n    \n    // Remove comments and clean up the script\n    const cleanScript = dotScript\n      .split('\\n')\n      .map(line => line.replace(/\\/\\/.*$/, '').trim()) // Remove // comments\n      .filter(line => line.length > 0) // Remove empty lines\n      .join('\\n');\n    \n    // Regex to match edge definitions: nodeA -> nodeB [attributes]\n    const edgeRegex = /([A-Z]\\d+[+\\-]?)\\s*->\\s*([A-Z]\\d+[+\\-]?)(?:\\s*\\[(.*?)\\])?/g;\n    \n    let match;\n    while ((match = edgeRegex.exec(cleanScript)) !== null) {\n      const [, fromNode, toNode, attributesStr] = match;\n      \n      // Validate node codes\n      const fromMapping = parseSliceLayerCode(fromNode);\n      const toMapping = parseSliceLayerCode(toNode);\n      \n      if (!fromMapping) {\n        errors.push(`Invalid from node: ${fromNode}`);\n        continue;\n      }\n      \n      if (!toMapping) {\n        errors.push(`Invalid to node: ${toNode}`);\n        continue;\n      }\n      \n      // Parse attributes\n      const attributes: DotEdgeAttributes = {};\n      if (attributesStr) {\n        // Parse attribute string: color=red, weight=3, label=\"my label\"\n        const attrRegex = /(\\w+)\\s*=\\s*([^,]+)/g;\n        let attrMatch;\n        while ((attrMatch = attrRegex.exec(attributesStr)) !== null) {\n          const [, key, value] = attrMatch;\n          const cleanValue = value.replace(/[\"']/g, '').trim();\n          \n          switch (key.toLowerCase()) {\n            case 'color':\n              attributes.color = cleanValue;\n              break;\n            case 'weight':\n            case 'strokewidth':\n              attributes.strokeWidth = parseInt(cleanValue) || 2;\n              break;\n            case 'label':\n              attributes.label = cleanValue;\n              break;\n            case 'style':\n              if (['solid', 'dashed', 'dotted'].includes(cleanValue)) {\n                attributes.style = cleanValue as 'solid' | 'dashed' | 'dotted';\n              }\n              break;\n            default:\n              console.warn(`Unknown attribute: ${key}`);\n          }\n        }\n      }\n      \n      edges.push({\n        from: fromNode,\n        to: toNode,\n        attributes\n      });\n    }\n    \n    return { edges, errors };\n  }, [parseSliceLayerCode]);\n  \n  const executeDotScript = useCallback((dotScript: string, clearExisting = true): { \n    success: boolean; \n    created: number; \n    errors: string[];\n  } => {\n    console.log('=== Executing DOT Script ===');\n    console.log('Script:', dotScript);\n    \n    // Parse the script\n    const parseResult = parseDotScript(dotScript);\n    \n    if (parseResult.errors.length > 0) {\n      console.error('Parse errors:', parseResult.errors);\n      return { success: false, created: 0, errors: parseResult.errors };\n    }\n    \n    // Clear existing script-generated connections if requested\n    if (clearExisting) {\n      const existingConnections = document.querySelectorAll('.dot-script-connection');\n      existingConnections.forEach(conn => conn.remove());\n    }\n    \n    const availableCodes = getAvailableSliceLayerCodes();\n    let createdCount = 0;\n    const executionErrors: string[] = [];\n    \n    // Execute each edge\n    parseResult.edges.forEach((edge, index) => {\n      // Check if nodes are available\n      if (!availableCodes.includes(edge.from)) {\n        executionErrors.push(`Node not available: ${edge.from}`);\n        return;\n      }\n      \n      if (!availableCodes.includes(edge.to)) {\n        executionErrors.push(`Node not available: ${edge.to}`);\n        return;\n      }\n      \n      // Set default color based on edge index if not specified\n      const color = edge.attributes.color || [\n        '#FF6B35', '#2196F3', '#9C27B0', '#4CAF50', '#FF9800', '#E91E63'\n      ][index % 6];\n      \n      const strokeWidth = edge.attributes.strokeWidth || 2;\n      \n      // Create the connection\n      const arrow = connectNodesBySliceLayerCode(edge.from, edge.to, color, strokeWidth);\n      \n      if (arrow) {\n        arrow.classList.add('dot-script-connection');\n        \n        // Apply style attributes\n        if (edge.attributes.style === 'dashed') {\n          arrow.setAttribute('stroke-dasharray', '8 4');\n        } else if (edge.attributes.style === 'dotted') {\n          arrow.setAttribute('stroke-dasharray', '2 3');\n        } else {\n          arrow.setAttribute('stroke-dasharray', '4 3'); // default dotted\n        }\n        \n        if (edge.attributes.label) {\n          arrow.setAttribute('data-dot-label', edge.attributes.label);\n        }\n        \n        createdCount++;\n        console.log(`✅ Created edge: ${edge.from} -> ${edge.to}`, edge.attributes);\n      } else {\n        executionErrors.push(`Failed to create edge: ${edge.from} -> ${edge.to}`);\n      }\n    });\n    \n    console.log(`=== DOT Script Complete: ${createdCount} edges created ===`);\n    \n    return {\n      success: executionErrors.length === 0,\n      created: createdCount,\n      errors: executionErrors\n    };\n  }, [parseDotScript, getAvailableSliceLayerCodes, connectNodesBySliceLayerCode]);\n\n  // Demo function to show slice layer mapping in action\n  const createSliceLayerMappingDemo = useCallback(() => {\n    // Give the DOM a moment to render the nodes\n    setTimeout(() => {\n      console.log('=== Slice Layer Mapping Demo ===');\n      \n      const availableCodes = getAvailableSliceLayerCodes();\n      console.log('Available slice layer codes:', availableCodes);\n      \n      // Example connections using the new mapping system\n      const exampleConnections = [\n        { from: 'T1', to: 'A1+', color: '#FF6B35', label: 'T1 Green → A1 Pink' },\n        { from: 'T1-', to: 'T2', color: '#2196F3', label: 'T1 White → T2 Green' },\n        { from: 'A1', to: 'T2+', color: '#9C27B0', label: 'A1 Green → T2 Pink' }\n      ];\n      \n      // Clear existing demo connections\n      const existingConnections = document.querySelectorAll('.slice-layer-demo-connection');\n      existingConnections.forEach(conn => conn.remove());\n      \n      // Create example connections\n      exampleConnections.forEach(conn => {\n        if (availableCodes.includes(conn.from) && availableCodes.includes(conn.to)) {\n          const arrow = connectNodesBySliceLayerCode(conn.from, conn.to, conn.color, 2);\n          if (arrow) {\n            arrow.classList.add('slice-layer-demo-connection');\n            arrow.setAttribute('data-demo-label', conn.label);\n            console.log(`✅ Created: ${conn.label}`);\n          } else {\n            console.warn(`❌ Failed to create: ${conn.label}`);\n          }\n        } else {\n          console.warn(`❌ Skipped ${conn.label}: codes not available`);\n        }\n      });\n      \n      console.log('=== Demo Complete ===');\n    }, 1000);\n  }, [getAvailableSliceLayerCodes, connectNodesBySliceLayerCode]);\n  \n  // Demo function to show DOT script in action\n  const createDotScriptDemo = useCallback(() => {\n    setTimeout(() => {\n      const sampleDotScript = `\n        // Dialectical flow example\n        T1 -> A1+ [color=#FF6B35, label=\"thesis to antithesis\"]\n        T1- -> T2 [color=#2196F3, weight=3]\n        A1 -> T2+ [color=#9C27B0, style=dashed]\n        \n        // Cross connections\n        T2 -> A2- [color=#4CAF50]\n        A2 -> T1+ [color=#FF9800, style=dotted]\n      `;\n      \n      executeDotScript(sampleDotScript);\n    }, 1500);\n  }, [executeDotScript]);\n\n  // Expose helper functions for external use (if needed)\n  const nodeAPI = {\n    getAllLayerNodes,\n    getLayerNodeById,\n    getLayerNodesForPair,\n    getLayerNodesByType,\n    getLayerNodeInfo,\n    getNodeCenter,\n    connectNodes\n  };\n\n  return {\n    // State\n    showArrows,\n    demoConnections,\n    \n    // Functions\n    toggleArrows,\n    createDemoConnections,\n    \n    // Node API\n    nodeAPI,\n    \n    // NEW: Slice layer mapping API\n    sliceLayerAPI: {\n      parseSliceLayerCode,\n      getNodeIdFromSliceLayerCode,\n      connectNodesBySliceLayerCode,\n      getAvailableSliceLayerCodes,\n      createSliceLayerMappingDemo\n    },\n    \n    // NEW: DOT Script API\n    dotScriptAPI: {\n      parseDotScript,\n      executeDotScript,\n      createDotScriptDemo\n    }\n  };\n};\n\nexport type { \n  DemoConnection, \n  SliceLayerCode, \n  SliceLayerMapping, \n  LayerType, \n  SliceType,\n  DotEdgeAttributes,\n  DotEdge,\n  DotScriptParseResult\n}; ","import { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { defaultPairTexts } from '../../../utils/SliceGenerator';\nimport { SequenceWithLabels } from './useWheelSequence';\n\n// Type definitions\ninterface DynamicSlice {\n  id: string;\n  angle: number;\n  width: number;\n  label: string;\n  pair: number;\n  type: 'thesis' | 'antithesis';\n  focused?: boolean;\n  detailed?: boolean;\n  originalIndex?: number;\n  svgContent?: string;\n}\n\ninterface DetailedSlices {\n  [key: number]: {\n    thesis: string;\n    antithesis: string;\n  };\n}\n\ninterface PairTexts {\n  [key: number]: {\n    thesis: string[][];\n    antithesis: string[][];\n  };\n}\n\ninterface SliceClickData {\n  textX: number;\n  textY: number;\n  fontSize: number;\n  label: string;\n  pairIndex: number;\n  sliceType: 'thesis' | 'antithesis';\n  layers: Array<{\n    pathD: string;\n    fill: string;\n  }>;\n}\n\nexport const useWheelSlices = (\n  sequenceWithLabels: SequenceWithLabels[],\n  normalSliceAngle: number,\n  focusedSliceAngle: number,\n  unfocusedSliceAngle: number,\n  rotation: number,\n  setRotation: (rotation: number) => void,\n  pairTexts: PairTexts | null = null,\n  detailedSlices: DetailedSlices = {}\n) => {\n  const [focusedPair, setFocusedPair] = useState<number | null>(null);\n  const [dynamicSlices, setDynamicSlices] = useState<DynamicSlice[]>([]);\n\n  // Create slice layers (the expensive part) - memoized separately\n  const createSliceLayers = useCallback((sliceWidth: number) => {\n    const cx = 200, cy = 200, radius = 150;\n    const halfAngle = sliceWidth / 2;\n    \n    const toRadians = (deg: number): number => deg * Math.PI / 180;\n    \n    // Create layered rings like detailed slices\n    const layerColors = [\"#C6E5B3\", \"#FFFFFF\", \"#F9C6CC\"]; // green, white, pink\n    const layers = [];\n    \n    // Create three concentric ring layers at angle 0 (will be rotated later)\n    for (let layer = 0; layer < 3; layer++) {\n      const innerRadius = radius * (0.3 + 0.7 * layer / 3);\n      const outerRadius = radius * (0.3 + 0.7 * (layer + 1) / 3);\n      \n      const startAngleRad = toRadians(-halfAngle);\n      const endAngleRad = toRadians(halfAngle);\n      \n      const innerX1 = cx + innerRadius * Math.cos(startAngleRad);\n      const innerY1 = cy + innerRadius * Math.sin(startAngleRad);\n      const innerX2 = cx + innerRadius * Math.cos(endAngleRad);\n      const innerY2 = cy + innerRadius * Math.sin(endAngleRad);\n      \n      const outerX1 = cx + outerRadius * Math.cos(startAngleRad);\n      const outerY1 = cy + outerRadius * Math.sin(startAngleRad);\n      const outerX2 = cx + outerRadius * Math.cos(endAngleRad);\n      const outerY2 = cy + outerRadius * Math.sin(endAngleRad);\n      \n      const largeArc = sliceWidth > 180 ? 1 : 0;\n      \n      const pathD = `M ${outerX1},${outerY1} \n                     A ${outerRadius},${outerRadius} 0 ${largeArc},1 ${outerX2},${outerY2} \n                     L ${innerX2},${innerY2} \n                     A ${innerRadius},${innerRadius} 0 ${largeArc},0 ${innerX1},${innerY1} Z`;\n      \n      layers.push({\n        pathD,\n        fill: layerColors[layer]\n      });\n    }\n    \n    return layers;\n  }, []);\n\n  // Create clickable slice function (matches the JavaScript createClickableSlice)\n  const createClickableSlice = useCallback((\n    centerAngle: number, \n    sliceWidth: number, \n    label: string, \n    pairIndex: number, \n    sliceType: 'thesis' | 'antithesis'\n  ): SliceClickData => {\n    console.log(`🔥 EXPENSIVE: createClickableSlice called for ${label} (angle: ${centerAngle}°)`);\n    const cx = 200, cy = 200, radius = 150;\n    \n    // Get cached layers or create new ones\n    const layers = createSliceLayers(sliceWidth);\n    \n    // Calculate text position (center of the layered slice)\n    const textRadius = (radius * 0.3 + radius) / 2;\n    const textAngle = centerAngle * Math.PI / 180;\n    const textX = cx + textRadius * Math.cos(textAngle);\n    const textY = cy + textRadius * Math.sin(textAngle);\n    \n    // Dynamic font sizing\n    const fontSize = sliceWidth >= normalSliceAngle ? Math.min(20, sliceWidth / 3) : Math.min(14, sliceWidth / 2);\n    \n    return {\n      layers,\n      textX,\n      textY,\n      fontSize,\n      label,\n      pairIndex,\n      sliceType\n    };\n  }, [normalSliceAngle, createSliceLayers]);\n\n  // Persistent cache for slice layers (the expensive computation)\n  const sliceLayersCacheRef = useRef(new Map<number, any>());\n\n  // Memoize slice layers\n  const memoizedCreateSliceLayers = useCallback((sliceWidth: number) => {\n    const cache = sliceLayersCacheRef.current;\n    \n    if (cache.has(sliceWidth)) {\n      return cache.get(sliceWidth);\n    }\n    \n    console.log(`🔥 EXPENSIVE: Computing slice layers for width ${sliceWidth}°`);\n    const layers = createSliceLayers(sliceWidth);\n    cache.set(sliceWidth, layers);\n    return layers;\n  }, [createSliceLayers]);\n\n  // Memoize slice data with intelligent caching\n  const memoizedSliceData = useMemo(() => {\n    console.log(`🚀 MEMOIZATION: Processing ${dynamicSlices.length} slices`);\n    const sliceDataMap = new Map();\n    let layerCacheHits = 0;\n    let layerCacheMisses = 0;\n    \n    dynamicSlices.forEach(slice => {\n      if (!slice.detailed) {\n        // Get cached layers or create new ones\n        const layersWereCached = sliceLayersCacheRef.current.has(slice.width);\n        const layers = memoizedCreateSliceLayers(slice.width);\n        \n        if (layersWereCached) {\n          layerCacheHits++;\n        } else {\n          layerCacheMisses++;\n        }\n        \n        // Calculate position-dependent properties\n        const cx = 200, cy = 200, radius = 150;\n        const textRadius = (radius * 0.3 + radius) / 2;\n        const textAngle = slice.angle * Math.PI / 180;\n        const textX = cx + textRadius * Math.cos(textAngle);\n        const textY = cy + textRadius * Math.sin(textAngle);\n        \n        // Dynamic font sizing\n        const fontSize = slice.width >= normalSliceAngle ? Math.min(20, slice.width / 3) : Math.min(14, slice.width / 2);\n        \n        sliceDataMap.set(slice.id, {\n          layers,\n          textX,\n          textY,\n          fontSize,\n          label: slice.label,\n          pairIndex: slice.pair,\n          sliceType: slice.type\n        });\n      }\n    });\n    \n    console.log(`✅ MEMOIZATION: Layer cache hits: ${layerCacheHits}, misses: ${layerCacheMisses}, total layer cache: ${sliceLayersCacheRef.current.size}`);\n    return sliceDataMap;\n  }, [dynamicSlices, memoizedCreateSliceLayers, normalSliceAngle]);\n\n  // Create equal slices function (matches the JavaScript createEqualSlices)\n  const createEqualSlices = useCallback((): void => {\n    const slices: DynamicSlice[] = [];\n    sequenceWithLabels.forEach((slice, index) => {\n      const angle = index * normalSliceAngle;\n      slices.push({\n        id: `slice-${index}`,\n        angle,\n        width: normalSliceAngle,\n        label: slice.label,\n        pair: slice.pair,\n        type: slice.type\n      });\n    });\n    setDynamicSlices(slices);\n  }, [sequenceWithLabels, normalSliceAngle]);\n\n  // Focus on pair function (simplified version of the JavaScript focusOnPair)\n  const focusOnPair = useCallback((\n    pairIndex: number, \n    clickedSliceType: 'thesis' | 'antithesis' | null = null, \n    targetVisualAngle: number | null = null\n  ): void => {\n    setFocusedPair(pairIndex);\n    \n    // Find the thesis index - needed throughout the function\n    const focusedThesisIndex = sequenceWithLabels.findIndex(s => s.pair === pairIndex && s.type === 'thesis');\n    \n    // Calculate rotation to position the clicked slice at the same visual angle\n    if (clickedSliceType && targetVisualAngle !== null) {\n      // Determine where the clicked slice will be positioned in the focused layout  \n      let focusedPosition;\n      if (clickedSliceType === 'thesis') {\n        focusedPosition = 0; // Thesis goes to 0° in focused layout\n      } else {\n        focusedPosition = 180; // Antithesis goes to 180° in focused layout\n      }\n      \n      // We want: focusedPosition + newRotation = targetVisualAngle\n      // Therefore: newRotation = targetVisualAngle - focusedPosition\n      const newRotation = (targetVisualAngle - focusedPosition + 360) % 360;\n      console.log(`Setting rotation to ${newRotation}° to keep ${clickedSliceType} at visual angle ${targetVisualAngle}°`);\n      setRotation(newRotation);\n    } else {\n      // Fallback to old behavior\n      const originalThesisAngle = focusedThesisIndex * normalSliceAngle;\n      setRotation(rotation + originalThesisAngle);\n    }\n    \n    // Calculate gap positions for unfocused slices\n    const halfFocused = focusedSliceAngle / 2;\n    const gap1Start = halfFocused;\n    const gap1End = 180 - halfFocused;\n    const gap1Size = gap1End - gap1Start;\n    \n    const gap2Start = 180 + halfFocused;\n    const gap2End = 360 - halfFocused;\n    const gap2Size = gap2End - gap2Start;\n    \n    const numUnfocused = 2 * sequenceWithLabels.length / 2 - 2;\n    const slicesPerGap = Math.floor(numUnfocused / 2);\n    const extraSlices = numUnfocused % 2;\n    \n    const positions = [];\n    \n    // Distribute slices in gap 1\n    for (let i = 0; i < slicesPerGap + extraSlices; i++) {\n      const position = gap1Start + (gap1Size / (slicesPerGap + extraSlices)) * (i + 0.5);\n      positions.push(position);\n    }\n    \n    // Distribute slices in gap 2\n    for (let i = 0; i < slicesPerGap; i++) {\n      const position = gap2Start + (gap2Size / slicesPerGap) * (i + 0.5);\n      positions.push(position);\n    }\n    \n    // Create new slice configuration\n    const newSlices: DynamicSlice[] = [];\n    \n    // Find the antithesis index (needed for unfocused slices logic)\n    const focusedAntithesisIndex = sequenceWithLabels.findIndex(s => s.pair === pairIndex && s.type === 'antithesis');\n    \n    // Always generate detailed slices when focusing (using defaultPairTexts)\n    const usePairTexts = pairTexts || defaultPairTexts;\n    \n    // Only use provided detailed slices if they exist for this specific pair\n    const hasProvidedDetailedSlices = detailedSlices[pairIndex] && \n                                     detailedSlices[pairIndex].thesis && \n                                     detailedSlices[pairIndex].antithesis;\n    \n    if (hasProvidedDetailedSlices) {\n      // Use provided detailed slices (SVG strings from prop)\n      console.log('Using provided detailed slices for pair', pairIndex);\n      // Add logic here if needed for provided detailed slices\n    } else if (usePairTexts[pairIndex as keyof typeof usePairTexts]) {\n      // Generate detailed slices using defaultPairTexts and React components\n      console.log('Generating detailed slices for pair', pairIndex, 'using defaultPairTexts');\n      \n      // Find the original slice IDs to preserve identity\n      const originalThesisSlice = sequenceWithLabels[focusedThesisIndex];\n      const originalAntithesisSlice = sequenceWithLabels[focusedAntithesisIndex];\n      const originalThesisSliceId = `slice-${focusedThesisIndex}`;\n      const originalAntithesisSliceId = `slice-${focusedAntithesisIndex}`;\n      \n      // Use detailed slices at 0° and 180° to match original HTML pattern\n      newSlices.push({\n        id: originalThesisSliceId, // Preserve original ID\n        angle: 0,\n        width: focusedSliceAngle,\n        label: originalThesisSlice.label,\n        pair: pairIndex,\n        type: 'thesis' as const,\n        focused: true,\n        detailed: true,\n        originalIndex: focusedThesisIndex, // Track original position\n        // No more svgContent - we'll use React component directly\n      });\n      \n      newSlices.push({\n        id: originalAntithesisSliceId, // Preserve original ID\n        angle: 180,\n        width: focusedSliceAngle,\n        label: originalAntithesisSlice.label,\n        pair: pairIndex,\n        type: 'antithesis' as const,\n        focused: true,\n        detailed: true,\n        originalIndex: focusedAntithesisIndex, // Track original position\n        // No more svgContent - we'll use React component directly\n      });\n      \n      console.log('Created detailed slices for pair', pairIndex, ':', newSlices.filter(s => s.detailed));\n    } else {\n      // Fallback to simple focused slices if no text data available\n      console.log('No text data available for pair', pairIndex, ', using simple slices');\n      sequenceWithLabels.forEach((slice, index) => {\n        if (slice.pair === pairIndex) {\n          const originalSliceId = `slice-${index}`;\n          if (slice.type === 'thesis') {\n            newSlices.push({\n              id: originalSliceId, // Preserve original ID\n              angle: 0,\n              width: focusedSliceAngle,\n              label: slice.label,\n              pair: slice.pair,\n              type: slice.type as 'thesis',\n              focused: true,\n              originalIndex: index\n            });\n          } else {\n            newSlices.push({\n              id: originalSliceId, // Preserve original ID\n              angle: 180,\n              width: focusedSliceAngle,\n              label: slice.label,\n              pair: slice.pair,\n              type: slice.type as 'antithesis',\n              focused: true,\n              originalIndex: index\n            });\n          }\n        }\n      });\n    }\n    \n    // Add unfocused slices maintaining sequence order (like HTML version)\n    let currentGapIndex = 0;\n    \n    // Walk around the circle starting from the focused thesis\n    for (let offset = 1; offset < sequenceWithLabels.length && currentGapIndex < positions.length; offset++) {\n      const checkIndex = (focusedThesisIndex + offset) % sequenceWithLabels.length;\n      \n      // Skip the focused antithesis\n      if (checkIndex === focusedAntithesisIndex) continue;\n      \n      // Place this unfocused slice maintaining original sequence order\n      const slice = sequenceWithLabels[checkIndex];\n      const position = positions[currentGapIndex];\n      const originalSliceId = `slice-${checkIndex}`; // Preserve original ID\n      \n      newSlices.push({\n        id: originalSliceId, // Use original slice ID\n        angle: position,\n        width: unfocusedSliceAngle,\n        label: slice.label,\n        pair: slice.pair,\n        type: slice.type as 'thesis' | 'antithesis',\n        focused: false,\n        originalIndex: checkIndex // Track original position\n      });\n      \n      currentGapIndex++;\n    }\n    \n    console.log('Final dynamic slices:', newSlices);\n    setDynamicSlices(newSlices);\n  }, [\n    sequenceWithLabels, \n    focusedSliceAngle, \n    unfocusedSliceAngle, \n    normalSliceAngle, \n    rotation, \n    setRotation, \n    pairTexts, \n    detailedSlices\n  ]);\n\n  // Handle slice click (matches the JavaScript click handlers)\n  const handleSliceClick = useCallback((pairIndex: number): void => {\n    console.log(`Clicked pair ${pairIndex}`);\n    if (focusedPair === pairIndex) {\n      // Unfocus: find the clicked focused slice and preserve its visual position\n      const clickedFocusedSlice = dynamicSlices.find(s => s.pair === pairIndex);\n      if (clickedFocusedSlice) {\n        // Current visual angle where the focused slice appears\n        const currentVisualAngle = (clickedFocusedSlice.angle + rotation) % 360;\n        console.log(`Unfocusing slice at visual angle: ${currentVisualAngle}°`);\n        \n        // Reset to equal slices first\n        setFocusedPair(null);\n        createEqualSlices();\n        \n        // Calculate where this slice will be in the equal layout\n        const sliceInEqualLayout = sequenceWithLabels.find(s => s.pair === pairIndex && s.type === clickedFocusedSlice.type);\n        if (sliceInEqualLayout) {\n          const sliceIndexInEqual = sequenceWithLabels.indexOf(sliceInEqualLayout);\n          const equalLayoutAngle = sliceIndexInEqual * normalSliceAngle;\n          \n          // Calculate rotation to put the equal slice at the same visual angle\n          // We want: equalLayoutAngle + newRotation = currentVisualAngle\n          const newRotation = (currentVisualAngle - equalLayoutAngle + 360) % 360;\n          console.log(`Setting rotation to ${newRotation}° to keep slice at visual angle ${currentVisualAngle}°`);\n          setRotation(newRotation);\n        }\n      } else {\n        // Fallback to simple unfocus\n        setFocusedPair(null);\n        createEqualSlices();\n      }\n    } else {\n      // Find any slice from this pair to get its current visual position\n      const pairSlice = dynamicSlices.find(s => s.pair === pairIndex);\n      if (pairSlice) {\n        // Current visual angle where the slice appears (this is what we want to preserve)\n        const clickedVisualAngle = (pairSlice.angle + rotation) % 360;\n        console.log(`Slice clicked at visual angle: ${clickedVisualAngle}°`);\n        \n        // Focus on clicked pair, positioning it at the same visual angle\n        focusOnPair(pairIndex, pairSlice.type, clickedVisualAngle);\n      } else {\n        // Fallback to old behavior if slice not found\n        focusOnPair(pairIndex);\n      }\n    }\n  }, [focusedPair, dynamicSlices, rotation, createEqualSlices, sequenceWithLabels, normalSliceAngle, setRotation, focusOnPair]);\n\n  // Touch handlers for slice clicks\n  const handleSliceTouchStart = useCallback((e: React.TouchEvent<SVGElement>, pairIndex: number): void => {\n    e.stopPropagation();\n    const touch = e.touches[0];\n    const touchStartTime = Date.now();\n    const touchStartPos = { x: touch.clientX, y: touch.clientY };\n    \n    // Store touch data on the target element for tracking\n    (e.target as any)._touchData = { startTime: touchStartTime, startPos: touchStartPos, pairIndex };\n  }, []);\n\n  const handleSliceTouchEnd = useCallback((e: React.TouchEvent<SVGElement>, pairIndex: number): void => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (!(e.target as any)._touchData) return;\n    \n    const touchDuration = Date.now() - (e.target as any)._touchData.startTime;\n    const touch = e.changedTouches[0];\n    const touchEndPos = { x: touch.clientX, y: touch.clientY };\n    \n    const distance = Math.sqrt(\n      Math.pow(touchEndPos.x - (e.target as any)._touchData.startPos.x, 2) + \n      Math.pow(touchEndPos.y - (e.target as any)._touchData.startPos.y, 2)\n    );\n\n    // If it's a quick tap with minimal movement, treat as click\n    if (touchDuration < 300 && distance < 20) {\n      console.log(`Touch clicked ${(e.target as any)._touchData.pairIndex}`);\n      handleSliceClick((e.target as any)._touchData.pairIndex);\n    }\n    \n    delete (e.target as any)._touchData;\n  }, [handleSliceClick]);\n\n  // Initialize with equal slices\n  useEffect(() => {\n    createEqualSlices();\n  }, [createEqualSlices]);\n\n  // Reset focused pair when wheel data changes (different wheel selected)\n  useEffect(() => {\n    setFocusedPair(null);\n  }, [sequenceWithLabels, pairTexts]);\n\n  const reset = useCallback(() => {\n    setFocusedPair(null);\n    createEqualSlices();\n  }, [createEqualSlices]);\n\n  return {\n    // State\n    focusedPair,\n    dynamicSlices,\n    memoizedSliceData,\n    \n    // Functions\n    handleSliceClick,\n    handleSliceTouchStart,\n    handleSliceTouchEnd,\n    createEqualSlices,\n    focusOnPair,\n    reset\n  };\n};\n\nexport type { DynamicSlice, DetailedSlices, PairTexts, SliceClickData }; "],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialData","T1","statement","positive","negative","T2","T3","T4","A1","A2","A3","A4","initialState","data","stepMode","isActive","currentStep","totalSteps","arrows","visible","connections","rotation","history","historyIndex","dialecticalSlice","createSlice","name","reducers","updateEntry","state","action","_action$payload","payload","id","entry","slice","push","_objectSpread","length","addEntry","_action$payload2","removeEntry","undo","redo","setStepMode","_action$payload3","undefined","stepForward","stepBackward","setArrowsVisible","updateArrowConnections","setRotation","setDialecticalData","reorderEntries","newOrder","newData","forEach","key","Object","keys","_dialecticalSlice$act","actions","reducer","StepControls","_ref","chart","dispatch","dialectical","useEffect","updateStepInfo","getCurrentStepInfo","info","current","total","error","console","handleStartStepMode","startStepMode","handleStepForward","handleResetToFull","resetToFull","handleRotationChange","e","degrees","parseInt","target","value","radians","Math","PI","rotate","handleRotationReset","getCounterText","concat","_jsxs","style","display","flexDirection","alignItems","margin","padding","border","borderRadius","background","children","_jsx","marginTop","justifyContent","gap","marginBottom","onClick","disabled","color","cursor","fontWeight","htmlFor","type","min","max","step","onChange","width","minWidth","fontFamily","fontSize","parseArrowConnections","dotScript","dialecticalData","lines","split","_iterator","_createForOfIteratorHelper","_step","s","n","done","line","trim","match","_match","_slicedToArray","from","to","parseUnit","unit","endsWith","unitId","ringType","fromParsed","toParsed","fromRing","toRing","err","f","ArrowControls","arrowsVisible","arrowConnections","_useState","useState","_useState2","arrowStepMode","setArrowStepMode","_useState3","_useState4","currentArrowStep","setCurrentArrowStep","_useState5","_useState6","parsedArrowConnections","setParsedArrowConnections","_useState7","_useState8","currentArrowInfo","setCurrentArrowInfo","parsed","log","updateArrowStepUI","totalArrows","getArrowColor","conn","fromIsThesis","startsWith","toIsThesis","drawArrowsUpToStep","clearArrows","drawArrow","connectionsToShow","index","delay","drawNextArrow","drawAllCurrentArrows","handleStartArrowStepMode","success","prev","handleStepBackward","newStep","handleShowAllArrows","handleToggleArrows","handleRedrawArrows","handleUpdateConnections","handleConnectionsChange","getArrowCounterText","maxWidth","flexWrap","textAlign","minHeight","fontStyle","height","resize","join","DialecticalWheel","chartRef","useRef","module","setModule","setChart","runtime","setRuntime","Runtime","main","notebook","_Inspector","_class","node","_classCallCheck","_callSuper","_inherits","_createClass","fulfilled","_superPropGet","Inspector","dispose","redefine","warn","className","ref","ExploreComponent","_currentApiCycle$rawS","userMessage","wisdomUnits","currentApiCycle","onEdit","currentUnitIndex","setCurrentUnitIndex","currentUnit","handlePrevious","handleNext","getComponentCards","_unit$t","_unit$tPlus","_unit$tMinus","_unit$a","_unit$aPlus","_unit$aMinus","cards","t","text","label","textColor","tPlus","tMinus","a","aPlus","aMinus","React","createElement","lineHeight","componentCards","backgroundColor","flex","filter","card","map","marginLeft","_","transition","rawSequence","probability","toFixed","DataEditor","_dialecticalData$T","draggedItem","setDraggedItem","dragOverItem","setDragOverItem","canUndo","canRedo","dataEntries","entries","updateT4Statement","addNewDialecticalPair","newPairNumber","handleUndo","handleRedo","handleRemoveEntry","window","confirm","handleDragStart","dataTransfer","effectAllowed","setData","handleDragOver","preventDefault","dropEffect","handleDragLeave","handleDrop","targetId","currentOrder","draggedIndex","indexOf","targetIndex","splice","handleDragEnd","maxHeight","overflowY","_ref2","draggable","onDragStart","onDragOver","onDragLeave","onDrop","onDragEnd","transform","opacity","WHEEL_CONFIG","DIMENSIONS","CENTER_X","CENTER_Y","RADIUS","CENTER_CIRCLE_RADIUS","SLICE_INNER_RADIUS_RATIO","SLICE_OUTER_RADIUS_RATIO","COLORS","LAYER_COLORS","BOUNDARY_LINES","TYPOGRAPHY","SLICE_LAYERS","SLICES","DEFAULT_ANGLE","STROKES","BOUNDARY_WIDTH","wrapTextForArc","arcLength","avgCharWidth","maxCharsPerLine","floor","words","currentLine","word","testLine","substring","calculateOptimalFontSize","maxFontSize","minFontSize","arguments","longestLine","apply","_toConsumableArray","toRadians","deg","SliceAtAngle","sliceData","sliceId","_ref$angle","angle","_ref$cx","cx","_ref$cy","cy","_ref$radius","radius","_ref$sliceAngle","sliceAngle","_ref$layerColors","layerColors","_ref$fontSizes","fontSizes","_ref$showBoundaries","showBoundaries","_ref$pairIndex","pairIndex","_ref$sliceType","sliceType","originalSliceIndex","labels","nLabels","colors","fonts","halfAngle","layerElements","layer","innerRadius","outerRadius","startAngleRad","endAngleRad","innerX1","cos","innerY1","sin","innerX2","innerY2","outerX1","outerY1","outerX2","outerY2","largeArc","pathD","layerType","nodeId","d","fill","textElements","_loop","j","_labels$j","clearanceFactor","textRadius","arcLengthRadians","optimalFontSize","wrappedLines","lineSpacing","totalHeight","startRadius","lineIndex","currentRadius","arcStartX","arcStartY","arcEndX","arcEndY","arcId","arcPath","href","startOffset","textAnchor","boundaryElements","boundaryX1","boundaryY1","boundaryX2","boundaryY2","x1","y1","x2","y2","stroke","strokeWidth","generatePairTextsFromWisdomUnits","pairTexts","wu","thesisLabels","antithesisLabels","thesis","antithesis","defaultPairTexts","WisdomService","_createSession","_asyncToGenerator","_regenerator","m","_callee","baseUrl","response","_args","_t","w","_context","p","fetch","method","headers","body","JSON","stringify","user_message","v","ok","Error","status","json","createSession","_x","_autoBuildWheel","_callee2","sessionId","numberOfThoughts","componentLength","_args2","_t2","_context2","number_of_thoughts","component_length","autoBuildWheel","_x2","_createWheel","_callee3","wisdomUnitsData","_args3","_t3","_context3","wisdom_units","createWheel","_x3","_x4","_getWisdomUnits","_callee4","wheelId","_args4","_t4","_context4","getWisdomUnits","_x5","_x6","_getWheelCycles","_callee5","_args5","_t5","_context5","getWheelCycles","_x7","_getSessionData","_callee6","_args6","_t6","_context6","getSessionData","_x8","convertSequenceToSliceSequence","apiSequence","item","pairNumber","pair","getBestCycleSequence","cyclesData","cycles","bestCycle","reduce","best","firstHalf","sequence","causality_direction","reasoning","argumentation","concepts","transformApiWisdomUnits","apiWisdomUnits","isFlipped","t_minus","alias","a_plus","a_minus","t_plus","_createSessionAndAutoBuildWheel","_callee7","_this","_wheelData$wheels","sessionData","wheelData","allWheels","_args7","_t7","_context7","session_id","wheels","wheel","transformedUnits","rawWisdomUnits","selectedWheelIndex","rawData","createSessionAndAutoBuildWheel","_x9","_createSessionAndAutoBuildWheelWithCycles","_callee8","_this2","_args8","_t8","_context8","sliceSequence","createSessionAndAutoBuildWheelWithCycles","_x0","generateSequenceFromWisdomUnitsOrder","getPairTextsFromWisdomUnits","_getExistingSessionData","_callee9","_this3","_bestCycle","_cycles","_args9","_t9","_t0","_context9","getExistingSessionData","_x1","useDialecticalWheel","_React$useState","_React$useState2","setSessionId","_React$useState3","_React$useState4","setWheels","_React$useState5","_React$useState6","setSelectedWheelIndex","_React$useState7","_React$useState8","loading","setLoading","_React$useState9","_React$useState0","setError","_React$useState1","_React$useState10","setRawData","createAndBuildWheel","useCallback","_callee0","result","_t1","_context0","message","currentWheel","refetch","useDialecticalWheelWithCycles","_React$useState11","_React$useState12","_React$useState13","_React$useState14","_React$useState15","_React$useState16","_React$useState17","_React$useState18","setSliceSequence","_React$useState19","_React$useState20","setCycles","_React$useState21","_React$useState22","setBestCycle","_React$useState23","_React$useState24","_React$useState25","_React$useState26","_React$useState27","_React$useState28","createAndBuildWheelWithCycles","_callee1","_t10","_context1","getExistingData","_ref3","_callee10","existingSessionId","_t11","_context10","_x10","clearSession","createNew","getExisting","useManualWheel","_React$useState29","_React$useState30","setWheelData","_React$useState31","_React$useState32","_React$useState33","_React$useState34","_callee11","_t12","_context11","configureStore","dialecticalReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","useNodeConnections","dynamicSlices","title","recordRef","showArrows","setShowArrows","demoConnections","setDemoConnections","getAllLayerNodes","document","querySelectorAll","getLayerNodeById","querySelector","getLayerNodesForPair","getLayerNodesByType","getLayerNodeInfo","nodeElement","dataset","layerIndex","getNodeCenter","isNaN","find","layerRadii","layerRadius","angleRad","x","y","connectNodes","fromId","toId","_recordRef$current","fromNode","toNode","fromCenter","toCenter","midX","midY","wheelCenterX","wheelCenterY","distanceFromCenter","sqrt","pow","curveFactor","curveDirection","dx","dy","perpX","perpY","curveOffset","controlX","controlY","arrow","createElementNS","setAttribute","toString","markerUrl","classList","add","appendChild","toggleArrows","existingConnections","remove","createDemoConnections","setTimeout","includes","allNodes","Array","getAttribute","newDemoConnections","nodeArray","greenNodes","pinkNodes","connection1","whiteNodes","connection2","thesisNodes","antithesisNodes","thesisPink","antithesisGreen","connection3","sampleNode","parseSliceLayerCode","code","typeChar","pairNum","modifier","getNodeIdFromSliceLayerCode","mapping","baseId","originalIndex","connectNodesBySliceLayerCode","fromCode","toCode","fromNodeId","toNodeId","getAvailableSliceLayerCodes","codes","pairGroups","pairIndexStr","sort","parseDotScript","edges","errors","cleanScript","replace","edgeRegex","exec","_match2","_match3","attributesStr","fromMapping","toMapping","attributes","attrRegex","attrMatch","_attrMatch","_attrMatch2","cleanValue","toLowerCase","executeDotScript","clearExisting","parseResult","created","availableCodes","createdCount","executionErrors","edge","createSliceLayerMappingDemo","exampleConnections","createDotScriptDemo","sampleDotScript","nodeAPI","sliceLayerAPI","dotScriptAPI","useWheelSlices","sequenceWithLabels","normalSliceAngle","focusedSliceAngle","unfocusedSliceAngle","detailedSlices","focusedPair","setFocusedPair","setDynamicSlices","createSliceLayers","sliceWidth","layers","centerAngle","textAngle","textX","textY","sliceLayersCacheRef","Map","memoizedCreateSliceLayers","cache","has","get","set","memoizedSliceData","useMemo","sliceDataMap","layerCacheHits","layerCacheMisses","detailed","layersWereCached","size","createEqualSlices","slices","focusOnPair","clickedSliceType","targetVisualAngle","focusedThesisIndex","findIndex","focusedPosition","newRotation","originalThesisAngle","halfFocused","gap1Start","gap1End","gap1Size","gap2Start","gap2End","gap2Size","numUnfocused","slicesPerGap","extraSlices","positions","i","position","newSlices","focusedAntithesisIndex","usePairTexts","hasProvidedDetailedSlices","originalThesisSlice","originalAntithesisSlice","originalThesisSliceId","originalAntithesisSliceId","focused","originalSliceId","currentGapIndex","offset","checkIndex","handleSliceClick","clickedFocusedSlice","currentVisualAngle","sliceInEqualLayout","sliceIndexInEqual","equalLayoutAngle","pairSlice","clickedVisualAngle","handleSliceTouchStart","stopPropagation","touch","touches","touchStartTime","Date","now","touchStartPos","clientX","clientY","_touchData","startTime","startPos","handleSliceTouchEnd","touchDuration","changedTouches","touchEndPos","distance","reset"],"mappings":"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"}